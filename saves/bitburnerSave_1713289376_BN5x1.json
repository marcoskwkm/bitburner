{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":927,\"strength\":347,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":62},\"exp\":{\"hacking\":241238662.39991957,\"strength\":543404.0000000017,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":3090.636121744892},\"mults\":{\"hacking_chance\":1.6973420391952798,\"hacking_speed\":2.0088900839662553,\"hacking_money\":2.3634917107875184,\"hacking_grow\":1.358816650111401,\"hacking\":2.2210071257031356,\"hacking_exp\":2.162930101467747,\"strength\":1.562639147628111,\"strength_exp\":1.7189030623909223,\"defense\":1.358816650111401,\"defense_exp\":1.7189030623909223,\"dexterity\":1.562639147628111,\"dexterity_exp\":1.7189030623909223,\"agility\":1.358816650111401,\"agility_exp\":1.7189030623909223,\"charisma\":1.5490509811269972,\"charisma_exp\":1.7189030623909223,\"hacknet_node_money\":1.358816650111401,\"hacknet_node_purchase_cost\":0.7359271024262294,\"hacknet_node_ram_cost\":0.7359271024262294,\"hacknet_node_core_cost\":0.7359271024262294,\"hacknet_node_level_cost\":0.7359271024262294,\"company_rep\":1.358816650111401,\"faction_rep\":1.358816650111401,\"work_money\":1.5490509811269972,\"crime_success\":1.358816650111401,\"crime_money\":1.358816650111401,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":5,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"The Black Hand\"}],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"SoA - phyzical WKS harmonizer\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":6,\"name\":\"NeuroFlux Governor\"},{\"level\":7,\"name\":\"NeuroFlux Governor\"}],\"city\":\"Sector-12\",\"bitNodeN\":5,\"corporation\":{\"ctor\":\"Corporation\",\"data\":{\"name\":\"Nepcorp\",\"divisions\":{\"ctor\":\"JSONMap\",\"data\":[]},\"maxDivisions\":15,\"funds\":150000000000,\"revenue\":0,\"expenses\":0,\"fundingRound\":0,\"public\":false,\"totalShares\":1000000000,\"numShares\":1000000000,\"shareSalesUntilPriceUpdate\":1000000,\"shareSaleCooldown\":0,\"issueNewSharesCooldown\":0,\"dividendRate\":0,\"dividendTax\":0.15,\"investorShares\":0,\"issuedShares\":0,\"sharePrice\":2.9245025611749154,\"storedCycles\":0,\"unlocks\":{\"ctor\":\"JSONSet\",\"data\":[\"Warehouse API\",\"Office API\"]},\"upgrades\":{\"Smart Factories\":{\"level\":0,\"value\":1},\"Smart Storage\":{\"level\":0,\"value\":1},\"DreamSense\":{\"level\":0,\"value\":0},\"Wilson Analytics\":{\"level\":0,\"value\":1},\"Nuoptimal Nootropic Injector Implants\":{\"level\":0,\"value\":1},\"Speech Processor Implants\":{\"level\":0,\"value\":1},\"Neural Accelerators\":{\"level\":0,\"value\":1},\"FocusWires\":{\"level\":0,\"value\":1},\"ABC SalesBots\":{\"level\":0,\"value\":1},\"Project Insight\":{\"level\":0,\"value\":1}},\"previousTotalAssets\":150000000000,\"totalAssets\":150000000000,\"cycleValuation\":45000000000,\"valuationsList\":[45000000000,45000000000,45000000000,45000000000,45000000000,45000000000,45000000000,45000000000,45000000000,45000000000],\"valuation\":45000000000,\"state\":{\"ctor\":\"CorporationState\",\"data\":{\"state\":4}},\"seedFunded\":false}},\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"BitRunners\",\"The Black Hand\",\"NiteSec\",\"CyberSec\",\"Shadows of Anarchy\"],\"factionInvitations\":[\"Sector-12\",\"Volhaven\",\"Aevum\",\"New Tokyo\",\"Tian Di Hui\"],\"factionRumors\":{\"ctor\":\"JSONSet\",\"data\":[\"The Covenant\"]},\"hacknetNodes\":[],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":false,\"jobs\":{},\"karma\":-11303.209999999865,\"numPeopleKilled\":0,\"location\":\"Alpha Enterprises\",\"money\":17312647.027623177,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-5371392,\"codingcontract\":4387500000,\"corporation\":-150000000000,\"crime\":0,\"gang\":0,\"gang_expenses\":0,\"hacking\":424895598395.5652,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":-40056000,\"infiltration\":157470884719.8263,\"sleeves\":-130369440,\"stock\":0,\"total\":17311496.027623177,\"work\":0,\"servers\":-337330481949.92285,\"other\":-314200000,\"augmentations\":-98916192837.44112}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-7415040,\"codingcontract\":13162500000,\"corporation\":-150000000000,\"crime\":561972328.9697323,\"gang\":0,\"gang_expenses\":0,\"hacking\":1175023776197.1384,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":-326715836.14476484,\"infiltration\":197562257856.71814,\"sleeves\":1401266560,\"stock\":0,\"total\":1915588102.4305923,\"work\":0,\"servers\":-1082613435643.7104,\"other\":-942600000,\"augmentations\":-151906018320.53775}},\"playtimeSinceLastAug\":50604200,\"playtimeSinceLastBitnode\":241471200,\"lastAugReset\":1713238770976,\"lastNodeReset\":1713047898034,\"purchasedServers\":[\"s0\",\"s1\",\"s2\",\"s3\",\"s4\",\"s5\",\"s6\",\"s7\",\"s8\",\"s9\",\"s10\",\"s11\",\"s12\",\"s13\",\"s14\",\"s15\",\"s16\",\"s17\",\"s18\",\"s19\",\"s20\",\"s21\",\"s22\",\"s23\",\"s24\"],\"scriptProdSinceLastAug\":287755086280.6694,\"sleeves\":[{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":251,\"strength\":222,\"defense\":2,\"dexterity\":195,\"agility\":195,\"charisma\":1,\"intelligence\":60},\"exp\":{\"hacking\":1334998.3499999996,\"strength\":543435.5,\"defense\":31.5,\"dexterity\":231537.75,\"agility\":231537.75,\"charisma\":0,\"intelligence\":2893.78125},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveFactionWork\",\"data\":{\"type\":\"FACTION\",\"factionWorkType\":\"hacking\",\"factionName\":\"CyberSec\"}},\"memory\":100,\"shock\":0,\"storedCycles\":4,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":251,\"strength\":222,\"defense\":2,\"dexterity\":195,\"agility\":195,\"charisma\":1,\"intelligence\":60},\"exp\":{\"hacking\":1334998.3499999996,\"strength\":543435.5,\"defense\":31.5,\"dexterity\":231537.75,\"agility\":231537.75,\"charisma\":0,\"intelligence\":2893.78125},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveFactionWork\",\"data\":{\"type\":\"FACTION\",\"factionWorkType\":\"hacking\",\"factionName\":\"NiteSec\"}},\"memory\":100,\"shock\":0,\"storedCycles\":4,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":251,\"strength\":222,\"defense\":2,\"dexterity\":195,\"agility\":195,\"charisma\":1,\"intelligence\":60},\"exp\":{\"hacking\":1334998.3499999996,\"strength\":543435.5,\"defense\":31.5,\"dexterity\":231537.75,\"agility\":231537.75,\"charisma\":0,\"intelligence\":2893.78125},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveFactionWork\",\"data\":{\"type\":\"FACTION\",\"factionWorkType\":\"hacking\",\"factionName\":\"The Black Hand\"}},\"memory\":100,\"shock\":0,\"storedCycles\":4,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":251,\"strength\":222,\"defense\":2,\"dexterity\":195,\"agility\":195,\"charisma\":1,\"intelligence\":60},\"exp\":{\"hacking\":1334998.3499999996,\"strength\":543435.5,\"defense\":31.5,\"dexterity\":231537.75,\"agility\":231537.75,\"charisma\":0,\"intelligence\":2893.78125},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveFactionWork\",\"data\":{\"type\":\"FACTION\",\"factionWorkType\":\"hacking\",\"factionName\":\"BitRunners\"}},\"memory\":100,\"shock\":0,\"storedCycles\":4,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":251,\"strength\":222,\"defense\":2,\"dexterity\":195,\"agility\":195,\"charisma\":1,\"intelligence\":60},\"exp\":{\"hacking\":1334998.3499999996,\"strength\":543435.5,\"defense\":31.5,\"dexterity\":231537.75,\"agility\":231537.75,\"charisma\":0,\"intelligence\":2893.78125},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":null,\"memory\":100,\"shock\":0,\"storedCycles\":219595,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":251,\"strength\":222,\"defense\":2,\"dexterity\":195,\"agility\":195,\"charisma\":1,\"intelligence\":60},\"exp\":{\"hacking\":1334998.3499999996,\"strength\":543435.5,\"defense\":31.5,\"dexterity\":231537.75,\"agility\":231537.75,\"charisma\":0,\"intelligence\":2893.78125},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":null,\"memory\":100,\"shock\":0,\"storedCycles\":219555,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":251,\"strength\":222,\"defense\":2,\"dexterity\":195,\"agility\":195,\"charisma\":1,\"intelligence\":60},\"exp\":{\"hacking\":1334998.3499999996,\"strength\":543435.5,\"defense\":31.5,\"dexterity\":231537.75,\"agility\":231537.75,\"charisma\":0,\"intelligence\":2893.78125},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":null,\"memory\":1,\"shock\":0,\"storedCycles\":306107,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":251,\"strength\":222,\"defense\":2,\"dexterity\":195,\"agility\":195,\"charisma\":1,\"intelligence\":60},\"exp\":{\"hacking\":1334998.3499999996,\"strength\":543435.5,\"defense\":31.5,\"dexterity\":231537.75,\"agility\":231537.75,\"charisma\":0,\"intelligence\":2893.78125},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":null,\"memory\":1,\"shock\":0,\"storedCycles\":306807,\"sync\":100}}],\"sleevesFromCovenant\":5,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[[1,3],[3,3],[10,3]]},\"exploits\":[\"Unclickable\",\"TimeCompression\",\"UndocumentedFunctionCall\",\"PrototypeTampering\",\"Bypass\",\"RealityAlteration\",\"INeedARainbow\",\"YoureNotMeantToAccessThis\",\"EditSaveFile\",\"N00dles\",\"TrueRecursion\"],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1685939030492},{\"ID\":\"WORKOUT\",\"unlockedOn\":1685941010477},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1685946050497},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1685946110490},{\"ID\":\"UNCLICKABLE\",\"unlockedOn\":1685949299474},{\"ID\":\"TIMECOMPRESSION\",\"unlockedOn\":1685949916406},{\"ID\":\"UNDOCUMENTEDFUNCTIONCALL\",\"unlockedOn\":1685950396403},{\"ID\":\"PROTOTYPETAMPERING\",\"unlockedOn\":1685950756393},{\"ID\":\"BYPASS\",\"unlockedOn\":1685950996402},{\"ID\":\"REALITYALTERATION\",\"unlockedOn\":1685951176405},{\"ID\":\"RAINBOW\",\"unlockedOn\":1685952556406},{\"ID\":\"TRAVEL\",\"unlockedOn\":1685952736396},{\"ID\":\"DEVMENU\",\"unlockedOn\":1685953096403},{\"ID\":\"EDITSAVEFILE\",\"unlockedOn\":1685954477040},{\"ID\":\"UNACHIEVABLE\",\"unlockedOn\":1685954890060},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1685955655709},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1685957395699},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1685958475694},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1685964295703},{\"ID\":\"NITESEC\",\"unlockedOn\":1686008689171},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1686023013505},{\"ID\":\"TOR\",\"unlockedOn\":1686030651518},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1686031627541},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1686031627549},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1686033885056},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1686084963238},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1686089173549},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1686118837190},{\"ID\":\"DONATION\",\"unlockedOn\":1686196813394},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1686210222414},{\"ID\":\"SF1.1\",\"unlockedOn\":1686271479023},{\"ID\":\"N00DLES\",\"unlockedOn\":1686389195807},{\"ID\":\"FAST_BN\",\"unlockedOn\":1686405508802},{\"ID\":\"CORPORATION\",\"unlockedOn\":1686625850126},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1686907638877},{\"ID\":\"FROZE\",\"unlockedOn\":1687006598420},{\"ID\":\"CORPORATION_BRIBE\",\"unlockedOn\":1687077279367},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1687079199365},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1687081359348},{\"ID\":\"SF3.1\",\"unlockedOn\":1687082319357},{\"ID\":\"MONEY_1Q\",\"unlockedOn\":1687285847463},{\"ID\":\"QUEUE_40\",\"unlockedOn\":1687285967453},{\"ID\":\"MAX_RAM\",\"unlockedOn\":1687286087454},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1687286087460},{\"ID\":\"NEUROFLUX_255\",\"unlockedOn\":1687286327472},{\"ID\":\"HACKING_100000\",\"unlockedOn\":1687286687472},{\"ID\":\"CORPORATION_EMPLOYEE_3000\",\"unlockedOn\":1687332597653},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1688041161514},{\"ID\":\"SF10.1\",\"unlockedOn\":1688041701513},{\"ID\":\"SLEEVE_8\",\"unlockedOn\":1713047947738},{\"ID\":\"TRUE_RECURSION\",\"unlockedOn\":1713288953706}],\"terminalCommandHistory\":[\"ps\",\"kill 4\",\"run scripts/hack-candidates.js \",\"run scripts/hack-all.js omega-net\",\"sa 10\",\"buy -l\",\"buy AutoLink.exe \",\"sa 10\",\"backdoor\",\"home\",\"run scripts/server-tree.js \",\"sa 10\",\"backdoor\",\"home\",\"run scripts/hack-candidates.js \",\"ps\",\"kill 6\",\"run scripts/hack-all.js rho-construction\",\"gs\",\"ps\",\"run scripts/contract-finder.js \",\"run scripts/hack-all.js rho-construction\",\"run scripts/hack-candidates.js \",\"buy -l\",\"buy SQLInject.exe \",\"sa 1\",\"sa 2\",\"sa 3\",\"run scripts/server-tree.js \",\"c s0\",\"free\",\"home\",\"run scripts/buy-server.js 14 a\",\"run scripts/buy-servers.js 13\",\"cat scripts/buy-servers.js\",\"c s0\",\"free s0\",\"free\",\"home\",\"cat scripts/buy-servers.js\",\"ps\",\"run scripts/infiltration/utils.js\",\"run scripts/infiltration/utils.js \",\"ps\",\"run scripts/infiltration/utils.js \",\"run scripts/infiltration/index.js \",\"ls\",\"ps\",\"kill 63\",\"run scripts/hack-candidates.js \"],\"lastUpdate\":1713289375294,\"lastSave\":1713289361696,\"totalPlaytime\":27350994200,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":false,\"cyclesWorked\":15768,\"factionWorkType\":\"hacking\",\"factionName\":\"BitRunners\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"6700aba73601e\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"69.8.1.4\",\"isConnectedTo\":true,\"maxRam\":16384,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"Formulas.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"DeepscanV2.exe\",\"AutoLink.exe\",\"SQLInject.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    ns.tprint('Hello Remote API!');\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdGVtcGxhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUE7QUFDaEMsQ0FBQyJ9\",\"filename\":\"template.js\",\"server\":\"home\"}}],[\"scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HOSTS } from 'scripts/utils/constants';\\nexport async function main(ns) {\\n    const serverName = ns.args[0] ?? HOSTS.MAX_HARDWARE;\\n    ns.printf('Hacking %s...', serverName);\\n    const minSecurity = ns.getServerMinSecurityLevel(serverName);\\n    const maxMoney = ns.getServerMaxMoney(serverName);\\n    const targetSecurity = Math.max(1.3 * minSecurity, minSecurity + 5);\\n    const targetMoney = (0.75 * maxMoney);\\n    while (true) {\\n        const curSecurity = ns.getServerSecurityLevel(serverName);\\n        const curMoney = ns.getServerMoneyAvailable(serverName);\\n        if (curSecurity > targetSecurity) {\\n            ns.printf('Lowering difficulty (current: %.3f, target: %.3f)', curSecurity, targetSecurity);\\n            await ns.weaken(serverName);\\n        }\\n        else if (curMoney < targetMoney) {\\n            ns.printf('Increasing available money (current: %s, target: %s)', ns.formatNumber(curMoney), ns.formatNumber(targetMoney));\\n            await ns.grow(serverName);\\n        }\\n        else {\\n            await ns.hack(serverName);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBRS9DLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxVQUFVLEdBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVksSUFBSSxLQUFLLENBQUMsWUFBWSxDQUFBO0lBRS9ELEVBQUUsQ0FBQyxNQUFNLENBQUMsZUFBZSxFQUFFLFVBQVUsQ0FBQyxDQUFBO0lBRXRDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUM1RCxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLENBQUE7SUFFakQsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsV0FBVyxFQUFFLFdBQVcsR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUNuRSxNQUFNLFdBQVcsR0FBRyxDQUFDLElBQUksR0FBRyxRQUFRLENBQVcsQ0FBQTtJQUUvQyxPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUN6RCxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsdUJBQXVCLENBQUMsVUFBVSxDQUFDLENBQUE7UUFFdkQsSUFBSSxXQUFXLEdBQUcsY0FBYyxFQUFFO1lBQ2hDLEVBQUUsQ0FBQyxNQUFNLENBQ1AsbURBQW1ELEVBQ25ELFdBQVcsRUFDWCxjQUFjLENBQ2YsQ0FBQTtZQUVELE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtTQUM1QjthQUFNLElBQUksUUFBUSxHQUFHLFdBQVcsRUFBRTtZQUNqQyxFQUFFLENBQUMsTUFBTSxDQUNQLHNEQUFzRCxFQUN0RCxFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxFQUN6QixFQUFFLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUM3QixDQUFBO1lBRUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1NBQzFCO2FBQU07WUFDTCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUE7U0FDMUI7S0FDRjtBQUNILENBQUMifQ==\",\"filename\":\"scripts/hack.js\",\"server\":\"home\"}}],[\"scripts/nuke.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { FILES, HOSTS } from 'scripts/utils/constants';\\nexport const nuke = (ns, serverName) => {\\n    ns.fileExists(FILES.BRUTE_SSH, HOSTS.HOME) && ns.brutessh(serverName);\\n    ns.fileExists(FILES.FTP_CRACK, HOSTS.HOME) && ns.ftpcrack(serverName);\\n    ns.fileExists(FILES.RELAY_SMTP, HOSTS.HOME) && ns.relaysmtp(serverName);\\n    ns.fileExists(FILES.HTTP_WORM, HOSTS.HOME) && ns.httpworm(serverName);\\n    ns.fileExists(FILES.SQL_INJECT, HOSTS.HOME) && ns.sqlinject(serverName);\\n    ns.nuke(serverName);\\n    if (!ns.hasRootAccess(serverName)) {\\n        ns.tprintf('Failed to nuke %s, aborting.', serverName);\\n        ns.exit();\\n    }\\n};\\nexport async function main(ns) {\\n    if (ns.args.length === 0) {\\n        ns.tprint('Missing server name');\\n        ns.exit();\\n    }\\n    const serverName = ns.args[0];\\n    nuke(ns, serverName);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVrZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL251a2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQTtBQUV0RCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxFQUFNLEVBQUUsVUFBa0IsRUFBRSxFQUFFO0lBQ2pELEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUNyRSxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDckUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQ3ZFLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUNyRSxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUE7SUFFdkUsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUVuQixJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsRUFBRTtRQUNqQyxFQUFFLENBQUMsT0FBTyxDQUFDLDhCQUE4QixFQUFFLFVBQVUsQ0FBQyxDQUFBO1FBQ3RELEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtLQUNWO0FBQ0gsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUN4QixFQUFFLENBQUMsTUFBTSxDQUFDLHFCQUFxQixDQUFDLENBQUE7UUFDaEMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFBO0tBQ1Y7SUFFRCxNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBRXZDLElBQUksQ0FBQyxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUE7QUFDdEIsQ0FBQyJ9\",\"filename\":\"scripts/nuke.js\",\"server\":\"home\"}}],[\"scripts/exploits/unclickable.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main() {\\n    const doc = eval('document');\\n    const el = doc.getElementById('unclickable');\\n    el.style.display = 'block';\\n    el.style.visibility = 'visible';\\n    el.style.height = '20px';\\n    el.style.zIndex = '100';\\n    el.style.backgroundColor = 'red';\\n    el.onmouseup = () => {\\n        el.style.display = 'none';\\n        el.style.visibility = 'hidden';\\n        console.log('mouseup');\\n    };\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5jbGlja2FibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9leHBsb2l0cy91bmNsaWNrYWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUk7SUFDeEIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQzVCLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFFLENBQUE7SUFFN0MsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFBO0lBQzFCLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQTtJQUMvQixFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUE7SUFDeEIsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFBO0lBQ3ZCLEVBQUUsQ0FBQyxLQUFLLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQTtJQUVoQyxFQUFFLENBQUMsU0FBUyxHQUFHLEdBQUcsRUFBRTtRQUNsQixFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUE7UUFDekIsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsUUFBUSxDQUFBO1FBQzlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUE7SUFDeEIsQ0FBQyxDQUFBO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/exploits/unclickable.js\",\"server\":\"home\"}}],[\"scripts/exploits/time-compression.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main() {\\n    const oldNow = performance.now;\\n    performance.now = () => 42;\\n    setTimeout(() => {\\n        performance.now = oldNow;\\n    }, 2000);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1jb21wcmVzc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2V4cGxvaXRzL3RpbWUtY29tcHJlc3Npb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJO0lBQ3hCLE1BQU0sTUFBTSxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUE7SUFDOUIsV0FBVyxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUE7SUFDMUIsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLFdBQVcsQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFBO0lBQzFCLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQTtBQUNWLENBQUMifQ==\",\"filename\":\"scripts/exploits/time-compression.js\",\"server\":\"home\"}}],[\"scripts/exploits/tampering.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main() {\\n    const old = Number.prototype.toExponential;\\n    Number.prototype.toExponential = () => 'a';\\n    setTimeout(() => {\\n        Number.prototype.toExponential = old;\\n    }, 16 * 60 * 1000);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFtcGVyaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhwbG9pdHMvdGFtcGVyaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSTtJQUN4QixNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQTtJQUMxQyxNQUFNLENBQUMsU0FBUyxDQUFDLGFBQWEsR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUE7SUFFMUMsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLE1BQU0sQ0FBQyxTQUFTLENBQUMsYUFBYSxHQUFHLEdBQUcsQ0FBQTtJQUN0QyxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQTtBQUNwQixDQUFDIn0=\",\"filename\":\"scripts/exploits/tampering.js\",\"server\":\"home\"}}],[\"scripts/exploits/exploit.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// @ts-nocheck\\nexport async function main(ns) {\\n    ns.exploit();\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwbG9pdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2V4cGxvaXRzL2V4cGxvaXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYztBQUlkLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFBO0FBQ2QsQ0FBQyJ9\",\"filename\":\"scripts/exploits/exploit.js\",\"server\":\"home\"}}],[\"scripts/exploits/bypass.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// @ts-nocheck\\nexport async function main(ns) {\\n    const doc = eval('document');\\n    ns.bypass(doc);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnlwYXNzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhwbG9pdHMvYnlwYXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWM7QUFJZCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUM1QixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQ2hCLENBQUMifQ==\",\"filename\":\"scripts/exploits/bypass.js\",\"server\":\"home\"}}],[\"scripts/exploits/alter-reality.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// @ts-nocheck\\nexport async function main(ns) {\\n    ns.alterReality();\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWx0ZXItcmVhbGl0eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2V4cGxvaXRzL2FsdGVyLXJlYWxpdHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYztBQVdkLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFBO0FBQ25CLENBQUMifQ==\",\"filename\":\"scripts/exploits/alter-reality.js\",\"server\":\"home\"}}],[\"scripts/exploits/rainbow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// @ts-nocheck\\nexport async function main(ns) {\\n    ns.rainbow('noodles');\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFpbmJvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2V4cGxvaXRzL3JhaW5ib3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYztBQUlkLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQTtBQUN2QixDQUFDIn0=\",\"filename\":\"scripts/exploits/rainbow.js\",\"server\":\"home\"}}],[\"scripts/misc/heartbreak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// @ts-nocheck\\nexport async function main(ns) {\\n    ns.tprint(ns.heart.break());\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhcnRicmVhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL21pc2MvaGVhcnRicmVhay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxjQUFjO0FBSWQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQTtBQUM3QixDQUFDIn0=\",\"filename\":\"scripts/misc/heartbreak.js\",\"server\":\"home\"}}],[\"scripts/buy-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getPurchasedServerName = (id) => `s${id}`;\\nexport async function main(ns) {\\n    const INITIAL_EXP = 8;\\n    for (let e = INITIAL_EXP; e <= 20; e++) {\\n        const ram = Math.pow(2, e);\\n        for (let i = 0; i < ns.getPurchasedServerLimit(); i++) {\\n            ns.print(`Waiting for server ${i}...`);\\n            const hostname = getPurchasedServerName(i);\\n            if (ns.serverExists(hostname) && ns.getServerMaxRam(hostname) >= ram) {\\n                ns.print('Server exists and has enough ram. Skipping...');\\n                continue;\\n            }\\n            const cost = ns.serverExists(hostname)\\n                ? ns.getPurchasedServerUpgradeCost(hostname, ram)\\n                : ns.getPurchasedServerCost(ram);\\n            while (ns.getServerMoneyAvailable('home') < cost) {\\n                await ns.sleep(1000);\\n            }\\n            if (ns.serverExists(hostname)) {\\n                ns.upgradePurchasedServer(hostname, ram);\\n            }\\n            else {\\n                ns.purchaseServer(hostname, ram);\\n            }\\n            ns.toast(`Purchased server ${i}`);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV5LXNlcnZlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9idXktc2VydmVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxDQUFDLEVBQVUsRUFBRSxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQTtBQUU5RCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sV0FBVyxHQUFHLENBQUMsQ0FBQTtJQUVyQixLQUFLLElBQUksQ0FBQyxHQUFHLFdBQVcsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3RDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBRTFCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsdUJBQXVCLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNyRCxFQUFFLENBQUMsS0FBSyxDQUFDLHNCQUFzQixDQUFDLEtBQUssQ0FBQyxDQUFBO1lBQ3RDLE1BQU0sUUFBUSxHQUFHLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxDQUFBO1lBRTFDLElBQUksRUFBRSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsRUFBRTtnQkFDcEUsRUFBRSxDQUFDLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQyxDQUFBO2dCQUN6RCxTQUFRO2FBQ1Q7WUFFRCxNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQztnQkFDcEMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDO2dCQUNqRCxDQUFDLENBQUMsRUFBRSxDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBRWxDLE9BQU8sRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksRUFBRTtnQkFDaEQsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO2FBQ3JCO1lBRUQsSUFBSSxFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxFQUFFO2dCQUM3QixFQUFFLENBQUMsc0JBQXNCLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFBO2FBQ3pDO2lCQUFNO2dCQUNMLEVBQUUsQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFBO2FBQ2pDO1lBRUQsRUFBRSxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLENBQUMsQ0FBQTtTQUNsQztLQUNGO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/buy-servers.js\",\"server\":\"home\"}}],[\"scripts/nuke-all.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { FILES, HOSTS } from 'scripts/utils/constants';\\nimport { nuke } from 'scripts/nuke';\\nimport { getPurchasedServerName } from 'scripts/buy-servers';\\nimport { getServersByPort } from 'scripts/utils/servers';\\nconst PROGRAMS_LIST = Object.values(FILES);\\nexport async function main(ns) {\\n    const hackTarget = ns.args[0];\\n    for (let i = 0; i < ns.getPurchasedServerLimit(); i++) {\\n        const host = getPurchasedServerName(i);\\n        ns.serverExists(host) && nuke(ns, host, hackTarget);\\n    }\\n    const servers = getServersByPort(ns);\\n    const getRemServersCount = (lists) => lists.reduce((sum, list) => sum + list.length, 0);\\n    while (getRemServersCount(servers) > 0) {\\n        const programCount = PROGRAMS_LIST.reduce((cnt, file) => cnt + (ns.fileExists(file, HOSTS.HOME) ? 1 : 0), 0);\\n        for (let i = 0; i <= programCount; i++) {\\n            if (servers[i].length > 0 &&\\n                ns.getHackingLevel() >= servers[i][0].reqHack) {\\n                nuke(ns, servers[i][0].host, hackTarget);\\n                servers[i] = servers[i].slice(1);\\n            }\\n        }\\n        await ns.sleep(1000);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVrZS1hbGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9udWtlLWFsbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBQ3RELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUE7QUFDbkMsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0scUJBQXFCLENBQUE7QUFDNUQsT0FBTyxFQUFFLGdCQUFnQixFQUFlLE1BQU0sdUJBQXVCLENBQUE7QUFFckUsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUUxQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sVUFBVSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFdkMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3JELE1BQU0sSUFBSSxHQUFHLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3RDLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUE7S0FDcEQ7SUFFRCxNQUFNLE9BQU8sR0FBRyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUVwQyxNQUFNLGtCQUFrQixHQUFHLENBQUMsS0FBaUIsRUFBRSxFQUFFLENBQy9DLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUVuRCxPQUFPLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUN0QyxNQUFNLFlBQVksR0FBRyxhQUFhLENBQUMsTUFBTSxDQUN2QyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDOUQsQ0FBQyxDQUNGLENBQUE7UUFFRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksWUFBWSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3RDLElBQ0UsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDO2dCQUNyQixFQUFFLENBQUMsZUFBZSxFQUFFLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFDN0M7Z0JBQ0EsSUFBSSxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFBO2dCQUN4QyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTthQUNqQztTQUNGO1FBRUQsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3JCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/nuke-all.js\",\"server\":\"home\"}}],[\"scripts/utils/constants.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const FILES = {\\n    BRUTE_SSH: 'BruteSSH.exe',\\n    FTP_CRACK: 'FTPCrack.exe',\\n    RELAY_SMTP: 'relaySMTP.exe',\\n    HTTP_WORM: 'HTTPWorm.exe',\\n    SQL_INJECT: 'SQLInject.exe',\\n};\\nexport const SCRIPTS = {\\n    HACK: 'scripts/hack-v4.js',\\n    CONSTANTS: 'scripts/utils/constants.js',\\n    SIMPLE_HACK: 'scripts/simple-hack.js',\\n    SIMPLE_WEAKEN: 'scripts/simple-weaken.js',\\n    SIMPLE_GROW: 'scripts/simple-grow.js',\\n    TIMER: 'scripts/ui/timer.js',\\n    UTILS_TIME: 'scripts/utils/time.js',\\n};\\nexport const HOSTS = {\\n    HOME: 'home',\\n    JOESGUNS: 'joesguns',\\n    MAX_HARDWARE: 'max-hardware',\\n};\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvdXRpbHMvY29uc3RhbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRztJQUNuQixTQUFTLEVBQUUsY0FBYztJQUN6QixTQUFTLEVBQUUsY0FBYztJQUN6QixVQUFVLEVBQUUsZUFBZTtJQUMzQixTQUFTLEVBQUUsY0FBYztJQUN6QixVQUFVLEVBQUUsZUFBZTtDQUNuQixDQUFBO0FBRVYsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHO0lBQ3JCLElBQUksRUFBRSxvQkFBb0I7SUFDMUIsU0FBUyxFQUFFLDRCQUE0QjtJQUN2QyxXQUFXLEVBQUUsd0JBQXdCO0lBQ3JDLGFBQWEsRUFBRSwwQkFBMEI7SUFDekMsV0FBVyxFQUFFLHdCQUF3QjtJQUNyQyxLQUFLLEVBQUUscUJBQXFCO0lBQzVCLFVBQVUsRUFBRSx1QkFBdUI7Q0FDM0IsQ0FBQTtBQUVWLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRztJQUNuQixJQUFJLEVBQUUsTUFBTTtJQUNaLFFBQVEsRUFBRSxVQUFVO0lBQ3BCLFlBQVksRUFBRSxjQUFjO0NBQzdCLENBQUEifQ==\",\"filename\":\"scripts/utils/constants.js\",\"server\":\"home\"}}],[\"scripts/utils/servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HOSTS } from 'scripts/utils/constants';\\nexport const getServersByPort = (ns) => {\\n    const serversByPort = [[], [], [], [], [], []];\\n    const seen = new Set();\\n    const dfs = (host, prv) => {\\n        const server = {\\n            parent: prv,\\n            host,\\n            ports: ns.getServerNumPortsRequired(host),\\n            reqHack: ns.getServerRequiredHackingLevel(host),\\n            maxMoney: ns.getServerMaxMoney(host),\\n            minSecurity: ns.getServerMinSecurityLevel(host),\\n        };\\n        serversByPort[server.ports].push(server);\\n        seen.add(host);\\n        for (const nxt of ns.scan(host)) {\\n            if (!seen.has(nxt)) {\\n                dfs(nxt, host);\\n            }\\n        }\\n    };\\n    dfs(HOSTS.HOME, null);\\n    for (let i = 0; i < 6; i++) {\\n        serversByPort[i].sort((sa, sb) => sa.reqHack - sb.reqHack);\\n    }\\n    return serversByPort;\\n};\\nexport const getAllServers = (ns) => getServersByPort(ns).flat();\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL3V0aWxzL3NlcnZlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBVy9DLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsRUFBTSxFQUFjLEVBQUU7SUFDckQsTUFBTSxhQUFhLEdBQWUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBQzFELE1BQU0sSUFBSSxHQUFHLElBQUksR0FBRyxFQUFVLENBQUE7SUFFOUIsTUFBTSxHQUFHLEdBQUcsQ0FBQyxJQUFZLEVBQUUsR0FBa0IsRUFBRSxFQUFFO1FBQy9DLE1BQU0sTUFBTSxHQUFHO1lBQ2IsTUFBTSxFQUFFLEdBQUc7WUFDWCxJQUFJO1lBQ0osS0FBSyxFQUFFLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUM7WUFDekMsT0FBTyxFQUFFLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQyxJQUFJLENBQUM7WUFDL0MsUUFBUSxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUM7WUFDcEMsV0FBVyxFQUFFLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUM7U0FDaEQsQ0FBQTtRQUVELGFBQWEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ3hDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7UUFFZCxLQUFLLE1BQU0sR0FBRyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDL0IsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ2xCLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUE7YUFDZjtTQUNGO0lBQ0gsQ0FBQyxDQUFBO0lBRUQsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUE7SUFFckIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUMxQixhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUE7S0FDM0Q7SUFFRCxPQUFPLGFBQWEsQ0FBQTtBQUN0QixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxFQUFNLEVBQVksRUFBRSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFBIn0=\",\"filename\":\"scripts/utils/servers.js\",\"server\":\"home\"}}],[\"scripts/hack-candidates.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from 'scripts/utils/servers';\\nexport async function main(ns) {\\n    const candidates = getAllServers(ns)\\n        .filter((s) => ns.hasRootAccess(s.host))\\n        .sort((sa, sb) => sb.maxMoney - sa.maxMoney)\\n        .slice(0, 30);\\n    candidates.forEach((s) => ns.tprint(`${s.host}:\\\\n\\\\tMax money = $${ns.formatNumber(s.maxMoney)}\\\\n\\\\tMin security = ${s.minSecurity}\\\\n\\\\tReq hack lvl = ${s.reqHack}`));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay1jYW5kaWRhdGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NjcmlwdHMvaGFjay1jYW5kaWRhdGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQTtBQUVyRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sVUFBVSxHQUFHLGFBQWEsQ0FBQyxFQUFFLENBQUM7U0FDakMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN2QyxJQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUM7U0FDM0MsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUVmLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUN2QixFQUFFLENBQUMsTUFBTSxDQUNQLEdBQUcsQ0FBQyxDQUFDLElBQUkscUJBQXFCLEVBQUUsQ0FBQyxZQUFZLENBQzNDLENBQUMsQ0FBQyxRQUFRLENBQ1gsc0JBQXNCLENBQUMsQ0FBQyxXQUFXLHNCQUFzQixDQUFDLENBQUMsT0FBTyxFQUFFLENBQ3RFLENBQ0YsQ0FBQTtBQUNILENBQUMifQ==\",\"filename\":\"scripts/hack-candidates.js\",\"server\":\"home\"}}],[\"scripts/server-tree.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from 'scripts/utils/servers';\\nimport { HOSTS } from 'scripts/utils/constants';\\nexport async function main(ns) {\\n    const servers = getAllServers(ns);\\n    const printTree = (root, level = 0) => {\\n        ns.tprint(Array(level).join('    ') + root);\\n        for (const server of servers) {\\n            if (server.parent === root) {\\n                printTree(server.host, level + 1);\\n            }\\n        }\\n    };\\n    printTree(HOSTS.HOME);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXRyZWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zZXJ2ZXItdHJlZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sdUJBQXVCLENBQUE7QUFDckQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBRS9DLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxPQUFPLEdBQUcsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBRWpDLE1BQU0sU0FBUyxHQUFHLENBQUMsSUFBWSxFQUFFLEtBQUssR0FBRyxDQUFDLEVBQUUsRUFBRTtRQUM1QyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUE7UUFDM0MsS0FBSyxNQUFNLE1BQU0sSUFBSSxPQUFPLEVBQUU7WUFDNUIsSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLElBQUksRUFBRTtnQkFDMUIsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFBO2FBQ2xDO1NBQ0Y7SUFDSCxDQUFDLENBQUE7SUFFRCxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO0FBQ3ZCLENBQUMifQ==\",\"filename\":\"scripts/server-tree.js\",\"server\":\"home\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"home\"}}],[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"home\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"home\"}}],[\"scripts/hack-v2.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\n * An improved version of the hack script.\\n * This script runs weaken scripts immediately after invoking hack and grow\\n * scripts. This makes sure these three scripts always run with low server\\n * security, increasing the number of invocations overall.\\n * For best results, this script should be run at the same time on all servers.\\n */\\nimport { HOSTS, SCRIPTS } from 'scripts/utils/constants';\\nconst OFFSET = 1000;\\nexport async function main(ns) {\\n    const host = ns.getHostname();\\n    const target = ns.args[0] ?? HOSTS.JOESGUNS;\\n    if (!target) {\\n        ns.print('Missing target argument');\\n        ns.exit();\\n    }\\n    const getHostAvailableRam = () => ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\n    const hackRam = ns.getScriptRam(SCRIPTS.SIMPLE_HACK);\\n    const growRam = ns.getScriptRam(SCRIPTS.SIMPLE_GROW);\\n    const weakenRam = ns.getScriptRam(SCRIPTS.SIMPLE_WEAKEN);\\n    if (getHostAvailableRam() < 2 * hackRam) {\\n        ns.print(`Host ${host} does not have enough RAM for this script, aborting.`);\\n        ns.exit();\\n    }\\n    const minSecurity = ns.getServerMinSecurityLevel(target);\\n    const maxMoney = ns.getServerMaxMoney(target);\\n    const targetSecurity = Math.max(1.3 * minSecurity, minSecurity + 5);\\n    const targetMoney = (0.75 * maxMoney);\\n    while (true) {\\n        const curSecurity = ns.getServerSecurityLevel(target);\\n        const curMoney = ns.getServerMoneyAvailable(target);\\n        const availableRam = getHostAvailableRam();\\n        if (curSecurity > targetSecurity) {\\n            ns.printf('Lowering difficulty (current: %.3f, target: %.3f)', curSecurity, targetSecurity);\\n            const weakenThreads = Math.floor(availableRam / weakenRam);\\n            const weakenTime = ns.getWeakenTime(target);\\n            ns.exec(SCRIPTS.SIMPLE_WEAKEN, host, weakenThreads, target);\\n            await ns.sleep(weakenTime + OFFSET);\\n        }\\n        else if (curMoney < targetMoney) {\\n            ns.printf('Increasing available money (current: %s, target: %s)', ns.formatNumber(curMoney), ns.formatNumber(targetMoney));\\n            const growThreads = Math.floor(availableRam / 2 / growRam);\\n            const growTime = ns.getGrowTime(target);\\n            const weakenThreads = Math.floor((availableRam - growThreads * growRam) / weakenRam);\\n            const weakenTime = ns.getWeakenTime(target);\\n            ns.exec(SCRIPTS.SIMPLE_GROW, host, growThreads, target);\\n            await ns.sleep(Math.max(0, growTime - weakenTime));\\n            ns.exec(SCRIPTS.SIMPLE_WEAKEN, host, weakenThreads, target);\\n            await ns.sleep(weakenTime + OFFSET);\\n        }\\n        else {\\n            const hackThreads = Math.floor(availableRam / 2 / hackRam);\\n            const hackTime = ns.getHackTime(target);\\n            const weakenThreads = Math.floor((availableRam - hackThreads * hackRam) / weakenRam);\\n            const weakenTime = ns.getWeakenTime(target);\\n            ns.exec(SCRIPTS.SIMPLE_HACK, host, hackThreads, target);\\n            await ns.sleep(Math.max(0, hackTime - weakenTime));\\n            ns.exec(SCRIPTS.SIMPLE_WEAKEN, host, weakenThreads, target);\\n            await ns.sleep(weakenTime + OFFSET);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay12Mi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL2hhY2stdjIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBSUgsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQTtBQUV4RCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUE7QUFFbkIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUE7SUFDN0IsTUFBTSxNQUFNLEdBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVksSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFBO0lBRXZELElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDWCxFQUFFLENBQUMsS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUE7UUFDbkMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFBO0tBQ1Y7SUFFRCxNQUFNLG1CQUFtQixHQUFHLEdBQUcsRUFBRSxDQUMvQixFQUFFLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUV0RCxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUNwRCxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUNwRCxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQTtJQUV4RCxJQUFJLG1CQUFtQixFQUFFLEdBQUcsQ0FBQyxHQUFHLE9BQU8sRUFBRTtRQUN2QyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsSUFBSSxzREFBc0QsQ0FBQyxDQUFBO1FBQzVFLEVBQUUs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\",\"filename\":\"scripts/hack-v2.js\",\"server\":\"home\"}}],[\"scripts/hack-v3.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\n * Same as hack-v2, but this also implements a sync barrier so that all hack-v3\\n * scripts remain in sync, even if they are executed at different times.\\n */\\nimport { HOSTS, SCRIPTS } from 'scripts/utils/constants';\\nimport { createTimer } from 'scripts/ui/timer';\\nconst REGISTRATION_TIME = 5000;\\nconst OFFSET = 1000;\\nlet busy = false;\\nlet registrationOpen = false;\\nconst participants = new Set();\\nconst register = async (ns, id) => {\\n    while (busy) {\\n        ns.print('Waiting for barrier');\\n        await ns.sleep(1000);\\n    }\\n    let isManager = false;\\n    if (!registrationOpen) {\\n        isManager = true;\\n        registrationOpen = true;\\n        setTimeout(() => {\\n            busy = true;\\n            registrationOpen = false;\\n            // console.log(`Participants: ${[...participants.values()].join(', ')}`)\\n        }, REGISTRATION_TIME);\\n    }\\n    participants.add(id);\\n    return isManager;\\n};\\nconst finish = (id) => {\\n    participants.delete(id);\\n    if (participants.size === 0) {\\n        busy = false;\\n    }\\n};\\nexport async function main(ns) {\\n    const host = ns.getHostname();\\n    const target = ns.args[0] ?? HOSTS.JOESGUNS;\\n    if (!target) {\\n        ns.print('Missing target argument');\\n        ns.exit();\\n    }\\n    const getHostAvailableRam = () => ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\n    const hackRam = ns.getScriptRam(SCRIPTS.SIMPLE_HACK);\\n    const growRam = ns.getScriptRam(SCRIPTS.SIMPLE_GROW);\\n    const weakenRam = ns.getScriptRam(SCRIPTS.SIMPLE_WEAKEN);\\n    if (getHostAvailableRam() < 2 * hackRam) {\\n        ns.print(`Host ${host} does not have enough RAM for this script, aborting.`);\\n        ns.exit();\\n    }\\n    ns.atExit(() => {\\n        if (participants.has(host)) {\\n            finish(host);\\n        }\\n    });\\n    const minSecurity = ns.getServerMinSecurityLevel(target);\\n    const maxMoney = ns.getServerMaxMoney(target);\\n    const targetSecurity = Math.max(1.3 * minSecurity, minSecurity + 5);\\n    const targetMoney = (0.75 * maxMoney);\\n    while (true) {\\n        const isManager = await register(ns, host);\\n        const curSecurity = ns.getServerSecurityLevel(target);\\n        const curMoney = ns.getServerMoneyAvailable(target);\\n        const availableRam = getHostAvailableRam();\\n        if (curSecurity > targetSecurity) {\\n            ns.printf('Lowering difficulty (current: %.3f, target: %.3f)', curSecurity, targetSecurity);\\n            const weakenThreads = Math.floor(availableRam / weakenRam);\\n            const weakenTime = ns.getWeakenTime(target);\\n            ns.exec(SCRIPTS.SIMPLE_WEAKEN, host, weakenThreads, target);\\n            isManager && createTimer(`Weaken ${target}`, weakenTime);\\n            await ns.sleep(weakenTime + OFFSET);\\n        }\\n        else if (curMoney < targetMoney) {\\n            ns.printf('Increasing available money (current: %s, target: %s)', ns.formatNumber(curMoney), ns.formatNumber(targetMoney));\\n            const growThreads = Math.floor(availableRam / 2 / growRam);\\n            const growTime = ns.getGrowTime(target);\\n            const weakenThreads = Math.floor((availableRam - growThreads * growRam) / weakenRam);\\n            const weakenTime = ns.getWeakenTime(target);\\n            ns.exec(SCRIPTS.SIMPLE_GROW, host, growThreads, target);\\n            isManager && createTimer(`Grow ${target}`, growTime);\\n            await ns.sleep(Math.max(0, growTime - weakenTime));\\n            ns.exec(SCRIPTS.SIMPLE_WEAKEN, host, weakenThreads, target);\\n            isManager && createTimer(`Weaken ${target}`, weakenTime);\\n            await ns.sleep(weakenTime + OFFSET);\\n        }\\n        else {\\n            const hackThreads = Math.floor(availableRam / 2 / hackRam);\\n            const hackTime = ns.getHackTime(target);\\n            const weakenThreads = Math.floor((availableRam - hackThreads * hackRam) / weakenRam);\\n            const weakenTime = ns.getWeakenTime(target);\\n            ns.exec(SCRIPTS.SIMPLE_HACK, host, hackThreads, target);\\n            isManager && createTimer(`Hack ${target}`, hackTime);\\n            await ns.sleep(Math.max(0, hackTime - weakenTime));\\n            ns.exec(SCRIPTS.SIMPLE_WEAKEN, host, weakenThreads, target);\\n            isManager && createTimer(`Weaken ${target}`, weakenTime);\\n            await ns.sleep(weakenTime + OFFSET);\\n        }\\n        finish(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay12My5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL2hhY2stdjMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBSUgsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQTtBQUN4RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFFOUMsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUE7QUFDOUIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFBO0FBRW5CLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQTtBQUNoQixJQUFJLGdCQUFnQixHQUFHLEtBQUssQ0FBQTtBQUM1QixNQUFNLFlBQVksR0FBRyxJQUFJLEdBQUcsRUFBVSxDQUFBO0FBRXRDLE1BQU0sUUFBUSxHQUFHLEtBQUssRUFBRSxFQUFNLEVBQUUsRUFBVSxFQUFFLEVBQUU7SUFDNUMsT0FBTyxJQUFJLEVBQUU7UUFDWCxFQUFFLENBQUMsS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUE7UUFDL0IsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3JCO0lBRUQsSUFBSSxTQUFTLEdBQUcsS0FBSyxDQUFBO0lBRXJCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtRQUNyQixTQUFTLEdBQUcsSUFBSSxDQUFBO1FBQ2hCLGdCQUFnQixHQUFHLElBQUksQ0FBQTtRQUN2QixVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2QsSUFBSSxHQUFHLElBQUksQ0FBQTtZQUNYLGdCQUFnQixHQUFHLEtBQUssQ0FBQTtZQUN4Qix3RUFBd0U7UUFDMUUsQ0FBQyxFQUFFLGlCQUFpQixDQUFDLENBQUE7S0FDdEI7SUFFRCxZQUFZLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ3BCLE9BQU8sU0FBUyxDQUFBO0FBQ2xCLENBQUMsQ0FBQTtBQUVELE1BQU0sTUFBTSxHQUFH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\",\"filename\":\"scripts/hack-v3.js\",\"server\":\"home\"}}],[\"scripts/test.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"let foo = 0;\\nexport async function main(ns) {\\n    ns.tprint(foo);\\n    foo += 1;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3Rlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFBO0FBRVgsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ2QsR0FBRyxJQUFJLENBQUMsQ0FBQTtBQUNWLENBQUMifQ==\",\"filename\":\"scripts/test.js\",\"server\":\"home\"}}],[\"contracts/unique-paths.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\nconst grid = [\\n    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,\\n    0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\\n];\\nconst n = 8;\\nconst m = 6;\\nconst solve = () => {\\n    const check = (r, c) => grid[r * m + c];\\n    const dp = [...new Array(n)].map(() => new Array(m).fill(0));\\n    dp[0][0] = 1;\\n    for (let r = 0; r < n; r++) {\\n        for (let c = r === 0 ? 1 : 0; c < m; c++) {\\n            if (check(r, c) === 1) {\\n                continue;\\n            }\\n            dp[r][c] = (r === 0 ? 0 : dp[r - 1][c]) + (c === 0 ? 0 : dp[r][c - 1]);\\n        }\\n    }\\n    console.log(dp);\\n    console.log(dp[n - 1][m - 1]);\\n};\\nsolve();\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pcXVlLXBhdGhzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbnRyYWN0cy91bmlxdWUtcGF0aHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU0sSUFBSSxHQUFHO0lBQ1gsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7SUFDNUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztDQUNqRSxDQUFBO0FBRUQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQ1gsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBRVgsTUFBTSxLQUFLLEdBQUcsR0FBRyxFQUFFO0lBQ2pCLE1BQU0sS0FBSyxHQUFHLENBQUMsQ0FBUyxFQUFFLENBQVMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7SUFFdkQsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBRTVELEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDWixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzFCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN4QyxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUNyQixTQUFRO2FBQ1Q7WUFDRCxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO1NBQ3ZFO0tBQ0Y7SUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ2YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQy9CLENBQUMsQ0FBQTtBQUVELEtBQUssRUFBRSxDQUFBIn0=\",\"filename\":\"contracts/unique-paths.js\",\"server\":\"home\"}}],[\"contracts/subarray-max-sum.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = [\\n    -9, 8, -10, 9, 2, -9, -7, -5, 6, 9, 3, 2, 1, -1, 2, -9, 8, 5, -6, -6, 3, -3,\\n    6, 7, -1, 5, -7, -1,\\n];\\nexport const solve = (arr) => {\\n    let best = arr[0];\\n    let sum = 0;\\n    for (const x of arr) {\\n        sum += x;\\n        if (sum > best) {\\n            best = sum;\\n        }\\n        if (sum < 0) {\\n            sum = 0;\\n        }\\n    }\\n    console.log(best);\\n};\\nsolve(input);\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ViYXJyYXktbWF4LXN1bS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb250cmFjdHMvc3ViYXJyYXktbWF4LXN1bS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLEtBQUssR0FBRztJQUNaLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMzRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7Q0FDcEIsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLEdBQWEsRUFBRSxFQUFFO0lBQ3JDLElBQUksSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUNqQixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUE7SUFFWCxLQUFLLE1BQU0sQ0FBQyxJQUFJLEdBQUcsRUFBRTtRQUNuQixHQUFHLElBQUksQ0FBQyxDQUFBO1FBRVIsSUFBSSxHQUFHLEdBQUcsSUFBSSxFQUFFO1lBQ2QsSUFBSSxHQUFHLEdBQUcsQ0FBQTtTQUNYO1FBRUQsSUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUFFO1lBQ1gsR0FBRyxHQUFHLENBQUMsQ0FBQTtTQUNSO0tBQ0Y7SUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFBO0FBQ25CLENBQUMsQ0FBQTtBQUVELEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQSJ9\",\"filename\":\"contracts/subarray-max-sum.js\",\"server\":\"home\"}}],[\"scripts/contract-finder.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from 'scripts/utils/servers';\\nimport { solve } from 'scripts/contracts/index';\\nexport const findContracts = (ns) => {\\n    const servers = getAllServers(ns);\\n    const allContracts = [];\\n    for (const server of servers) {\\n        const contracts = ns.ls(server.host, '.cct');\\n        for (const filename of contracts) {\\n            allContracts.push({\\n                host: server.host,\\n                filename,\\n            });\\n        }\\n    }\\n    return allContracts;\\n};\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    while (true) {\\n        ns.print('Looking for contracts...');\\n        const contracts = findContracts(ns);\\n        for (const contract of contracts) {\\n            ns.print(`Attempting to solve ${contract.filename} at ${contract.host}...`);\\n            solve(ns, contract.host, contract.filename);\\n        }\\n        await ns.sleep(15000);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJhY3QtZmluZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NjcmlwdHMvY29udHJhY3QtZmluZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQTtBQUNyRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0seUJBQXlCLENBQUE7QUFPL0MsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQUMsRUFBTSxFQUFFLEVBQUU7SUFDdEMsTUFBTSxPQUFPLEdBQUcsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBRWpDLE1BQU0sWUFBWSxHQUFlLEVBQUUsQ0FBQTtJQUVuQyxLQUFLLE1BQU0sTUFBTSxJQUFJLE9BQU8sRUFBRTtRQUM1QixNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUE7UUFFNUMsS0FBSyxNQUFNLFFBQVEsSUFBSSxTQUFTLEVBQUU7WUFDaEMsWUFBWSxDQUFDLElBQUksQ0FBQztnQkFDaEIsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJO2dCQUNqQixRQUFRO2FBQ1QsQ0FBQyxDQUFBO1NBQ0g7S0FDRjtJQUVELE9BQU8sWUFBWSxDQUFBO0FBQ3JCLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUVwQixPQUFPLElBQUksRUFBRTtRQUNYLEVBQUUsQ0FBQyxLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQTtRQUVwQyxNQUFNLFNBQVMsR0FBRyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUE7UUFFbkMsS0FBSyxNQUFNLFFBQVEsSUFBSSxTQUFTLEVBQUU7WUFDaEMsRUFBRSxDQUFDLEtBQUssQ0FDTix1QkFBdUIsUUFBUSxDQUFDLFFBQVEsT0FBTyxRQUFRLENBQUMsSUFBSSxLQUFLLENBQ2xFLENBQUE7WUFFRCxLQUFLLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1NBQzVDO1FBRUQsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/contract-finder.js\",\"server\":\"home\"}}],[\"scripts/contracts/subarray-max-sum.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = [\\n    -9, 8, -10, 9, 2, -9, -7, -5, 6, 9, 3, 2, 1, -1, 2, -9, 8, 5, -6, -6, 3, -3,\\n    6, 7, -1, 5, -7, -1,\\n];\\nexport const solve = (arr) => {\\n    let best = arr[0];\\n    let sum = 0;\\n    for (const x of arr) {\\n        sum += x;\\n        if (sum > best) {\\n            best = sum;\\n        }\\n        if (sum < 0) {\\n            sum = 0;\\n        }\\n    }\\n    console.log(best);\\n};\\nsolve(input);\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ViYXJyYXktbWF4LXN1bS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvbnRyYWN0cy9zdWJhcnJheS1tYXgtc3VtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sS0FBSyxHQUFHO0lBQ1osQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzNFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUNwQixDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLENBQUMsR0FBYSxFQUFFLEVBQUU7SUFDckMsSUFBSSxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ2pCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQTtJQUVYLEtBQUssTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFO1FBQ25CLEdBQUcsSUFBSSxDQUFDLENBQUE7UUFFUixJQUFJLEdBQUcsR0FBRyxJQUFJLEVBQUU7WUFDZCxJQUFJLEdBQUcsR0FBRyxDQUFBO1NBQ1g7UUFFRCxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUU7WUFDWCxHQUFHLEdBQUcsQ0FBQyxDQUFBO1NBQ1I7S0FDRjtJQUVELE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDbkIsQ0FBQyxDQUFBO0FBRUQsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBIn0=\",\"filename\":\"scripts/contracts/subarray-max-sum.js\",\"server\":\"home\"}}],[\"scripts/contracts/unique-paths.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\nconst grid = [\\n    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,\\n    0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\\n];\\nconst n = 8;\\nconst m = 6;\\nconst solve = () => {\\n    const check = (r, c) => grid[r * m + c];\\n    const dp = [...new Array(n)].map(() => new Array(m).fill(0));\\n    dp[0][0] = 1;\\n    for (let r = 0; r < n; r++) {\\n        for (let c = r === 0 ? 1 : 0; c < m; c++) {\\n            if (check(r, c) === 1) {\\n                continue;\\n            }\\n            dp[r][c] = (r === 0 ? 0 : dp[r - 1][c]) + (c === 0 ? 0 : dp[r][c - 1]);\\n        }\\n    }\\n    console.log(dp);\\n    console.log(dp[n - 1][m - 1]);\\n};\\nsolve();\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pcXVlLXBhdGhzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29udHJhY3RzL3VuaXF1ZS1wYXRocy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxJQUFJLEdBQUc7SUFDWCxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztJQUM1RSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO0NBQ2pFLENBQUE7QUFFRCxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7QUFDWCxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7QUFFWCxNQUFNLEtBQUssR0FBRyxHQUFHLEVBQUU7SUFDakIsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFTLEVBQUUsQ0FBUyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUV2RCxNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUcsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFFNUQsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNaLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDMUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3hDLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ3JCLFNBQVE7YUFDVDtZQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FDdkU7S0FDRjtJQUVELE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDZixPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDL0IsQ0FBQyxDQUFBO0FBRUQsS0FBSyxFQUFFLENBQUEifQ==\",\"filename\":\"scripts/contracts/unique-paths.js\",\"server\":\"home\"}}],[\"exploits/alter-reality.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// @ts-nocheck\\nexport async function main(ns) {\\n    ns.alterReality();\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWx0ZXItcmVhbGl0eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leHBsb2l0cy9hbHRlci1yZWFsaXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWM7QUFXZCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQTtBQUNuQixDQUFDIn0=\",\"filename\":\"exploits/alter-reality.js\",\"server\":\"home\"}}],[\"exploits/bypass.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// @ts-nocheck\\nexport async function main(ns) {\\n    const doc = eval('document');\\n    ns.bypass(doc);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnlwYXNzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2V4cGxvaXRzL2J5cGFzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxjQUFjO0FBSWQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDNUIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQTtBQUNoQixDQUFDIn0=\",\"filename\":\"exploits/bypass.js\",\"server\":\"home\"}}],[\"exploits/exploit.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// @ts-nocheck\\nexport async function main(ns) {\\n    ns.exploit();\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwbG9pdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leHBsb2l0cy9leHBsb2l0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWM7QUFJZCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtBQUNkLENBQUMifQ==\",\"filename\":\"exploits/exploit.js\",\"server\":\"home\"}}],[\"exploits/rainbow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// @ts-nocheck\\nexport async function main(ns) {\\n    ns.rainbow('noodles');\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFpbmJvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leHBsb2l0cy9yYWluYm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWM7QUFJZCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUE7QUFDdkIsQ0FBQyJ9\",\"filename\":\"exploits/rainbow.js\",\"server\":\"home\"}}],[\"exploits/tampering.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main() {\\n    const old = Number.prototype.toExponential;\\n    Number.prototype.toExponential = () => 'a';\\n    setTimeout(() => {\\n        Number.prototype.toExponential = old;\\n    }, 16 * 60 * 1000);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFtcGVyaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2V4cGxvaXRzL3RhbXBlcmluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUk7SUFDeEIsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUE7SUFDMUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxhQUFhLEdBQUcsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFBO0lBRTFDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxNQUFNLENBQUMsU0FBUyxDQUFDLGFBQWEsR0FBRyxHQUFHLENBQUE7SUFDdEMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUE7QUFDcEIsQ0FBQyJ9\",\"filename\":\"exploits/tampering.js\",\"server\":\"home\"}}],[\"exploits/time-compression.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main() {\\n    const oldNow = performance.now;\\n    performance.now = () => 42;\\n    setTimeout(() => {\\n        performance.now = oldNow;\\n    }, 2000);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1jb21wcmVzc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leHBsb2l0cy90aW1lLWNvbXByZXNzaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSTtJQUN4QixNQUFNLE1BQU0sR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFBO0lBQzlCLFdBQVcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFBO0lBQzFCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxXQUFXLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQTtJQUMxQixDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUE7QUFDVixDQUFDIn0=\",\"filename\":\"exploits/time-compression.js\",\"server\":\"home\"}}],[\"exploits/unclickable.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main() {\\n    const doc = eval('document');\\n    const el = doc.getElementById('unclickable');\\n    el.style.display = 'block';\\n    el.style.visibility = 'visible';\\n    el.style.height = '20px';\\n    el.style.zIndex = '100';\\n    el.style.backgroundColor = 'red';\\n    el.onmouseup = () => {\\n        el.style.display = 'none';\\n        el.style.visibility = 'hidden';\\n        console.log('mouseup');\\n    };\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5jbGlja2FibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZXhwbG9pdHMvdW5jbGlja2FibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJO0lBQ3hCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUM1QixNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBRSxDQUFBO0lBRTdDLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQTtJQUMxQixFQUFFLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUE7SUFDL0IsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFBO0lBQ3hCLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQTtJQUN2QixFQUFFLENBQUMsS0FBSyxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUE7SUFFaEMsRUFBRSxDQUFDLFNBQVMsR0FBRyxHQUFHLEVBQUU7UUFDbEIsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFBO1FBQ3pCLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLFFBQVEsQ0FBQTtRQUM5QixPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBQ3hCLENBQUMsQ0FBQTtBQUNILENBQUMifQ==\",\"filename\":\"exploits/unclickable.js\",\"server\":\"home\"}}],[\"scripts/scp-all.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HOSTS } from 'scripts/utils/constants';\\nexport async function main(ns) {\\n    const dest = ns.args[0] ?? ns.getHostname();\\n    if (!dest) {\\n        ns.tprint('Missing destination argument');\\n        ns.exit();\\n    }\\n    const files = ns.ls(HOSTS.HOME).filter((f) => f.endsWith('.js'));\\n    ns.scp(files, dest, HOSTS.HOME);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NwLWFsbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NjcC1hbGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBRS9DLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUE7SUFFdkQsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsOEJBQThCLENBQUMsQ0FBQTtRQUN6QyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO0lBRWhFLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDakMsQ0FBQyJ9\",\"filename\":\"scripts/scp-all.js\",\"server\":\"home\"}}],[\"scripts/contracts/stock-trader.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = [2, [16, 188, 133, 38, 163, 94, 43, 43, 135, 17, 107, 39, 78, 199, 84, 78, 158, 72, 158, 71, 6, 123, 145, 55, 87, 127, 32, 29, 26, 164, 142, 141, 166]];\\nexport const solve = (input) => {\\n    const [k, arr] = input;\\n    const n = arr.length;\\n    const dp = [...Array(k + 1)].map(() => Array(n).fill(0));\\n    for (let kk = 1; kk <= k; kk++) {\\n        for (let i = 1; i < n; i++) {\\n            dp[kk][i] = Math.max(dp[kk][i - 1], dp[kk - 1][i]);\\n            for (let j = i - 1; j >= 0; j--) {\\n                if (arr[i] > arr[j]) {\\n                    dp[kk][i] = Math.max(dp[kk][i], dp[kk - 1][j] + arr[i] - arr[j]);\\n                }\\n            }\\n        }\\n    }\\n    return dp[k][n - 1];\\n};\\nexport const solvers = {\\n    'Algorithmic Stock Trader IV': solve,\\n    'Algorithmic Stock Trader III': (input) => solve([2, input]),\\n    'Algorithmic Stock Trader II': (input) => solve([input.length, input]),\\n    'Algorithmic Stock Trader I': (input) => solve([1, input]),\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvY2stdHJhZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29udHJhY3RzL3N0b2NrLXRyYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxNQUFNLEtBQUssR0FBVSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQTtBQUU1SyxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxLQUFZLEVBQUUsRUFBRTtJQUNwQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQTtJQUN0QixNQUFNLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFBO0lBRXBCLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUV4RCxLQUFLLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFO1FBQzlCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDMUIsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDbEQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQy9CLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtvQkFDbkIsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO2lCQUNqRTthQUNGO1NBQ0Y7S0FDRjtJQUVELE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtBQUNyQixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUc7SUFDckIsNkJBQTZCLEVBQUUsS0FBSztJQUNwQyw4QkFBOEIsRUFBRSxDQUFDLEtBQWUsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3RFLDZCQUE2QixFQUFFLENBQUMsS0FBZSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2hGLDRCQUE0QixFQUFFLENBQUMsS0FBZSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDckUsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUN6QixDQUFDIn0=\",\"filename\":\"scripts/contracts/stock-trader.js\",\"server\":\"home\"}}],[\"scripts/contracts/ways-to-sum.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = {\\n    n: 115,\\n    vals: [1, 2, 4, 5, 8, 9, 10, 11, 13, 14, 16],\\n};\\nexport const solve = (input) => {\\n    const { n, vals } = input;\\n    const dp = Array(n + 1).fill(0);\\n    dp[0] = 1;\\n    for (const val of vals) {\\n        for (let i = val; i <= n; i++) {\\n            dp[i] += dp[i - val];\\n        }\\n    }\\n    return dp[n];\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\nconsole.log(solve(input));\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2F5cy10by1zdW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9jb250cmFjdHMvd2F5cy10by1zdW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBT0EsTUFBTSxLQUFLLEdBQUc7SUFDWixDQUFDLEVBQUUsR0FBRztJQUNOLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUM7Q0FDN0MsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLEtBQVksRUFBRSxFQUFFO0lBQ3BDLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFBO0lBRXpCLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQy9CLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7SUFFVCxLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksRUFBRTtRQUN0QixLQUFLLElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzdCLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFBO1NBQ3JCO0tBQ0Y7SUFFRCxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUNkLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUN6QixDQUFDO0FBRUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQSJ9\",\"filename\":\"scripts/contracts/ways-to-sum.js\",\"server\":\"home\"}}],[\"scripts/contracts/index.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as proper2ColoringOfAGraph from 'scripts/contracts/proper-2-coloring-of-a-graph';\\nimport * as algorithmicStockTrader from 'scripts/contracts/algorithmic-stock-trader';\\nimport * as rleCompression from 'scripts/contracts/rle-compression';\\nimport * as lzCompression from 'scripts/contracts/lz-compression';\\nimport * as findAllValidMathExpressions from 'scripts/contracts/find-all-valid-math-expressions';\\nimport * as totalWaysToSum from 'scripts/contracts/total-ways-to-sum';\\nimport * as findLargestPrimeFactor from 'scripts/contracts/find-largest-prime-factor';\\nimport * as generateIPAddresses from 'scripts/contracts/generate-ip-addresses';\\nimport * as uniquePathsInAGrid from 'scripts/contracts/unique-paths-in-a-grid';\\nimport * as subarrayWithMaximumSum from 'scripts/contracts/subarray-with-maximum-sum';\\nimport * as viginereCipher from 'scripts/contracts/vigenere-cipher';\\nimport * as hammingCodes from 'scripts/contracts/hamming-codes';\\nimport * as arrayJumpingGame from 'scripts/contracts/array-jumping-game';\\nimport * as caesarCipher from 'scripts/contracts/caesar-cipher';\\nimport * as spiralizeMatrix from 'scripts/contracts/spiralize-matrix';\\nimport * as mergeOverlappingIntervals from 'scripts/contracts/merge-overlapping-intervals';\\nimport * as shortestPathInAGrid from 'scripts/contracts/shortest-path-in-a-grid';\\nimport * as sanitizeParenthesisInExpression from 'scripts/contracts/sanitize-parenthesis-in-expression';\\nimport * as minimumPathSumInATriangle from 'scripts/contracts/minimum-path-sum-in-a-triangle';\\nconst solvers = {\\n    ...proper2ColoringOfAGraph.solvers,\\n    ...algorithmicStockTrader.solvers,\\n    ...rleCompression.solvers,\\n    ...lzCompression.solvers,\\n    ...findAllValidMathExpressions.solvers,\\n    ...totalWaysToSum.solvers,\\n    ...findLargestPrimeFactor.solvers,\\n    ...generateIPAddresses.solvers,\\n    ...uniquePathsInAGrid.solvers,\\n    ...subarrayWithMaximumSum.solvers,\\n    ...viginereCipher.solvers,\\n    ...hammingCodes.solvers,\\n    ...arrayJumpingGame.solvers,\\n    ...caesarCipher.solvers,\\n    ...spiralizeMatrix.solvers,\\n    ...mergeOverlappingIntervals.solvers,\\n    ...shortestPathInAGrid.solvers,\\n    ...sanitizeParenthesisInExpression.solvers,\\n    ...minimumPathSumInATriangle.solvers,\\n};\\nexport const solve = (ns, host, filename) => {\\n    const name = ns.codingcontract.getContractType(filename, host);\\n    const data = ns.codingcontract.getData(filename, host);\\n    const solver = solvers[name];\\n    if (!solver) {\\n        ns.toast(`Solver for contract \\\"${name}\\\" not implemented.`, 'warning', 5000);\\n        return;\\n    }\\n    const reward = ns.codingcontract.attempt(solver(data), filename, host);\\n    if (reward) {\\n        ns.toast(`Correctly solved contract. Reward: ${reward}`, 'success', 5000);\\n    }\\n    else {\\n        ns.toast('Failed to solve contract.', 'error', 5000);\\n        ns.tprint(`Failed to solve ${filename} at ${host}`);\\n        ns.exit();\\n    }\\n};\\nexport async function main(ns) {\\n    const [host, filename] = ns.args;\\n    if (!host || !filename) {\\n        ns.tprint('Missing host or filename argument');\\n        ns.exit();\\n    }\\n    solve(ns, host, filename);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9jb250cmFjdHMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxLQUFLLHVCQUF1QixNQUFNLGdEQUFnRCxDQUFBO0FBQ3pGLE9BQU8sS0FBSyxzQkFBc0IsTUFBTSw0Q0FBNEMsQ0FBQTtBQUNwRixPQUFPLEtBQUssY0FBYyxNQUFNLG1DQUFtQyxDQUFBO0FBQ25FLE9BQU8sS0FBSyxhQUFhLE1BQU0sa0NBQWtDLENBQUE7QUFDakUsT0FBTyxLQUFLLDJCQUEyQixNQUFNLG1EQUFtRCxDQUFBO0FBQ2hHLE9BQU8sS0FBSyxjQUFjLE1BQU0scUNBQXFDLENBQUE7QUFDckUsT0FBTyxLQUFLLHNCQUFzQixNQUFNLDZDQUE2QyxDQUFBO0FBQ3JGLE9BQU8sS0FBSyxtQkFBbUIsTUFBTSx5Q0FBeUMsQ0FBQTtBQUM5RSxPQUFPLEtBQUssa0JBQWtCLE1BQU0sMENBQTBDLENBQUE7QUFDOUUsT0FBTyxLQUFLLHNCQUFzQixNQUFNLDZDQUE2QyxDQUFBO0FBQ3JGLE9BQU8sS0FBSyxjQUFjLE1BQU0sbUNBQW1DLENBQUE7QUFDbkUsT0FBTyxLQUFLLFlBQVksTUFBTSxpQ0FBaUMsQ0FBQTtBQUMvRCxPQUFPLEtBQUssZ0JBQWdCLE1BQU0sc0NBQXNDLENBQUE7QUFDeEUsT0FBTyxLQUFLLFlBQVksTUFBTSxpQ0FBaUMsQ0FBQTtBQUMvRCxPQUFPLEtBQUssZUFBZSxNQUFNLG9DQUFvQyxDQUFBO0FBQ3JFLE9BQU8sS0FBSyx5QkFBeUIsTUFBTSwrQ0FBK0MsQ0FBQTtBQUMxRixPQUFPLEtBQUssbUJBQW1CLE1BQU0sMkNBQTJDLENBQUE7QUFDaEYsT0FBTyxLQUFLLCtCQUErQixNQUFNLHNEQUFzRCxDQUFBO0FBQ3ZHLE9BQU8sS0FBSyx5QkFBeUIsTUFBTSxrREFBa0QsQ0FBQTtBQUU3RixNQUFNLE9BQU8sR0FBNEM7SUFDdkQsR0FB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\",\"filename\":\"scripts/contracts/index.js\",\"server\":\"home\"}}],[\"scripts/ui/timer.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatTime } from 'scripts/utils/time';\\nconst CONTAINER_ID = 'custom-ui-container';\\nconst init = () => {\\n    const doc = eval('document');\\n    if (doc.getElementById(CONTAINER_ID)) {\\n        return;\\n    }\\n    const container = doc.createElement('div');\\n    container.id = CONTAINER_ID;\\n    container.style.position = 'fixed';\\n    container.style.bottom = '2rem';\\n    container.style.right = '0';\\n    container.style.display = 'flex';\\n    container.style.flexDirection = 'column';\\n    container.style.alignItems = 'end';\\n    container.style.fontFamily =\\n        '\\\"Lucida Console\\\", \\\"Lucida Sans Unicode\\\", \\\"Fira Mono\\\", Consolas, \\\"Courier New\\\", Courier, monospace, \\\"Times New Roman\\\"';\\n    container.style.zIndex = '100';\\n    container.style.color = '#0c0';\\n    doc.body.append(container);\\n};\\nexport const createTimer = (label, time) => {\\n    const doc = eval('document');\\n    init();\\n    const now = performance.now();\\n    const target = now + time;\\n    const el = doc.createElement('div');\\n    el.style.padding = '1rem 0.5rem';\\n    el.style.borderStyle = 'solid';\\n    el.style.borderColor = 'rgb(128, 128, 128)';\\n    el.style.borderWidth = '1px';\\n    const container = doc.getElementById(CONTAINER_ID);\\n    const refresh = () => {\\n        const remTime = target - performance.now();\\n        if (remTime < 0) {\\n            container?.removeChild(el);\\n            return;\\n        }\\n        el.innerText = `${label}: ${formatTime(remTime)}`;\\n        setTimeout(refresh, 100);\\n    };\\n    refresh();\\n    container?.append(el);\\n};\\nexport async function main() {\\n    init();\\n    createTimer('Test', 30000);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy91aS90aW1lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sb0JBQW9CLENBQUE7QUFFL0MsTUFBTSxZQUFZLEdBQUcscUJBQXFCLENBQUE7QUFFMUMsTUFBTSxJQUFJLEdBQUcsR0FBRyxFQUFFO0lBQ2hCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQWEsQ0FBQTtJQUV4QyxJQUFJLEdBQUcsQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLEVBQUU7UUFDcEMsT0FBTTtLQUNQO0lBRUQsTUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUMxQyxTQUFTLENBQUMsRUFBRSxHQUFHLFlBQVksQ0FBQTtJQUMzQixTQUFTLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUE7SUFDbEMsU0FBUyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFBO0lBQy9CLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQTtJQUMzQixTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUE7SUFDaEMsU0FBUyxDQUFDLEtBQUssQ0FBQyxhQUFhLEdBQUcsUUFBUSxDQUFBO0lBQ3hDLFNBQVMsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQTtJQUNsQyxTQUFTLENBQUMsS0FBSyxDQUFDLFVBQVU7UUFDeEIsc0hBQXNILENBQUE7SUFDeEgsU0FBUyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFBO0lBQzlCLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQTtJQUU5QixHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQTtBQUM1QixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsQ0FBQyxLQUFhLEVBQUUsSUFBWSxFQUFFLEVBQUU7SUFDekQsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBYSxDQUFBO0lBRXhDLElBQUksRUFBRSxDQUFBO0lBRU4sTUFBTSxHQUFHLEdBQUcsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFBO0lBQzdCLE1BQU0sTUFBTSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUE7SUFFekIsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUNuQyxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxhQUFhLENBQUE7SUFDaEMsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFBO0lBQzlCLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFHLG9CQUFvQixDQUFBO0lBQzNDLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQTtJQUU1QixNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFBO0lBRWxELE1BQU0sT0FBTyxHQUFHLEdBQUcsRUFBRTtRQUNuQixNQUFNLE9BQU8sR0FBRyxNQUFNLEdBQUcsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFBO1FBRTFDLElBQUksT0FBTyxHQUFHLENBQUMsRUFBRTtZQUNmLFNBQVMsRUFBRSxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUE7WUFDMUIsT0FBTTtTQUNQO1FBRUQsRUFBRSxDQUFDLFNBQVMsR0FBRyxHQUFHLEtBQUssS0FBSyxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQTtRQUNqRCxVQUFVLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFBO0lBQzFCLENBQUMsQ0FBQTtJQUVELE9BQU8sRUFBRSxDQUFBO0lBRVQsU0FBUyxFQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQTtBQUN2QixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUk7SUFDeEIsSUFBSSxFQUFFLENBQUE7SUFFTixXQUFXLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFBO0FBQzVCLENBQUMifQ==\",\"filename\":\"scripts/ui/timer.js\",\"server\":\"home\"}}],[\"scripts/hack-v4.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\n * Improves v3 implementing a HGW strategy and a UI with server stats\\n */\\nimport { SCRIPTS } from 'scripts/utils/constants';\\nimport { formatTime } from 'scripts/utils/time';\\nconst REGISTRATION_TIME_MS = 5000;\\nconst OFFSET_MS = 1000;\\nclass Barrier {\\n    static status = {};\\n    static init(barrierId) {\\n        if (!this.status[barrierId]) {\\n            this.status[barrierId] = {\\n                busy: false,\\n                registering: false,\\n                participants: new Set(),\\n                members: new Set(),\\n            };\\n        }\\n    }\\n    static join(id, barrierId) {\\n        this.init(barrierId);\\n        const status = this.status[barrierId];\\n        status.members.add(id);\\n    }\\n    static leave(ns, id, barrierId, ui) {\\n        this.init(barrierId);\\n        const status = this.status[barrierId];\\n        status.members.delete(id);\\n        if (status.members.size === 0) {\\n            ui.destroy();\\n        }\\n        if (status.participants.has(id)) {\\n            this.finish(ns, id, barrierId);\\n        }\\n    }\\n    static async register(ns, id, barrierId) {\\n        this.init(barrierId);\\n        const status = this.status[barrierId];\\n        while (status.busy) {\\n            ns.print('Waiting for barrier');\\n            await ns.sleep(1000);\\n        }\\n        let isManager = false;\\n        if (!status.registering) {\\n            status.registering = true;\\n            isManager = true;\\n            setTimeout(() => {\\n                status.busy = true;\\n                status.registering = false;\\n            }, REGISTRATION_TIME_MS);\\n        }\\n        status.participants.add(id);\\n        return isManager;\\n    }\\n    static finish(ns, id, barrierId) {\\n        const status = this.status[barrierId];\\n        if (!status) {\\n            ns.print('Warning: Trying to finish in barrier that does not exist, which is a no-op.');\\n            return;\\n        }\\n        if (!status.participants.has(id)) {\\n            ns.print('Warning: Trying to finish an element that is not in the barrier, which is a no-op.');\\n            return;\\n        }\\n        status.participants.delete(id);\\n        if (status.participants.size === 0) {\\n            status.busy = false;\\n        }\\n    }\\n}\\nclass UI {\\n    id;\\n    containerId;\\n    securityId;\\n    moneyId;\\n    timersId;\\n    minSecurity;\\n    maxMoney;\\n    ns;\\n    constructor(ns, id, stats) {\\n        this.ns = ns;\\n        this.id = id;\\n        this.containerId = `hack-status-${id}`;\\n        this.securityId = this.containerId + '--security';\\n        this.moneyId = this.containerId + '--money';\\n        this.timersId = this.containerId + '--timers';\\n        this.minSecurity = stats.minSecurity;\\n        this.maxMoney = stats.maxMoney;\\n        this.init();\\n    }\\n    destroy() {\\n        const doc = eval('document');\\n        const container = doc.getElementById(this.containerId);\\n        if (container) {\\n            doc.body.removeChild(container);\\n        }\\n    }\\n    init() {\\n        const doc = eval('document');\\n        if (doc.getElementById(this.containerId)) {\\n            return;\\n        }\\n        const container = doc.createElement('div');\\n        container.id = this.containerId;\\n        container.style.position = 'fixed';\\n        container.style.bottom = '2rem';\\n        container.style.right = '0';\\n        container.style.display = 'flex';\\n        container.style.flexDirection = 'column';\\n        container.style.fontFamily =\\n            '\\\"Lucida Console\\\", \\\"Lucida Sans Unicode\\\", \\\"Fira Mono\\\", Consolas, \\\"Courier New\\\", Courier, monospace, \\\"Times New Roman\\\"';\\n        container.style.zIndex = '100';\\n        container.style.color = '#0c0';\\n        container.style.borderStyle = 'solid';\\n        container.style.borderColor = 'rgb(128, 128, 128)';\\n        container.style.borderWidth = '1px';\\n        container.style.padding = '0.5rem';\\n        const title = doc.createElement('div');\\n        title.style.padding = '0.5rem';\\n        title.style.alignSelf = 'center';\\n        title.innerText = 'Hack v4';\\n        title.style.fontWeight = 'bold';\\n        container.append(title);\\n        const target = doc.createElement('div');\\n        target.innerText = `Target: ${this.id}`;\\n        container.append(target);\\n        const security = doc.createElement('div');\\n        security.id = this.securityId;\\n        security.innerText = 'Security: 0 (min: 0)';\\n        container.append(security);\\n        const money = doc.createElement('div');\\n        money.id = this.moneyId;\\n        money.innerText = 'Money: 0 (max: 0)';\\n        container.append(money);\\n        const timers = doc.createElement('div');\\n        timers.id = this.timersId;\\n        timers.style.marginTop = '1rem';\\n        container.append(timers);\\n        doc.body.append(container);\\n    }\\n    setSecurity(security) {\\n        const doc = eval('document');\\n        const el = doc.getElementById(this.securityId);\\n        if (el) {\\n            el.innerText = `Security: ${security.toFixed(3)} (min: ${this.minSecurity})`;\\n        }\\n    }\\n    setMoney(money) {\\n        const doc = eval('document');\\n        const el = doc.getElementById(this.moneyId);\\n        if (el) {\\n            el.innerText = `Money: ${this.ns.formatNumber(money)} (max: ${this.ns.formatNumber(this.maxMoney)})`;\\n        }\\n    }\\n    addTimer(label, time) {\\n        const doc = eval('document');\\n        const now = performance.now();\\n        const target = now + time;\\n        const el = doc.createElement('div');\\n        const container = doc.getElementById(this.timersId);\\n        const refresh = () => {\\n            const remTime = target - performance.now();\\n            if (remTime < 0) {\\n                container?.removeChild(el);\\n                return;\\n            }\\n            el.innerText = `${label}: ${formatTime(remTime)}`;\\n            setTimeout(refresh, 200);\\n        };\\n        refresh();\\n        container?.append(el);\\n    }\\n}\\nexport async function main(ns) {\\n    const host = ns.getHostname();\\n    const target = ns.args[0];\\n    if (!target) {\\n        ns.print('Missing target argument');\\n        ns.exit();\\n    }\\n    const getHostAvailableRam = () => ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\n    const hackRam = ns.getScriptRam(SCRIPTS.SIMPLE_HACK);\\n    const growRam = ns.getScriptRam(SCRIPTS.SIMPLE_GROW);\\n    const weakenRam = ns.getScriptRam(SCRIPTS.SIMPLE_WEAKEN);\\n    if (getHostAvailableRam() < 4 * hackRam) {\\n        ns.print(`Host ${host} does not have enough RAM for this script, aborting.`);\\n        ns.exit();\\n    }\\n    ns.atExit(() => {\\n        Barrier.leave(ns, host, target, ui);\\n    });\\n    Barrier.join(host, target);\\n    const minSecurity = ns.getServerMinSecurityLevel(target);\\n    const maxMoney = ns.getServerMaxMoney(target);\\n    const ui = new UI(ns, target, { minSecurity, maxMoney });\\n    while (true) {\\n        const isManager = await Barrier.register(ns, host, target);\\n        const curSecurity = ns.getServerSecurityLevel(target);\\n        const curMoney = ns.getServerMoneyAvailable(target);\\n        const availableRam = getHostAvailableRam();\\n        isManager && ui.setSecurity(curSecurity);\\n        isManager && ui.setMoney(curMoney);\\n        const events = [];\\n        if (curSecurity > minSecurity) {\\n            const weakenThreads = Math.floor(availableRam / weakenRam);\\n            const weakenTime = ns.getWeakenTime(target);\\n            if (isManager) {\\n                ui.addTimer('Weaken', weakenTime);\\n            }\\n            events.push({\\n                type: 'script-start',\\n                script: 'weaken',\\n                threads: weakenThreads,\\n                t: 0,\\n            });\\n            events.push({\\n                type: 'script-end',\\n                script: 'weaken',\\n                t: weakenTime,\\n            });\\n        }\\n        else if (curMoney < maxMoney) {\\n            const growThreads = Math.floor(availableRam / 2 / growRam);\\n            const growTime = ns.getGrowTime(target);\\n            const weakenThreads = Math.floor((availableRam - growThreads * growRam) / weakenRam);\\n            const weakenTime = ns.getWeakenTime(target);\\n            const weakenDelay = Math.max(0, growTime - weakenTime + OFFSET_MS);\\n            if (isManager) {\\n                ui.addTimer('Grow', growTime);\\n                ui.addTimer('Weaken', weakenDelay + weakenTime);\\n            }\\n            events.push({\\n                type: 'script-start',\\n                script: 'grow',\\n                threads: growThreads,\\n                t: 0,\\n            });\\n            events.push({\\n                type: 'script-end',\\n                script: 'grow',\\n                t: growTime,\\n            });\\n            events.push({\\n                type: 'script-start',\\n                script: 'weaken',\\n                threads: weakenThreads,\\n                t: weakenDelay,\\n            });\\n            events.push({\\n                type: 'script-end',\\n                script: 'weaken',\\n                t: weakenDelay + weakenTime,\\n            });\\n        }\\n        else {\\n            const hackThreads = Math.floor(availableRam / 4 / hackRam);\\n            const hackTime = ns.getHackTime(target);\\n            const growThreads = Math.floor(availableRam / 4 / growRam);\\n            const growTime = ns.getGrowTime(target);\\n            const weakenThreads = Math.floor((availableRam - hackThreads * hackRam - growThreads * growRam) /\\n                weakenRam);\\n            const weakenTime = ns.getWeakenTime(target);\\n            const growDelay = Math.max(0, hackTime - growTime + OFFSET_MS);\\n            const weakenDelay = Math.max(0, growDelay + growTime - weakenTime + OFFSET_MS);\\n            if (isManager) {\\n                ui.addTimer('Hack', hackTime);\\n                ui.addTimer('Grow', growDelay + growTime);\\n                ui.addTimer('Weaken', weakenDelay + weakenTime);\\n            }\\n            events.push({\\n                type: 'script-start',\\n                script: 'hack',\\n                threads: hackThreads,\\n                t: 0,\\n            });\\n            events.push({\\n                type: 'script-end',\\n                script: 'hack',\\n                t: hackTime,\\n            });\\n            events.push({\\n                type: 'script-start',\\n                script: 'grow',\\n                threads: growThreads,\\n                t: growDelay,\\n            });\\n            events.push({\\n                type: 'script-end',\\n                script: 'grow',\\n                t: growDelay + growTime,\\n            });\\n            events.push({\\n                type: 'script-start',\\n                script: 'weaken',\\n                threads: weakenThreads,\\n                t: weakenDelay,\\n            });\\n            events.push({\\n                type: 'script-end',\\n                script: 'weaken',\\n                t: weakenDelay + weakenTime,\\n            });\\n        }\\n        events.sort((a, b) => a.t - b.t);\\n        let elapsedTime = 0;\\n        for (const event of events) {\\n            await ns.sleep(event.t - elapsedTime);\\n            elapsedTime = event.t;\\n            if (event.type === 'script-start') {\\n                const script = event.script === 'grow'\\n                    ? SCRIPTS.SIMPLE_GROW\\n                    : event.script === 'hack'\\n                        ? SCRIPTS.SIMPLE_HACK\\n                        : SCRIPTS.SIMPLE_WEAKEN;\\n                ns.exec(script, host, event.threads, target);\\n            }\\n            else {\\n                if (event.script === 'grow' || event.script === 'hack') {\\n                    ui.setMoney(ns.getServerMoneyAvailable(target));\\n                }\\n                ui.setSecurity(ns.getServerSecurityLevel(target));\\n            }\\n        }\\n        while (ns.scriptRunning(SCRIPTS.SIMPLE_GROW, host) ||\\n            ns.scriptRunning(SCRIPTS.SIMPLE_HACK, host) ||\\n            ns.scriptRunning(SCRIPTS.SIMPLE_WEAKEN, host)) {\\n            await ns.sleep(500);\\n        }\\n        Barrier.finish(ns, host, target);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay12NC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL2hhY2stdjQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0dBRUc7QUFJSCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0seUJBQXlCLENBQUE7QUFDakQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG9CQUFvQixDQUFBO0FBRS9DLE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxDQUFBO0FBQ2pDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQTtBQXdCdEIsTUFBTSxPQUFPO0lBQ1gsTUFBTSxDQUFDLE1BQU0sR0FBa0MsRUFBRSxDQUFBO0lBRWpELE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBaUI7UUFDM0IsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDM0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRztnQkFDdkIsSUFBSSxFQUFFLEtBQUs7Z0JBQ1gsV0FBVyxFQUFFLEtBQUs7Z0JBQ2xCLFlBQVksRUFBRSxJQUFJLEdBQUcsRUFBRTtnQkFDdkIsT0FBTyxFQUFFLElBQUksR0FBRyxFQUFFO2FBQ25CLENBQUE7U0FDRjtJQUNILENBQUM7SUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQVUsRUFBRSxTQUFpQjtRQUN2QyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQ3BCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUE7UUFDckMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDeEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBTSxFQUFFLEVBQVUsRUFBRSxTQUFpQixFQUFFLEVBQU07UUFDeEQsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUNwQixNQUFNLE1B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\",\"filename\":\"scripts/hack-v4.js\",\"server\":\"home\"}}],[\"scripts/utils/time.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const formatTime = (timeMs) => {\\n    const seconds = Math.floor(timeMs / 1000);\\n    const minutes = Math.floor(seconds / 60);\\n    const hours = Math.floor(minutes / 60);\\n    const remSeconds = seconds - minutes * 60;\\n    const remMinutes = minutes - hours * 60;\\n    return [hours > 0 ? hours : null, remMinutes, remSeconds]\\n        .filter((x) => x !== null)\\n        .map((x) => x.toString().padStart(2, '0'))\\n        .join(':');\\n};\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL3V0aWxzL3RpbWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsTUFBYyxFQUFFLEVBQUU7SUFDM0MsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLENBQUE7SUFDekMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDLENBQUE7SUFDeEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDLENBQUE7SUFDdEMsTUFBTSxVQUFVLEdBQUcsT0FBTyxHQUFHLE9BQU8sR0FBRyxFQUFFLENBQUE7SUFDekMsTUFBTSxVQUFVLEdBQUcsT0FBTyxHQUFHLEtBQUssR0FBRyxFQUFFLENBQUE7SUFFdkMsT0FBTyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxVQUFVLENBQUM7U0FDdEQsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFlLEVBQUUsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDO1NBQ3RDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDekMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQ2QsQ0FBQyxDQUFBIn0=\",\"filename\":\"scripts/utils/time.js\",\"server\":\"home\"}}],[\"scripts/contracts/proper-2-coloring-of-a-graph.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = [\\n    4,\\n    [\\n        [0, 2],\\n        [0, 3],\\n        [1, 2],\\n        [1, 3],\\n    ],\\n];\\nconst solve = (arr) => {\\n    const [n, edges] = arr;\\n    const ans = Array(n).fill(-1);\\n    const adj = [...Array(n)].map(() => []);\\n    for (const [u, v] of edges) {\\n        adj[u].push(v);\\n        adj[v].push(u);\\n    }\\n    const dfs = (v, c = 0) => {\\n        ans[v] = c;\\n        for (const w of adj[v]) {\\n            if (ans[w] === c) {\\n                return false;\\n            }\\n            else if (ans[w] === -1) {\\n                if (!dfs(w, 1 - c)) {\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    };\\n    for (let v = 0; v < n; v++) {\\n        if (ans[v] === -1) {\\n            if (!dfs(v)) {\\n                return [];\\n            }\\n        }\\n    }\\n    return ans;\\n};\\nexport const solvers = {\\n    'Proper 2-Coloring of a Graph': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcGVyLTItY29sb3Jpbmctb2YtYS1ncmFwaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvbnRyYWN0cy9wcm9wZXItMi1jb2xvcmluZy1vZi1hLWdyYXBoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE1BQU0sS0FBSyxHQUFVO0lBQ25CLENBQUM7SUFDRDtRQUNFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNOLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNOLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNOLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNQO0NBQ0YsQ0FBQTtBQUVELE1BQU0sS0FBSyxHQUFHLENBQUMsR0FBVSxFQUFFLEVBQUU7SUFDM0IsTUFBTSxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUE7SUFDdEIsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQzdCLE1BQU0sR0FBRyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBYyxDQUFDLENBQUE7SUFFbkQsS0FBSyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEtBQUssRUFBRTtRQUMxQixHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUNmO0lBRUQsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFTLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFO1FBQy9CLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDVixLQUFLLE1BQU0sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUN0QixJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ2hCLE9BQU8sS0FBSyxDQUFBO2FBQ2I7aUJBQU0sSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7Z0JBQ3hCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtvQkFDbEIsT0FBTyxLQUFLLENBQUE7aUJBQ2I7YUFDRjtTQUNGO1FBQ0QsT0FBTyxJQUFJLENBQUE7SUFDYixDQUFDLENBQUE7SUFFRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzFCLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ1gsT0FBTyxFQUFFLENBQUE7YUFDVjtTQUNGO0tBQ0Y7SUFFRCxPQUFPLEdBQUcsQ0FBQTtBQUNaLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRztJQUNyQiw4QkFBOEIsRUFBRSxLQUFLO0NBQ3RDLENBQUE7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7QUFDekIsQ0FBQyJ9\",\"filename\":\"scripts/contracts/proper-2-coloring-of-a-graph.js\",\"server\":\"home\"}}],[\"scripts/contracts/algorithmic-stock-trader.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = [\\n    2,\\n    [\\n        16, 188, 133, 38, 163, 94, 43, 43, 135, 17, 107, 39, 78, 199, 84, 78, 158,\\n        72, 158, 71, 6, 123, 145, 55, 87, 127, 32, 29, 26, 164, 142, 141, 166,\\n    ],\\n];\\nexport const solve = (input) => {\\n    const [k, arr] = input;\\n    const n = arr.length;\\n    const dp = [...Array(k + 1)].map(() => Array(n).fill(0));\\n    for (let kk = 1; kk <= k; kk++) {\\n        for (let i = 1; i < n; i++) {\\n            dp[kk][i] = Math.max(dp[kk][i - 1], dp[kk - 1][i]);\\n            for (let j = i - 1; j >= 0; j--) {\\n                if (arr[i] > arr[j]) {\\n                    dp[kk][i] = Math.max(dp[kk][i], dp[kk - 1][j] + arr[i] - arr[j]);\\n                }\\n            }\\n        }\\n    }\\n    return dp[k][n - 1];\\n};\\nexport const solvers = {\\n    'Algorithmic Stock Trader IV': solve,\\n    'Algorithmic Stock Trader III': (input) => solve([2, input]),\\n    'Algorithmic Stock Trader II': (input) => solve([input.length, input]),\\n    'Algorithmic Stock Trader I': (input) => solve([1, input]),\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxnb3JpdGhtaWMtc3RvY2stdHJhZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29udHJhY3RzL2FsZ29yaXRobWljLXN0b2NrLXRyYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxNQUFNLEtBQUssR0FBVTtJQUNuQixDQUFDO0lBQ0Q7UUFDRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRztRQUN6RSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHO0tBQ3RFO0NBQ0YsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLEtBQVksRUFBRSxFQUFFO0lBQ3BDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFBO0lBQ3RCLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUE7SUFFcEIsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBRXhELEtBQUssSUFBSSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUU7UUFDOUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMxQixFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUNsRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDL0IsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFO29CQUNuQixFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7aUJBQ2pFO2FBQ0Y7U0FDRjtLQUNGO0lBRUQsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0FBQ3JCLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRztJQUNyQiw2QkFBNkIsRUFBRSxLQUFLO0lBQ3BDLDhCQUE4QixFQUFFLENBQUMsS0FBZSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDdEUsNkJBQTZCLEVBQUUsQ0FBQyxLQUFlLEVBQUUsRUFBRSxDQUNqRCxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzlCLDRCQUE0QixFQUFFLENBQUMsS0FBZSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDckUsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUN6QixDQUFDIn0=\",\"filename\":\"scripts/contracts/algorithmic-stock-trader.js\",\"server\":\"home\"}}],[\"scripts/contracts/rle-compression.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = 'zzzzzzzzzzzzzzzzzzz';\\nexport const solve = (input) => {\\n    let lastChar = '';\\n    let lastCnt = 0;\\n    const ans = [];\\n    for (const c of input) {\\n        if (c !== lastChar || lastCnt === 9) {\\n            if (lastCnt > 0) {\\n                ans.push(lastCnt);\\n                ans.push(lastChar);\\n            }\\n            lastCnt = 0;\\n            lastChar = c;\\n        }\\n        lastCnt++;\\n    }\\n    ans.push(lastCnt);\\n    ans.push(lastChar);\\n    return ans.join('');\\n};\\nexport const solvers = {\\n    'Compression I: RLE Compression': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmxlLWNvbXByZXNzaW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29udHJhY3RzL3JsZS1jb21wcmVzc2lvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxNQUFNLEtBQUssR0FBVSxxQkFBcUIsQ0FBQTtBQUUxQyxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxLQUFZLEVBQUUsRUFBRTtJQUNwQyxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUE7SUFDakIsSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFBO0lBRWYsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFBO0lBRWQsS0FBSyxNQUFNLENBQUMsSUFBSSxLQUFLLEVBQUU7UUFDckIsSUFBSSxDQUFDLEtBQUssUUFBUSxJQUFJLE9BQU8sS0FBSyxDQUFDLEVBQUU7WUFDbkMsSUFBSSxPQUFPLEdBQUcsQ0FBQyxFQUFFO2dCQUNmLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7Z0JBQ2pCLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUE7YUFDbkI7WUFDRCxPQUFPLEdBQUcsQ0FBQyxDQUFBO1lBQ1gsUUFBUSxHQUFHLENBQUMsQ0FBQTtTQUNiO1FBQ0QsT0FBTyxFQUFFLENBQUE7S0FDVjtJQUVELEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDakIsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUNsQixPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7QUFDckIsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHO0lBQ3JCLGdDQUFnQyxFQUFFLEtBQUs7Q0FDeEMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUN6QixDQUFDIn0=\",\"filename\":\"scripts/contracts/rle-compression.js\",\"server\":\"home\"}}],[\"scripts/contracts/lz-compression.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = 'XbaaaaaaaatuiW1vLatu0kLatuLatuLatu3QErNGNGNMuzZ03G7Ko1gfs7fut0eLgfuitOY7mM';\\nconst decompress = (input) => {\\n    const ans = [];\\n    let cur = 0;\\n    for (let k = 0; cur < input.length; k ^= 1) {\\n        const n = parseInt(input[cur++]);\\n        if (n === 0) {\\n            continue;\\n        }\\n        if (k === 0) {\\n            for (let i = 0; i < n; i++) {\\n                ans.push(input[cur++]);\\n            }\\n        }\\n        else {\\n            const m = parseInt(input[cur++]);\\n            for (let i = 0; i < n; i++) {\\n                ans.push(ans[ans.length - m]);\\n            }\\n        }\\n    }\\n    return ans.join('');\\n};\\nconst compress = (input) => {\\n    const n = input.length;\\n    const dp = [...Array(2)].map(() => Array(n).fill(Infinity));\\n    const op = [...Array(2)].map(() => Array(n).fill(''));\\n    dp[0][n] = dp[1][n] = 0;\\n    for (let i = n - 1; i >= 0; i--) {\\n        // 0\\n        for (let j = 1; j <= 9 && i + j <= n; j++) {\\n            const val = 1 + j + dp[1][i + j];\\n            if (val < dp[0][i]) {\\n                dp[0][i] = val;\\n                op[0][i] = `${j}`;\\n            }\\n        }\\n        // 1\\n        for (let j = 1; j <= 9 && i - j >= 0; j++) {\\n            for (let k = 1; k <= 9 && i + k <= n; k++) {\\n                if (input[i + k - 1] === input[i - j + k - 1]) {\\n                    const val = 2 + dp[0][i + k];\\n                    if (val < dp[1][i]) {\\n                        dp[1][i] = val;\\n                        op[1][i] = `${k}${j}`;\\n                    }\\n                }\\n                else {\\n                    break;\\n                }\\n            }\\n        }\\n        // consider 0\\n        if (dp[0][i] < dp[1][i]) {\\n            dp[1][i] = 1 + dp[0][i];\\n            op[1][i] = '0';\\n        }\\n        else if (dp[1][i] < dp[0][i]) {\\n            dp[0][i] = 1 + dp[1][i];\\n            op[0][i] = '0';\\n        }\\n    }\\n    const ans = [];\\n    let curN = 0;\\n    let curT = 0;\\n    while (curN < n) {\\n        if (curT === 0) {\\n            ans.push(op[curT][curN]);\\n            const cnt = parseInt(op[curT][curN]);\\n            for (let i = 0; i < cnt; i++) {\\n                ans.push(input[curN + i]);\\n            }\\n            curN += cnt;\\n        }\\n        else {\\n            ans.push(op[curT][curN]);\\n            curN += parseInt(op[curT][curN][0]);\\n        }\\n        curT ^= 1;\\n    }\\n    return ans.join('');\\n};\\nexport const solvers = {\\n    'Compression II: LZ Decompression': decompress,\\n    'Compression III: LZ Compression': compress,\\n};\\nexport async function main(ns) {\\n    ns.tprint(input);\\n    ns.tprint(compress(input));\\n    ns.tprint(decompress(compress(input)));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHotY29tcHJlc3Npb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9jb250cmFjdHMvbHotY29tcHJlc3Npb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsTUFBTSxLQUFLLEdBQ1QsNEVBQTRFLENBQUE7QUFFOUUsTUFBTSxVQUFVLEdBQUcsQ0FBQyxLQUFZLEVBQUUsRUFBRTtJQUNsQyxNQUFNLEdBQUcsR0FBYSxFQUFFLENBQUE7SUFDeEIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFBO0lBRVgsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUMxQyxNQUFNLENBQUMsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUVoQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDWCxTQUFRO1NBQ1Q7UUFFRCxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDWCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUMxQixHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUE7YUFDdkI7U0FDRjthQUFNO1lBQ0wsTUFBTSxDQUFDLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUE7WUFFaEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDMUIsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO2FBQzlCO1NBQ0Y7S0FDRjtJQUVELE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtBQUNyQixDQUFDLENBQUE7QUFFRCxNQUFNLFFBQVEsR0FBRyxDQUFDLEtBQVksRUFBRSxFQUFFO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUE7SUFDdEIsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUE7SUFDM0QsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFFckQsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7SUFFdkIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDL0IsSUFBSTtRQUNKLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDekMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO1lBRWhDLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDbEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FB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\",\"filename\":\"scripts/contracts/lz-compression.js\",\"server\":\"home\"}}],[\"scripts/contracts/find-all-valid-math-expressions.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Make this more efficient\\nconst input = ['82157004711', 88];\\nconst solve = (input) => {\\n    const [s, target] = input;\\n    const exp = [];\\n    for (const c of s) {\\n        exp.push('');\\n        exp.push(c);\\n    }\\n    const ans = [];\\n    const doit = (i) => {\\n        if (i === s.length) {\\n            const res = exp.join('');\\n            if (!res.split(/[+\\\\-*]/).every((num) => num.length === 1 || num[0] !== '0')) {\\n                return;\\n            }\\n            if (eval(res) === target) {\\n                ans.push(res);\\n            }\\n            return;\\n        }\\n        let ops = ['', '+', '-', '*'];\\n        if (i === 0) {\\n            ops = [''];\\n        }\\n        ops.forEach((op) => {\\n            exp[2 * i] = op;\\n            doit(i + 1);\\n        });\\n    };\\n    doit(0);\\n    return ans;\\n};\\nexport const solvers = {\\n    'Find All Valid Math Expressions': solve,\\n};\\nexport async function main(ns) {\\n    const res = solve(input);\\n    ns.tprint(res.length);\\n    ns.tprint(new Set(res).size);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmluZC1hbGwtdmFsaWQtbWF0aC1leHByZXNzaW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvbnRyYWN0cy9maW5kLWFsbC12YWxpZC1tYXRoLWV4cHJlc3Npb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlDQUFpQztBQU1qQyxNQUFNLEtBQUssR0FBVSxDQUFDLGFBQWEsRUFBRSxFQUFFLENBQUMsQ0FBQTtBQUV4QyxNQUFNLEtBQUssR0FBRyxDQUFDLEtBQVksRUFBRSxFQUFFO0lBQzdCLE1BQU0sQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFBO0lBRXpCLE1BQU0sR0FBRyxHQUFhLEVBQUUsQ0FBQTtJQUN4QixLQUFLLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNqQixHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBQ1osR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUNaO0lBRUQsTUFBTSxHQUFHLEdBQWEsRUFBRSxDQUFBO0lBRXhCLE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBUyxFQUFFLEVBQUU7UUFDekIsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sRUFBRTtZQUNsQixNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1lBQ3hCLElBQ0UsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUN2RTtnQkFDQSxPQUFNO2FBQ1A7WUFDRCxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxNQUFNLEVBQUU7Z0JBQ3hCLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7YUFDZDtZQUVELE9BQU07U0FDUDtRQUVELElBQUksR0FBRyxHQUFHLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUE7UUFFN0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ1gsR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUE7U0FDWDtRQUVELEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRTtZQUNqQixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtZQUNmLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7UUFDYixDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQTtJQUVELElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUNQLE9BQU8sR0FBRyxDQUFBO0FBQ1osQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHO0lBQ3JCLGlDQUFpQyxFQUFFLEtBQUs7Q0FDekMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ3hCLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDOUIsQ0FBQyJ9\",\"filename\":\"scripts/contracts/find-all-valid-math-expressions.js\",\"server\":\"home\"}}],[\"scripts/contracts/total-ways-to-sum.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = [5, [1, 2]];\\nexport const solve = (input) => {\\n    const [n, arr] = input;\\n    const dp = Array(n + 1).fill(0);\\n    dp[0] = 1;\\n    for (const x of arr) {\\n        for (let i = x; i <= n; i++) {\\n            dp[i] += dp[i - x];\\n        }\\n    }\\n    return dp[n];\\n};\\nexport const solvers = {\\n    'Total Ways to Sum': (input) => solve([input, [...Array(input - 1)].map((_, idx) => idx + 1)]),\\n    'Total Ways to Sum II': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG90YWwtd2F5cy10by1zdW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9jb250cmFjdHMvdG90YWwtd2F5cy10by1zdW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxLQUFLLEdBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUVoQyxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxLQUFZLEVBQUUsRUFBRTtJQUNwQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQTtJQUV0QixNQUFNLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUMvQixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBRVQsS0FBSyxNQUFNLENBQUMsSUFBSSxHQUFHLEVBQUU7UUFDbkIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMzQixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtTQUNuQjtLQUNGO0lBRUQsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDZCxDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUc7SUFDckIsbUJBQW1CLEVBQUUsQ0FBQyxLQUFhLEVBQUUsRUFBRSxDQUNyQyxLQUFLLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRSxzQkFBc0IsRUFBRSxLQUFLO0NBQzlCLENBQUE7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7QUFDekIsQ0FBQyJ9\",\"filename\":\"scripts/contracts/total-ways-to-sum.js\",\"server\":\"home\"}}],[\"scripts/contracts/find-largest-prime-factor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = 13;\\nexport const solve = (input) => {\\n    let ans = 1;\\n    let cur = 2;\\n    while (cur <= input) {\\n        while (input % cur === 0) {\\n            ans = cur;\\n            input = Math.round(input / cur);\\n        }\\n        cur++;\\n    }\\n    return ans;\\n};\\nexport const solvers = {\\n    'Find Largest Prime Factor': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmluZC1sYXJnZXN0LXByaW1lLWZhY3Rvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvbnRyYWN0cy9maW5kLWxhcmdlc3QtcHJpbWUtZmFjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sS0FBSyxHQUFVLEVBQUUsQ0FBQTtBQUl2QixNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxLQUFZLEVBQUUsRUFBRTtJQUNwQyxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUE7SUFDWCxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUE7SUFFWCxPQUFPLEdBQUcsSUFBSSxLQUFLLEVBQUU7UUFDbkIsT0FBTyxLQUFLLEdBQUcsR0FBRyxLQUFLLENBQUMsRUFBRTtZQUN4QixHQUFHLEdBQUcsR0FBRyxDQUFBO1lBQ1QsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxDQUFBO1NBQ2hDO1FBQ0QsR0FBRyxFQUFFLENBQUE7S0FDTjtJQUVELE9BQU8sR0FBRyxDQUFBO0FBQ1osQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHO0lBQ3JCLDJCQUEyQixFQUFFLEtBQUs7Q0FDbkMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUN6QixDQUFDIn0=\",\"filename\":\"scripts/contracts/find-largest-prime-factor.js\",\"server\":\"home\"}}],[\"scripts/contracts/generate-ip-addresses.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = '595414201';\\nexport const solve = (input) => {\\n    const ip = [];\\n    const ans = [];\\n    for (const c of input) {\\n        ip.push(c);\\n        ip.push('');\\n    }\\n    ip.pop();\\n    const rec = (i, cnt) => {\\n        if (cnt > 4) {\\n            return;\\n        }\\n        if (i === input.length) {\\n            if (cnt === 4) {\\n                ans.push(ip.join(''));\\n            }\\n            return;\\n        }\\n        for (let take = 1; take <= 3 && i + take - 1 < input.length; take++) {\\n            if (parseInt(input.substring(i, i + take)) >= 256) {\\n                break;\\n            }\\n            if (i + take - 1 < input.length - 1) {\\n                ip[2 * (i + take - 1) + 1] = '.';\\n            }\\n            rec(i + take, cnt + 1);\\n            if (input[i] == '0') {\\n                break;\\n            }\\n            ip[2 * (i + take - 1) + 1] = '';\\n        }\\n    };\\n    rec(0, 0);\\n    return ans;\\n};\\nexport const solvers = {\\n    'Generate IP Addresses': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGUtaXAtYWRkcmVzc2VzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29udHJhY3RzL2dlbmVyYXRlLWlwLWFkZHJlc3Nlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLEtBQUssR0FBVSxXQUFXLENBQUE7QUFJaEMsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLENBQUMsS0FBWSxFQUFFLEVBQUU7SUFDcEMsTUFBTSxFQUFFLEdBQWEsRUFBRSxDQUFBO0lBQ3ZCLE1BQU0sR0FBRyxHQUFhLEVBQUUsQ0FBQTtJQUV4QixLQUFLLE1BQU0sQ0FBQyxJQUFJLEtBQUssRUFBRTtRQUNyQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ1YsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtLQUNaO0lBRUQsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFBO0lBRVIsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFTLEVBQUUsR0FBVyxFQUFFLEVBQUU7UUFDckMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUFFO1lBQ1gsT0FBTTtTQUNQO1FBRUQsSUFBSSxDQUFDLEtBQUssS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUN0QixJQUFJLEdBQUcsS0FBSyxDQUFDLEVBQUU7Z0JBQ2IsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7YUFDdEI7WUFFRCxPQUFNO1NBQ1A7UUFFRCxLQUFLLElBQUksSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEVBQUU7WUFDbkUsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLElBQUksR0FBRyxFQUFFO2dCQUNqRCxNQUFLO2FBQ047WUFFRCxJQUFJLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUNuQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUE7YUFDakM7WUFDRCxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUE7WUFFdEIsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxFQUFFO2dCQUNuQixNQUFLO2FBQ047WUFFRCxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUE7U0FDaEM7SUFDSCxDQUFDLENBQUE7SUFFRCxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBRVQsT0FBTyxHQUFHLENBQUE7QUFDWixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUc7SUFDckIsdUJBQXVCLEVBQUUsS0FBSztDQUMvQixDQUFBO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO0FBQ3pCLENBQUMifQ==\",\"filename\":\"scripts/contracts/generate-ip-addresses.js\",\"server\":\"home\"}}],[\"scripts/contracts/unique-paths-in-a-grid.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = [\\n    [0, 0, 0],\\n    [0, 1, 0],\\n    [0, 0, 0],\\n];\\nexport const solve = (input) => {\\n    const n = input.length;\\n    const m = input[0].length;\\n    const dp = [...new Array(n)].map(() => new Array(m).fill(0));\\n    dp[0][0] = 1;\\n    for (let r = 0; r < n; r++) {\\n        for (let c = r === 0 ? 1 : 0; c < m; c++) {\\n            if (input[r][c] === 1) {\\n                continue;\\n            }\\n            dp[r][c] = (r === 0 ? 0 : dp[r - 1][c]) + (c === 0 ? 0 : dp[r][c - 1]);\\n        }\\n    }\\n    return dp[n - 1][m - 1];\\n};\\nexport const solvers = {\\n    'Unique Paths in a Grid I': ([n, m]) => solve([...Array(n)].map(() => Array(m).fill(0))),\\n    'Unique Paths in a Grid II': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pcXVlLXBhdGhzLWluLWEtZ3JpZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvbnRyYWN0cy91bmlxdWUtcGF0aHMtaW4tYS1ncmlkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE1BQU0sS0FBSyxHQUFVO0lBQ25CLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDVCxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ1QsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUNWLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxLQUFZLEVBQUUsRUFBRTtJQUNwQyxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFBO0lBQ3RCLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUE7SUFFekIsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBRTVELEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDWixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzFCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN4QyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ3JCLFNBQVE7YUFDVDtZQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FDdkU7S0FDRjtJQUVELE9BQU8sRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7QUFDekIsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHO0lBQ3JCLDBCQUEwQixFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFXLEVBQUUsRUFBRSxDQUMvQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEQsMkJBQTJCLEVBQUUsS0FBSztDQUNuQyxDQUFBO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO0FBQ3pCLENBQUMifQ==\",\"filename\":\"scripts/contracts/unique-paths-in-a-grid.js\",\"server\":\"home\"}}],[\"scripts/contracts/subarray-with-maximum-sum.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = [\\n    -9, 8, -10, 9, 2, -9, -7, -5, 6, 9, 3, 2, 1, -1, 2, -9, 8, 5, -6, -6, 3, -3,\\n    6, 7, -1, 5, -7, -1,\\n];\\nconst solve = (input) => {\\n    let best = input[0];\\n    let sum = 0;\\n    for (const x of input) {\\n        sum += x;\\n        if (sum > best) {\\n            best = sum;\\n        }\\n        if (sum < 0) {\\n            sum = 0;\\n        }\\n    }\\n    return best;\\n};\\nexport const solvers = {\\n    'Subarray with Maximum Sum': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ViYXJyYXktd2l0aC1tYXhpbXVtLXN1bS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvbnRyYWN0cy9zdWJhcnJheS13aXRoLW1heGltdW0tc3VtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE1BQU0sS0FBSyxHQUFVO0lBQ25CLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMzRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7Q0FDcEIsQ0FBQTtBQUVELE1BQU0sS0FBSyxHQUFHLENBQUMsS0FBWSxFQUFFLEVBQUU7SUFDN0IsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ25CLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQTtJQUVYLEtBQUssTUFBTSxDQUFDLElBQUksS0FBSyxFQUFFO1FBQ3JCLEdBQUcsSUFBSSxDQUFDLENBQUE7UUFFUixJQUFJLEdBQUcsR0FBRyxJQUFJLEVBQUU7WUFDZCxJQUFJLEdBQUcsR0FBRyxDQUFBO1NBQ1g7UUFFRCxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUU7WUFDWCxHQUFHLEdBQUcsQ0FBQyxDQUFBO1NBQ1I7S0FDRjtJQUVELE9BQU8sSUFBSSxDQUFBO0FBQ2IsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHO0lBQ3JCLDJCQUEyQixFQUFFLEtBQUs7Q0FDbkMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUN6QixDQUFDIn0=\",\"filename\":\"scripts/contracts/subarray-with-maximum-sum.js\",\"server\":\"home\"}}],[\"scripts/contracts/vigenere-cipher.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = ['DASHBOAD', 'LINUX'];\\nconst solve = (input) => {\\n    const getLetter = (a, b) => {\\n        const base = 'A'.charCodeAt(0);\\n        const ba = a.charCodeAt(0) - base;\\n        const bb = b.charCodeAt(0) - base;\\n        return String.fromCharCode(((ba + bb) % 26) + base);\\n    };\\n    const [s, k] = input;\\n    const ans = [];\\n    for (let i = 0; i < s.length; i++) {\\n        ans.push(getLetter(s[i], k[i % k.length]));\\n    }\\n    return ans.join('');\\n};\\nexport const solvers = {\\n    'Encryption II: Vigenère Cipher': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlnZW5lcmUtY2lwaGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29udHJhY3RzL3ZpZ2VuZXJlLWNpcGhlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxNQUFNLEtBQUssR0FBVSxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQTtBQUUxQyxNQUFNLEtBQUssR0FBRyxDQUFDLEtBQVksRUFBRSxFQUFFO0lBQzdCLE1BQU0sU0FBUyxHQUFHLENBQUMsQ0FBUyxFQUFFLENBQVMsRUFBRSxFQUFFO1FBQ3pDLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDOUIsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUE7UUFDakMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUE7UUFDakMsT0FBTyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUE7SUFDckQsQ0FBQyxDQUFBO0lBRUQsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUE7SUFFcEIsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFBO0lBRWQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDakMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUMzQztJQUVELE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtBQUNyQixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUc7SUFDckIsZ0NBQWdDLEVBQUUsS0FBSztDQUN4QyxDQUFBO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO0FBQ3pCLENBQUMifQ==\",\"filename\":\"scripts/contracts/vigenere-cipher.js\",\"server\":\"home\"}}],[\"scripts/contracts/hamming-codes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const isPow2 = (n) => (n & -n) === n;\\nexport const encode = (input) => {\\n    const bin = input.toString(2);\\n    const ans = [];\\n    let cur = 0;\\n    let largestPow = -2;\\n    for (let i = 0; cur < bin.length; i++) {\\n        if (isPow2(i)) {\\n            ans.push(0);\\n            largestPow++;\\n        }\\n        else {\\n            ans.push(parseInt(bin.charAt(cur++)));\\n        }\\n    }\\n    for (let i = largestPow; i >= 0; i--) {\\n        for (let j = 0; j < ans.length; j++) {\\n            if (j & (1 << i)) {\\n                ans[1 << i] ^= ans[j];\\n            }\\n        }\\n    }\\n    for (let j = 0; j < ans.length; j++) {\\n        ans[0] ^= ans[j];\\n    }\\n    return ans.join('');\\n};\\nexport const decode = (input) => {\\n    const s = input.split('').map((x) => x.charCodeAt(0) - '0'.charCodeAt(0));\\n    let err = 0;\\n    for (let i = 0; i < input.length; i++) {\\n        if (s[i] === 1) {\\n            err ^= i;\\n        }\\n    }\\n    s[err] ^= 1;\\n    const ans = [];\\n    for (let i = 0; i < input.length; i++) {\\n        if (!isPow2(i)) {\\n            ans.push(s[i]);\\n        }\\n    }\\n    return parseInt(ans.join(''), 2);\\n};\\nexport const solvers = {\\n    'HammingCodes: Integer to Encoded Binary': encode,\\n    'HammingCodes: Encoded Binary to Integer': decode,\\n};\\nexport async function main(ns) {\\n    ns.tprint(decode('10110000'));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFtbWluZy1jb2Rlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvbnRyYWN0cy9oYW1taW5nLWNvZGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUU1QyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxLQUFhLEVBQUUsRUFBRTtJQUN0QyxNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQzdCLE1BQU0sR0FBRyxHQUFhLEVBQUUsQ0FBQTtJQUV4QixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUE7SUFFWCxJQUFJLFVBQVUsR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUVuQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNyQyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNiLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDWCxVQUFVLEVBQUUsQ0FBQTtTQUNiO2FBQU07WUFDTCxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO1NBQ3RDO0tBQ0Y7SUFFRCxLQUFLLElBQUksQ0FBQyxHQUFHLFVBQVUsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3BDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ25DLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFO2dCQUNoQixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTthQUN0QjtTQUNGO0tBQ0Y7SUFFRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNuQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQ2pCO0lBRUQsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0FBQ3JCLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxDQUFDLEtBQWEsRUFBRSxFQUFFO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUN6RSxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUE7SUFFWCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNyQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDZCxHQUFHLElBQUksQ0FBQyxDQUFBO1NBQ1Q7S0FDRjtJQUVELENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7SUFFWCxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUE7SUFDZCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNyQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ2QsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUNmO0tBQ0Y7SUFFRCxPQUFPLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQ2xDLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRztJQUNyQix5Q0FBeUMsRUFBRSxNQUFNO0lBQ2pELHlDQUF5QyxFQUFFLE1BQU07Q0FDbEQsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQTtBQUMvQixDQUFDIn0=\",\"filename\":\"scripts/contracts/hamming-codes.js\",\"server\":\"home\"}}],[\"scripts/contracts/array-jumping-game.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const solve = (input) => {\\n    const n = input.length;\\n    const dp = input.map(() => Infinity);\\n    dp[n - 1] = 0;\\n    for (let i = n - 2; i >= 0; i--) {\\n        for (let j = 1; j <= input[i] && i + j < n; j++) {\\n            dp[i] = Math.min(dp[i], 1 + dp[i + j]);\\n        }\\n    }\\n    return dp[0] === Infinity ? 0 : dp[0];\\n};\\nexport const solvers = {\\n    'Array Jumping Game': (input) => (solve(input) ? 1 : 0),\\n    'Array Jumping Game II': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve([1, 2, 0]));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJyYXktanVtcGluZy1nYW1lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29udHJhY3RzL2FycmF5LWp1bXBpbmctZ2FtZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxLQUFlLEVBQUUsRUFBRTtJQUN2QyxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFBO0lBQ3RCLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUE7SUFFcEMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7SUFFYixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUMvQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQy9DLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO1NBQ3ZDO0tBQ0Y7SUFFRCxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ3ZDLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRztJQUNyQixvQkFBb0IsRUFBRSxDQUFDLEtBQWUsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2pFLHVCQUF1QixFQUFFLEtBQUs7Q0FDL0IsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUM3QixDQUFDIn0=\",\"filename\":\"scripts/contracts/array-jumping-game.js\",\"server\":\"home\"}}],[\"scripts/contracts/caesar-cipher.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const solve = (input) => {\\n    const shift = input[1] % 26;\\n    const solveWord = (w) => w\\n        .split('')\\n        .map((c) => String.fromCharCode(((c.charCodeAt(0) - 'A'.charCodeAt(0) - shift + 2 * 26) % 26) +\\n        'A'.charCodeAt(0)))\\n        .join('');\\n    return input[0].split(' ').map(solveWord).join(' ');\\n};\\nexport const solvers = {\\n    'Encryption I: Caesar Cipher': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(['DE A', 3]));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Flc2FyLWNpcGhlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvbnRyYWN0cy9jYWVzYXItY2lwaGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLEtBQXVCLEVBQUUsRUFBRTtJQUMvQyxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFBO0lBRTNCLE1BQU0sU0FBUyxHQUFHLENBQUMsQ0FBUyxFQUFFLEVBQUUsQ0FDOUIsQ0FBQztTQUNFLEtBQUssQ0FBQyxFQUFFLENBQUM7U0FDVCxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUNULE1BQU0sQ0FBQyxZQUFZLENBQ2pCLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDM0QsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FDcEIsQ0FDRjtTQUNBLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUViLE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQ3JELENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRztJQUNyQiw2QkFBNkIsRUFBRSxLQUFLO0NBQ3JDLENBQUE7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUMvQixDQUFDIn0=\",\"filename\":\"scripts/contracts/caesar-cipher.js\",\"server\":\"home\"}}],[\"scripts/contracts/spiralize-matrix.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const solve = (input) => {\\n    const rotate = (mat) => {\\n        const n = mat.length;\\n        if (n === 0) {\\n            return [];\\n        }\\n        const m = mat[0].length;\\n        const res = [...Array(m)].map(() => []);\\n        for (let c = 0; c < m; c++) {\\n            for (let r = 0; r < n; r++) {\\n                res[c].push(mat[r].pop());\\n            }\\n        }\\n        return res;\\n    };\\n    let ans = [];\\n    while (input.length > 0) {\\n        ans = ans.concat(input[0]);\\n        input = rotate(input.slice(1));\\n    }\\n    return ans;\\n};\\nexport const solvers = {\\n    'Spiralize Matrix': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve([\\n        [1, 2, 3, 4],\\n        [5, 6, 7, 8],\\n        [9, 10, 11, 12],\\n    ]));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BpcmFsaXplLW1hdHJpeC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvbnRyYWN0cy9zcGlyYWxpemUtbWF0cml4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLEtBQWlCLEVBQUUsRUFBRTtJQUN6QyxNQUFNLE1BQU0sR0FBRyxDQUFDLEdBQWUsRUFBRSxFQUFFO1FBQ2pDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUE7UUFFcEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ1gsT0FBTyxFQUFFLENBQUE7U0FDVjtRQUVELE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUE7UUFFdkIsTUFBTSxHQUFHLEdBQWUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUVuRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzFCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQzFCLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRyxDQUFDLENBQUE7YUFDM0I7U0FDRjtRQUVELE9BQU8sR0FBRyxDQUFBO0lBQ1osQ0FBQyxDQUFBO0lBRUQsSUFBSSxHQUFHLEdBQWEsRUFBRSxDQUFBO0lBRXRCLE9BQU8sS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDdkIsR0FBRyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDMUIsS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDL0I7SUFFRCxPQUFPLEdBQUcsQ0FBQTtBQUNaLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRztJQUNyQixrQkFBa0IsRUFBRSxLQUFLO0NBQzFCLENBQUE7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxNQUFNLENBQ1AsS0FBSyxDQUFDO1FBQ0osQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDWixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNaLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDO0tBQ2hCLENBQUMsQ0FDSCxDQUFBO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/contracts/spiralize-matrix.js\",\"server\":\"home\"}}],[\"scripts/contracts/merge-overlapping-intervals.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const solve = (input) => {\\n    if (input.length === 0) {\\n        return [];\\n    }\\n    input.sort(([a], [b]) => a - b);\\n    const ans = [];\\n    let [curL, curR] = input[0];\\n    for (const [l, r] of input) {\\n        if (l > curR) {\\n            ans.push([curL, curR]);\\n            curL = l;\\n        }\\n        curR = Math.max(curR, r);\\n    }\\n    ans.push([curL, curR]);\\n    return ans;\\n};\\nexport const solvers = {\\n    'Merge Overlapping Intervals': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve([\\n        [4, 8],\\n        [9, 12],\\n        [15, 18],\\n        [7, 16],\\n        [4, 11],\\n        [23, 30],\\n        [13, 21],\\n        [25, 35],\\n        [10, 11],\\n        [23, 32],\\n        [5, 10],\\n        [16, 26],\\n        [13, 19],\\n        [10, 20],\\n        [7, 9],\\n        [21, 22],\\n        [25, 33],\\n        [25, 26],\\n    ]));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVyZ2Utb3ZlcmxhcHBpbmctaW50ZXJ2YWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29udHJhY3RzL21lcmdlLW92ZXJsYXBwaW5nLWludGVydmFscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxLQUFpQixFQUFFLEVBQUU7SUFDekMsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUN0QixPQUFPLEVBQUUsQ0FBQTtLQUNWO0lBRUQsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0lBRS9CLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQTtJQUVkLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBRTNCLEtBQUssTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxLQUFLLEVBQUU7UUFDMUIsSUFBSSxDQUFDLEdBQUcsSUFBSSxFQUFFO1lBQ1osR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFBO1lBQ3RCLElBQUksR0FBRyxDQUFDLENBQUE7U0FDVDtRQUVELElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQTtLQUN6QjtJQUVELEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQTtJQUN0QixPQUFPLEdBQUcsQ0FBQTtBQUNaLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRztJQUNyQiw2QkFBNkIsRUFBRSxLQUFLO0NBQ3JDLENBQUE7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxNQUFNLENBQ1AsS0FBSyxDQUFDO1FBQ0osQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ04sQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ1AsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ1AsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ1AsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ1AsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ04sQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO0tBQ1QsQ0FBQyxDQUNILENBQUE7QUFDSCxDQUFDIn0=\",\"filename\":\"scripts/contracts/merge-overlapping-intervals.js\",\"server\":\"home\"}}],[\"scripts/contracts/shortest-path-in-a-grid.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const solve = (input) => {\\n    const dirs = [\\n        [1, 0, 'U'],\\n        [-1, 0, 'D'],\\n        [0, 1, 'L'],\\n        [0, -1, 'R'],\\n    ];\\n    const n = input.length;\\n    const m = input[0].length;\\n    if (input[0][0] === 1 || input[n - 1][m - 1] === 1) {\\n        return '';\\n    }\\n    const d = input.map((a) => a.map(() => Infinity));\\n    const op = input.map((a) => a.map(() => ''));\\n    const prv = input.map((a) => a.map(() => []));\\n    d[n - 1][m - 1] = 0;\\n    let q = [[n - 1, m - 1]];\\n    while (q.length > 0) {\\n        const [r, c] = q[0];\\n        q = q.slice(1);\\n        for (const [dr, dc, dir] of dirs) {\\n            const nr = r + dr;\\n            const nc = c + dc;\\n            if (nr < 0 ||\\n                nc < 0 ||\\n                nr >= n ||\\n                nc >= m ||\\n                d[nr][nc] !== Infinity ||\\n                input[nr][nc] === 1) {\\n                continue;\\n            }\\n            d[nr][nc] = d[r][c] + 1;\\n            op[nr][nc] = dir;\\n            prv[nr][nc] = [r, c];\\n            q.push([nr, nc]);\\n        }\\n    }\\n    if (d[0][0] === Infinity) {\\n        return '';\\n    }\\n    const ans = [];\\n    let cr = 0;\\n    let cc = 0;\\n    while (cr !== n - 1 || cc !== m - 1) {\\n        ans.push(op[cr][cc]);\\n        const [nr, nc] = prv[cr][cc];\\n        cr = nr;\\n        cc = nc;\\n    }\\n    return ans.join('');\\n};\\nexport const solvers = {\\n    'Shortest Path in a Grid': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve([\\n        [0, 1, 0, 0, 0],\\n        [0, 0, 0, 1, 0],\\n    ]));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvcnRlc3QtcGF0aC1pbi1hLWdyaWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9jb250cmFjdHMvc2hvcnRlc3QtcGF0aC1pbi1hLWdyaWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLENBQUMsS0FBaUIsRUFBRSxFQUFFO0lBQ3pDLE1BQU0sSUFBSSxHQUFHO1FBQ1gsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQztRQUNYLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQztRQUNaLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUM7UUFDWCxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUM7S0FDSixDQUFBO0lBRVYsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQTtJQUN0QixNQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFBO0lBRXpCLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDbEQsT0FBTyxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQTtJQUNqRCxNQUFNLEVBQUUsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFD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\",\"filename\":\"scripts/contracts/shortest-path-in-a-grid.js\",\"server\":\"home\"}}],[\"scripts/contracts/sanitize-parenthesis-in-expression.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const solve = (input) => {\\n    const n = input.length;\\n    const expr = input.split('');\\n    const ans = new Set();\\n    let minCnt = 0;\\n    let s = 0;\\n    for (const c of input) {\\n        if (c === '(') {\\n            s++;\\n        }\\n        else if (c === ')') {\\n            if (s === 0) {\\n                minCnt++;\\n            }\\n            else {\\n                s--;\\n            }\\n        }\\n    }\\n    minCnt += s;\\n    const rec = (i, s, cnt) => {\\n        if (s < 0 || cnt > minCnt) {\\n            return;\\n        }\\n        if (i === n) {\\n            if (s === 0) {\\n                ans.add(expr.join(''));\\n            }\\n            return;\\n        }\\n        switch (input[i]) {\\n            case '(':\\n                expr[i] = input[i];\\n                rec(i + 1, s + 1, cnt);\\n                expr[i] = '';\\n                rec(i + 1, s, cnt + 1);\\n                break;\\n            case ')':\\n                expr[i] = input[i];\\n                rec(i + 1, s - 1, cnt);\\n                expr[i] = '';\\n                rec(i + 1, s, cnt + 1);\\n                break;\\n            default:\\n                expr[i] = input[i];\\n                rec(i + 1, s, cnt);\\n                break;\\n        }\\n    };\\n    rec(0, 0, 0);\\n    return [...ans];\\n};\\nexport const solvers = {\\n    'Sanitize Parentheses in Expression': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(')('));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuaXRpemUtcGFyZW50aGVzaXMtaW4tZXhwcmVzc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvbnRyYWN0cy9zYW5pdGl6ZS1wYXJlbnRoZXNpcy1pbi1leHByZXNzaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLEtBQWEsRUFBRSxFQUFFO0lBQ3JDLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUE7SUFDdEIsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUM1QixNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsRUFBVSxDQUFBO0lBRTdCLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQTtJQUNkLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUVULEtBQUssTUFBTSxDQUFDLElBQUksS0FBSyxFQUFFO1FBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRTtZQUNiLENBQUMsRUFBRSxDQUFBO1NBQ0o7YUFBTSxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUU7WUFDcEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUNYLE1BQU0sRUFBRSxDQUFBO2FBQ1Q7aUJBQU07Z0JBQ0wsQ0FBQyxFQUFFLENBQUE7YUFDSjtTQUNGO0tBQ0Y7SUFFRCxNQUFNLElBQUksQ0FBQyxDQUFBO0lBRVgsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFTLEVBQUUsQ0FBUyxFQUFFLEdBQVcsRUFBRSxFQUFFO1FBQ2hELElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLEdBQUcsTUFBTSxFQUFFO1lBQ3pCLE9BQU07U0FDUDtRQUVELElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNYLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDWCxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTthQUN2QjtZQUNELE9BQU07U0FDUDtRQUVELFFBQVEsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ2hCLEtBQUssR0FBRztnQkFDTixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO2dCQUNsQixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFBO2dCQUN0QixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFBO2dCQUNaLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUE7Z0JBQ3RCLE1BQUs7WUFFUCxLQUFLLEdBQUc7Z0JBQ04sSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtnQkFDbEIsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQTtnQkFDdEIsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtnQkFDWixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFBO2dCQUN0QixNQUFLO1lBRVA7Z0JBQ0UsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtnQkFDbEIsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFBO2dCQUNsQixNQUFLO1NBQ1I7SUFDSCxDQUFDLENBQUE7SUFFRCxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUVaLE9BQU8sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFBO0FBQ2pCLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRztJQUNyQixvQ0FBb0MsRUFBRSxLQUFLO0NBQzVDLENBQUE7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7QUFDeEIsQ0FBQyJ9\",\"filename\":\"scripts/contracts/sanitize-parenthesis-in-expression.js\",\"server\":\"home\"}}],[\"scripts/weaken-all.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { FILES, HOSTS, SCRIPTS } from 'scripts/utils/constants';\\nimport { getPurchasedServerName } from 'scripts/buy-servers';\\nimport { getServersByPort } from 'scripts/utils/servers';\\nimport { LOOP_FLAG } from 'scripts/simple-weaken';\\nimport { nuke } from 'scripts/nuke';\\nconst PROGRAMS_LIST = Object.values(FILES);\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const FILES_TO_COPY = [SCRIPTS.SIMPLE_WEAKEN];\\n    const getAvailableRam = (host) => ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\n    const weakRam = ns.getScriptRam(SCRIPTS.SIMPLE_WEAKEN);\\n    const runScript = (host) => {\\n        ns.scp(FILES_TO_COPY, host, HOSTS.HOME);\\n        const threads = Math.floor(getAvailableRam(host) / weakRam);\\n        if (threads > 0) {\\n            ns.exec(SCRIPTS.SIMPLE_WEAKEN, host, threads, target, LOOP_FLAG);\\n        }\\n    };\\n    for (let i = 0; i < ns.getPurchasedServerLimit(); i++) {\\n        const host = getPurchasedServerName(i);\\n        if (ns.serverExists(host)) {\\n            runScript(host);\\n        }\\n    }\\n    const servers = getServersByPort(ns);\\n    const getRemServersCount = (lists) => lists.reduce((sum, list) => sum + list.length, 0);\\n    while (getRemServersCount(servers) > 0) {\\n        const programCount = PROGRAMS_LIST.reduce((cnt, file) => cnt + (ns.fileExists(file, HOSTS.HOME) ? 1 : 0), 0);\\n        for (let i = 0; i <= programCount; i++) {\\n            if (servers[i].length > 0 &&\\n                ns.getHackingLevel() >= servers[i][0].reqHack) {\\n                nuke(ns, servers[i][0].host);\\n                runScript(servers[i][0].host);\\n                servers[i] = servers[i].slice(1);\\n            }\\n        }\\n        await ns.sleep(1000);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLWFsbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3dlYWtlbi1hbGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLE1BQU0seUJBQXlCLENBQUE7QUFDL0QsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0scUJBQXFCLENBQUE7QUFDNUQsT0FBTyxFQUFFLGdCQUFnQixFQUFlLE1BQU0sdUJBQXVCLENBQUE7QUFDckUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHVCQUF1QixDQUFBO0FBQ2pELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUE7QUFFbkMsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUUxQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFbkMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUE7SUFFN0MsTUFBTSxlQUFlLEdBQUcsQ0FBQyxJQUFZLEVBQUUsRUFBRSxDQUN2QyxFQUFFLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUV0RCxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQTtJQUV0RCxNQUFNLFNBQVMsR0FBRyxDQUFDLElBQVksRUFBRSxFQUFFO1FBQ2pDLEVBQUUsQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDdkMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUE7UUFDM0QsSUFBSSxPQUFPLEdBQUcsQ0FBQyxFQUFFO1lBQ2YsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFBO1NBQ2pFO0lBQ0gsQ0FBQyxDQUFBO0lBRUQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3JELE1BQU0sSUFBSSxHQUFHLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3RDLElBQUksRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN6QixTQUFTLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDaEI7S0FDRjtJQUVELE1BQU0sT0FBTyxHQUFHLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBRXBDLE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxLQUFpQixFQUFFLEVBQUUsQ0FDL0MsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBRW5ELE9BQU8sa0JBQWtCLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ3RDLE1BQU0sWUFBWSxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQ3ZDLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUM5RCxDQUFDLENBQ0YsQ0FBQTtRQUVELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxZQUFZLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDdEMsSUFDRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUM7Z0JBQ3JCLEVBQUUsQ0FBQyxlQUFlLEVBQUUsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUM3QztnQkFDQSxJQUFJLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtnQkFDNUIsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtnQkFDN0IsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7YUFDakM7U0FDRjtRQUVELE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtLQUNyQjtBQUNILENBQUMifQ==\",\"filename\":\"scripts/weaken-all.js\",\"server\":\"home\"}}],[\"scripts/loop-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    while (true) {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9vcC13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9sb29wLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/loop-weaken.js\",\"server\":\"home\"}}],[\"scripts/contracts/minimum-path-sum-in-a-triangle.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const solve = (input) => {\\n    const n = input.length;\\n    const dp = input.map((row) => row.map(() => Infinity));\\n    dp[n - 1] = input[n - 1];\\n    for (let row = n - 2; row >= 0; row--) {\\n        for (let col = 0; col <= row; col++) {\\n            [col, col + 1]\\n                .filter((x) => x <= row + 1)\\n                .forEach((c) => (dp[row][col] = Math.min(dp[row][col], dp[row + 1][c] + input[row][col])));\\n        }\\n    }\\n    return dp[0][0];\\n};\\nexport const solvers = {\\n    'Minimum Path Sum in a Triangle': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve([[2], [3, 4], [6, 5, 7], [4, 1, 8, 3]]));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWluaW11bS1wYXRoLXN1bS1pbi1hLXRyaWFuZ2xlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29udHJhY3RzL21pbmltdW0tcGF0aC1zdW0taW4tYS10cmlhbmdsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLEtBQUssR0FBRyxDQUFDLEtBQWlCLEVBQUUsRUFBRTtJQUNsQyxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFBO0lBRXRCLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQTtJQUN0RCxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7SUFFeEIsS0FBSyxJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUU7UUFDckMsS0FBSyxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUNuQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDO2lCQUNYLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUM7aUJBQzNCLE9BQU8sQ0FDTixDQUFDLENBQUMsRUFBRSxFQUFFLENBQ0osQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FDdEIsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUNaLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUNqQyxDQUFDLENBQ0wsQ0FBQTtTQUNKO0tBQ0Y7SUFFRCxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUNqQixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUc7SUFDckIsZ0NBQWdDLEVBQUUsS0FBSztDQUN4QyxDQUFBO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDMUQsQ0FBQyJ9\",\"filename\":\"scripts/contracts/minimum-path-sum-in-a-triangle.js\",\"server\":\"home\"}}],[\"scripts/hack-all.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\n * v5 of the hacking script\\n * This version implements a single main script that manages the execution of\\n * hack/grow/weaken scripts in every server and also tries to optimize the\\n * ratio of hack/grow/weaken threads.\\n */\\nimport { UI } from 'scripts/hack-ui';\\nimport { getAllServers } from 'scripts/utils/servers';\\nimport { FILES, HOSTS, SCRIPTS } from 'scripts/utils/constants';\\nconst OFFSET_MS = 500;\\nconst SCRIPT_FINISH_WAIT_TIME_MS = 100;\\nconst HOME_RESERVED_RAM_GB = 6;\\nconst nukeServers = (ns, activeServers) => {\\n    const PORT_PROGRAMS = [\\n        {\\n            filename: FILES.BRUTE_SSH,\\n            cmd: ns.brutessh,\\n        },\\n        {\\n            filename: FILES.FTP_CRACK,\\n            cmd: ns.ftpcrack,\\n        },\\n        {\\n            filename: FILES.RELAY_SMTP,\\n            cmd: ns.relaysmtp,\\n        },\\n        {\\n            filename: FILES.HTTP_WORM,\\n            cmd: ns.httpworm,\\n        },\\n        {\\n            filename: FILES.SQL_INJECT,\\n            cmd: ns.sqlinject,\\n        },\\n    ];\\n    const FILES_TO_COPY = [\\n        SCRIPTS.SIMPLE_GROW,\\n        SCRIPTS.SIMPLE_HACK,\\n        SCRIPTS.SIMPLE_WEAKEN,\\n    ];\\n    const curPrograms = PORT_PROGRAMS.filter(({ filename }) => ns.fileExists(filename, HOSTS.HOME));\\n    const remainingServers = getAllServers(ns).filter((server) => !activeServers.some((s) => s.host === server.host));\\n    const newServers = [];\\n    for (const server of remainingServers) {\\n        if (!ns.hasRootAccess(server.host)) {\\n            if (ns.getServerRequiredHackingLevel(server.host) < ns.getHackingLevel() &&\\n                ns.getServerNumPortsRequired(server.host) <= curPrograms.length) {\\n                curPrograms.forEach((prog) => prog.cmd(server.host));\\n                ns.nuke(server.host);\\n            }\\n        }\\n        if (ns.hasRootAccess(server.host)) {\\n            newServers.push(server);\\n            ns.scp(FILES_TO_COPY, server.host, HOSTS.HOME);\\n        }\\n    }\\n    if (newServers.length > 0) {\\n        ns.toast(`New servers available for hacking: ${newServers\\n            .map((s) => s.host)\\n            .join(', ')}`);\\n    }\\n    return newServers;\\n};\\nconst countServerThreads = (ns, server) => {\\n    const scriptRam = Math.max(ns.getScriptRam(SCRIPTS.SIMPLE_GROW, server), ns.getScriptRam(SCRIPTS.SIMPLE_HACK, server), ns.getScriptRam(SCRIPTS.SIMPLE_WEAKEN, server));\\n    let availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n    if (server === HOSTS.HOME) {\\n        availableRam = Math.max(0, availableRam - HOME_RESERVED_RAM_GB);\\n    }\\n    return Math.floor(availableRam / scriptRam);\\n};\\nconst countThreads = (ns, servers) => servers.reduce((acc, server) => acc + countServerThreads(ns, server.host), 0);\\nconst getThreadsForGrow = (totalThreads) => {\\n    // TODO: Implement logic when Formulas API is available\\n    const growThreads = Math.floor((11 * totalThreads) / 12);\\n    const weakenThreads = totalThreads - growThreads;\\n    return { growThreads, weakenThreads };\\n};\\nconst getThreadsForHack = (totalThreads) => {\\n    // TODO: Implement logic when Formulas API is available\\n    const hackThreads = Math.floor((1 * totalThreads) / 36);\\n    const growThreads = Math.floor((32 * totalThreads) / 36);\\n    const weakenThreads = totalThreads - hackThreads - growThreads;\\n    return {\\n        hackThreads,\\n        growThreads,\\n        weakenThreads,\\n    };\\n};\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    const target = ns.args[0];\\n    if (!target) {\\n        ns.tprint('Missing target argument');\\n        ns.exit();\\n    }\\n    const activeServers = [];\\n    const minSecurity = ns.getServerMinSecurityLevel(target);\\n    const maxMoney = ns.getServerMaxMoney(target);\\n    const ui = new UI(ns, target, { minSecurity, maxMoney }, 'Hack v5');\\n    ns.atExit(() => {\\n        ui.destroy();\\n    });\\n    while (true) {\\n        ns.print('Looking for new servers...');\\n        const newServers = nukeServers(ns, activeServers);\\n        activeServers.push(...newServers);\\n        if (newServers.length > 0) {\\n            ns.print(`Found ${newServers.length} new servers: ${newServers\\n                .map((s) => s.host)\\n                .join(', ')}`);\\n        }\\n        else {\\n            ns.print('No new servers found');\\n        }\\n        const totalThreads = countThreads(ns, activeServers);\\n        const curSecurity = ns.getServerSecurityLevel(target);\\n        const curMoney = ns.getServerMoneyAvailable(target);\\n        ui.setSecurity(curSecurity);\\n        ui.setMoney(curMoney);\\n        if (totalThreads === 0) {\\n            // Happens when hack-all.js is killed while hacking scripts are running\\n            ns.print('No threads available. Waiting...');\\n            await ns.sleep(1000);\\n            continue;\\n        }\\n        const events = [];\\n        const pushEvent = (script, threads, startT, endT) => {\\n            events.push({\\n                type: 'script-start',\\n                script,\\n                threads,\\n                t: startT,\\n            });\\n            events.push({\\n                type: 'script-end',\\n                script,\\n                t: endT,\\n            });\\n        };\\n        if (curSecurity > minSecurity) {\\n            const weakenTime = ns.getWeakenTime(target);\\n            ui.addTimer(`Weaken (${totalThreads})`, weakenTime);\\n            pushEvent('weaken', totalThreads, 0, weakenTime);\\n        }\\n        else if (curMoney < maxMoney) {\\n            const { growThreads, weakenThreads } = getThreadsForGrow(totalThreads);\\n            const growTime = ns.getGrowTime(target);\\n            const weakenTime = ns.getWeakenTime(target);\\n            const weakenDelay = Math.max(0, growTime - weakenTime + OFFSET_MS);\\n            ui.addTimer(`Grow (${growThreads})`, growTime);\\n            ui.addTimer(`Weaken (${weakenThreads})`, weakenDelay + weakenTime);\\n            pushEvent('grow', growThreads, 0, growTime);\\n            pushEvent('weaken', weakenThreads, weakenDelay, weakenDelay + weakenTime);\\n        }\\n        else {\\n            const { hackThreads, growThreads, weakenThreads } = getThreadsForHack(totalThreads);\\n            const hackTime = ns.getHackTime(target);\\n            const growTime = ns.getGrowTime(target);\\n            const weakenTime = ns.getWeakenTime(target);\\n            const growDelay = Math.max(0, hackTime - growTime + OFFSET_MS);\\n            const weakenDelay = Math.max(0, growDelay + growTime - weakenTime + OFFSET_MS);\\n            ui.addTimer(`Hack (${hackThreads})`, hackTime);\\n            ui.addTimer(`Grow (${growThreads})`, growDelay + growTime);\\n            ui.addTimer(`Weaken (${weakenThreads})`, weakenDelay + weakenTime);\\n            pushEvent('hack', hackThreads, 0, hackTime);\\n            pushEvent('grow', growThreads, growDelay, growDelay + growTime);\\n            pushEvent('weaken', weakenThreads, weakenDelay, weakenDelay + weakenTime);\\n        }\\n        events.sort((a, b) => a.t - b.t);\\n        let elapsedTime = 0;\\n        for (const event of events) {\\n            await ns.sleep(event.t - elapsedTime);\\n            elapsedTime = event.t;\\n            const script = event.script === 'grow'\\n                ? SCRIPTS.SIMPLE_GROW\\n                : event.script === 'hack'\\n                    ? SCRIPTS.SIMPLE_HACK\\n                    : SCRIPTS.SIMPLE_WEAKEN;\\n            if (event.type === 'script-start') {\\n                let threadCnt = 0;\\n                for (const server of activeServers) {\\n                    const availableThreads = countServerThreads(ns, server.host);\\n                    const nThreads = Math.min(availableThreads, event.threads - threadCnt);\\n                    nThreads > 0 && ns.exec(script, server.host, nThreads, target);\\n                    threadCnt += nThreads;\\n                }\\n                ns.print(`Started ${script} with ${threadCnt} threads (expected: ${event.threads})`);\\n            }\\n            else {\\n                // Wait for all scripts to finish\\n                for (const server of activeServers) {\\n                    if (ns.isRunning(script, server.host, target)) {\\n                        await ns.sleep(SCRIPT_FINISH_WAIT_TIME_MS);\\n                        elapsedTime += SCRIPT_FINISH_WAIT_TIME_MS;\\n                    }\\n                }\\n                if (event.script === 'grow' || event.script === 'hack') {\\n                    ui.setMoney(ns.getServerMoneyAvailable(target));\\n                }\\n                ui.setSecurity(ns.getServerSecurityLevel(target));\\n                ns.print(`Finished running ${script}`);\\n            }\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay1hbGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9oYWNrLWFsbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7R0FLRztBQUlILE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQTtBQUNwQyxPQUFPLEVBQUUsYUFBYSxFQUFVLE1BQU0sdUJBQXVCLENBQUE7QUFDN0QsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLE1BQU0seUJBQXlCLENBQUE7QUFpQi9ELE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQTtBQUNyQixNQUFNLDBCQUEwQixHQUFHLEdBQUcsQ0FBQTtBQUN0QyxNQUFNLG9CQUFvQixHQUFHLENBQUMsQ0FBQTtBQUU5QixNQUFNLFdBQVcsR0FBRyxDQUFDLEVBQU0sRUFBRSxhQUF1QixFQUFFLEVBQUU7SUFDdEQsTUFBTSxhQUFhLEdBQUc7UUFDcEI7WUFDRSxRQUFRLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDekIsR0FBRyxFQUFFLEVBQUUsQ0FBQyxRQUFRO1NBQ2pCO1FBQ0Q7WUFDRSxRQUFRLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDekIsR0FBRyxFQUFFLEVBQUUsQ0FBQyxRQUFRO1NBQ2pCO1FBQ0Q7WUFDRSxRQUFRLEVBQUUsS0FBSyxDQUFDLFVBQVU7WUFDMUIsR0FBRyxFQUFFLEVBQUUsQ0FBQyxTQUFTO1NBQ2xCO1FBQ0Q7WUFDRSxRQUFRLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDekIsR0FBRyxFQUFFLEVBQUUsQ0FBQyxRQUFRO1NBQ2pCO1FBQ0Q7WUFDRSxRQUFRLEVBQUUsS0FBSyxDQUFDLFVBQVU7WUFDMUIsR0FBRyxFQUFFLEVBQUUsQ0FBQyxTQUFTO1NBQ2xCO0tBQ0YsQ0FBQTtJQUVELE1BQU0sYUFBYSxHQUFHO1FBQ3BCLE9BQU8sQ0FBQyxXQUFXO1FBQ25CLE9BQU8sQ0FBQyxXQUFXO1FBQ25CLE9BQU8sQ0FBQyxh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\",\"filename\":\"scripts/hack-all.js\",\"server\":\"home\"}}],[\"scripts/hack-ui.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatTime } from 'scripts/utils/time';\\nexport class UI {\\n    id;\\n    containerId;\\n    securityId;\\n    moneyId;\\n    timersId;\\n    minSecurity;\\n    maxMoney;\\n    ns;\\n    title;\\n    constructor(ns, id, stats, title) {\\n        this.ns = ns;\\n        this.id = id;\\n        this.containerId = `hack-status-${id}`;\\n        this.securityId = this.containerId + '--security';\\n        this.moneyId = this.containerId + '--money';\\n        this.timersId = this.containerId + '--timers';\\n        this.minSecurity = stats.minSecurity;\\n        this.maxMoney = stats.maxMoney;\\n        this.title = title;\\n        this.init();\\n    }\\n    destroy() {\\n        const doc = eval('document');\\n        const container = doc.getElementById(this.containerId);\\n        if (container) {\\n            doc.body.removeChild(container);\\n        }\\n    }\\n    init() {\\n        const doc = eval('document');\\n        if (doc.getElementById(this.containerId)) {\\n            return;\\n        }\\n        // TODO: Make this draggable\\n        const container = doc.createElement('div');\\n        container.id = this.containerId;\\n        container.style.position = 'fixed';\\n        container.style.bottom = '2rem';\\n        container.style.right = '0';\\n        container.style.display = 'flex';\\n        container.style.flexDirection = 'column';\\n        container.style.fontFamily =\\n            '\\\"Lucida Console\\\", \\\"Lucida Sans Unicode\\\", \\\"Fira Mono\\\", Consolas, \\\"Courier New\\\", Courier, monospace, \\\"Times New Roman\\\"';\\n        container.style.zIndex = '100';\\n        container.style.color = '#0c0';\\n        container.style.borderStyle = 'solid';\\n        container.style.borderColor = 'rgb(128, 128, 128)';\\n        container.style.borderWidth = '1px';\\n        container.style.padding = '0.5rem';\\n        const title = doc.createElement('div');\\n        title.style.padding = '0.5rem';\\n        title.style.alignSelf = 'center';\\n        title.innerText = this.title;\\n        title.style.fontWeight = 'bold';\\n        container.append(title);\\n        const target = doc.createElement('div');\\n        target.innerText = `Target: ${this.id}`;\\n        container.append(target);\\n        const security = doc.createElement('div');\\n        security.id = this.securityId;\\n        security.innerText = `Security: 0 (min: ${this.minSecurity})`;\\n        container.append(security);\\n        const money = doc.createElement('div');\\n        money.id = this.moneyId;\\n        money.innerText = `Money: 0 (max: ${this.maxMoney})`;\\n        container.append(money);\\n        const timers = doc.createElement('div');\\n        timers.id = this.timersId;\\n        timers.style.marginTop = '1rem';\\n        container.append(timers);\\n        doc.body.append(container);\\n    }\\n    setSecurity(security) {\\n        const doc = eval('document');\\n        const el = doc.getElementById(this.securityId);\\n        if (el) {\\n            el.innerText = `Security: ${security.toFixed(3)} (min: ${this.minSecurity})`;\\n        }\\n    }\\n    setMoney(money) {\\n        const doc = eval('document');\\n        const el = doc.getElementById(this.moneyId);\\n        if (el) {\\n            el.innerText = `Money: ${this.ns.formatNumber(money)} (max: ${this.ns.formatNumber(this.maxMoney)})`;\\n        }\\n    }\\n    addTimer(label, time) {\\n        const doc = eval('document');\\n        const now = performance.now();\\n        const target = now + time;\\n        const el = doc.createElement('div');\\n        const container = doc.getElementById(this.timersId);\\n        const refresh = () => {\\n            const remTime = target - performance.now();\\n            if (remTime < 0) {\\n                container?.removeChild(el);\\n                return;\\n            }\\n            el.innerText = `${label}: ${formatTime(remTime)}`;\\n            setTimeout(refresh, 200);\\n        };\\n        refresh();\\n        container?.append(el);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay11aS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL2hhY2stdWkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG9CQUFvQixDQUFBO0FBRS9DLE1BQU0sT0FBTyxFQUFFO0lBQ2IsRUFBRSxDQUFRO0lBQ1YsV0FBVyxDQUFRO0lBQ25CLFVBQVUsQ0FBUTtJQUNsQixPQUFPLENBQVE7SUFDZixRQUFRLENBQVE7SUFDaEIsV0FBVyxDQUFRO0lBQ25CLFFBQVEsQ0FBUTtJQUNoQixFQUFFLENBQUk7SUFDTixLQUFLLENBQVE7SUFFYixZQUNFLEVBQU0sRUFDTixFQUFVLEVBQ1YsS0FBZ0QsRUFDaEQsS0FBYTtRQUViLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFBO1FBQ1osSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUE7UUFDWixJQUFJLENBQUMsV0FBVyxHQUFHLGVBQWUsRUFBRSxFQUFFLENBQUE7UUFDdEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsV0FBVyxHQUFHLFlBQVksQ0FBQTtRQUNqRCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLEdBQUcsU0FBUyxDQUFBO1FBQzNDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUE7UUFDN0MsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFBO1FBQ3BDLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQTtRQUM5QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQTtRQUVsQixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUE7SUFDYixDQUFDO0lBRUQsT0FBTztRQUNMLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQWEsQ0FBQTtRQUN4QyxNQUFNLFNBQVMsR0FBRyxHQUFHLENB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\",\"filename\":\"scripts/hack-ui.js\",\"server\":\"home\"}}],[\"scripts/hack-tracker.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay10cmFja2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NjcmlwdHMvaGFjay10cmFja2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIifQ==\",\"filename\":\"scripts/hack-tracker.js\",\"server\":\"home\"}}],[\"scripts/corporations/tea.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { maximizeMoraleAndEnergy, waitForCycle, } from 'scripts/corporations/utils';\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    while (true) {\\n        const industries = ns.args.length > 0\\n            ? ns.args\\n            : [\\n                ...new Set(ns.corporation\\n                    .getCorporation()\\n                    .divisions.map((divName) => ns.corporation.getDivision(divName).type)),\\n            ];\\n        await maximizeMoraleAndEnergy(ns, industries);\\n        await waitForCycle(ns);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29ycG9yYXRpb25zL3RlYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLFlBQVksR0FDYixNQUFNLDRCQUE0QixDQUFBO0FBRW5DLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUVwQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sVUFBVSxHQUNkLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUM7WUFDaEIsQ0FBQyxDQUFFLEVBQUUsQ0FBQyxJQUEyQjtZQUNqQyxDQUFDLENBQUM7Z0JBQ0UsR0FBRyxJQUFJLEdBQUcsQ0FDUixFQUFFLENBQUMsV0FBVztxQkFDWCxjQUFjLEVBQUU7cUJBQ2hCLFNBQVMsQ0FBQyxHQUFHLENBQ1osQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDdEQsQ0FDSjthQUNGLENBQUE7UUFFUCxNQUFNLHVCQUF1QixDQUFDLEVBQUUsRUFBRSxVQUFVLENBQUMsQ0FBQTtRQUM3QyxNQUFNLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQTtLQUN2QjtBQUNILENBQUMifQ==\",\"filename\":\"scripts/corporations/tea.js\",\"server\":\"home\"}}],[\"scripts/corporations/constants.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CITIES = {\\n    SECTOR_12: 'Sector-12',\\n    AEVUM: 'Aevum',\\n    CHONGQING: 'Chongqing',\\n    NEW_TOKYO: 'New Tokyo',\\n    ISHIMA: 'Ishima',\\n    VOLHAVEN: 'Volhaven',\\n};\\nexport const CITY_NAMES = Object.values(CITIES);\\nexport const MATERIALS = {\\n    MINERALS: 'Minerals',\\n    ORE: 'Ore',\\n    WATER: 'Water',\\n    FOOD: 'Food',\\n    PLANTS: 'Plants',\\n    METAL: 'Metal',\\n    HARDWARE: 'Hardware',\\n    CHEMICALS: 'Chemicals',\\n    DRUGS: 'Drugs',\\n    ROBOTS: 'Robots',\\n    AI_CORES: 'AI Cores',\\n    REAL_ESTATE: 'Real Estate',\\n};\\nexport const EMPLOYEE_POSITIONS = {\\n    UNASSIGNED: 'Unassigned',\\n    OPERATIONS: 'Operations',\\n    ENGINEER: 'Engineer',\\n    BUSINESS: 'Business',\\n    MANAGEMENT: 'Management',\\n    R_AND_D: 'Research & Development',\\n    INTERN: 'Intern',\\n};\\nexport const UNLOCKABLES = {\\n    EXPORT: 'Export',\\n};\\nexport const UPGRADES = {\\n    WILSON_ANALYTICS: 'Wilson Analytics',\\n    ABC_SALESBOTS: 'ABC SalesBots',\\n    SMART_STORAGE: 'Smart Storage',\\n    FOCUS_WIRES: 'FocusWires',\\n    NEURAL_ACCELERATORS: 'Neural Accelerators',\\n    PROJECT_INSIGHT: 'Project Insight',\\n    NNII: 'Nuoptimal Nootropic Injector Implants',\\n    SMART_FACTORIES: 'Smart Factories',\\n};\\nexport const INDUSTRIES = {\\n    RESTAURANT: 'Restaurant',\\n    TOBACCO: 'Tobacco',\\n    AGRICULTURE: 'Agriculture',\\n    CHEMICAL: 'Chemical',\\n};\\nexport const RESEARCHES = {\\n    HI_TECH: 'Hi-Tech R&D Laboratory',\\n    MARKET_TA_I: 'Market-TA.I',\\n    MARKET_TA_II: 'Market-TA.II',\\n};\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29ycG9yYXRpb25zL2NvbnN0YW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFPQSxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUc7SUFDcEIsU0FBUyxFQUFFLFdBQVc7SUFDdEIsS0FBSyxFQUFFLE9BQU87SUFDZCxTQUFTLEVBQUUsV0FBVztJQUN0QixTQUFTLEVBQUUsV0FBVztJQUN0QixNQUFNLEVBQUUsUUFBUTtJQUNoQixRQUFRLEVBQUUsVUFBVTtDQUM0QixDQUFBO0FBRWxELE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBRS9DLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRztJQUN2QixRQUFRLEVBQUUsVUFBVTtJQUNwQixHQUFHLEVBQUUsS0FBSztJQUNWLEtBQUssRUFBRSxPQUFPO0lBQ2QsSUFBSSxFQUFFLE1BQU07SUFDWixNQUFNLEVBQUUsUUFBUTtJQUNoQixLQUFLLEVBQUUsT0FBTztJQUNkLFFBQVEsRUFBRSxVQUFVO0lBQ3BCLFNBQVMsRUFBRSxXQUFXO0lBQ3RCLEtBQUssRUFBRSxPQUFPO0lBQ2QsTUFBTSxFQUFFLFFBQVE7SUFDaEIsUUFBUSxFQUFFLFVBQVU7SUFDcEIsV0FBVyxFQUFFLGFBQWE7Q0FDeUIsQ0FBQTtBQUVyRCxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRztJQUNoQyxVQUFVLEVBQUUsWUFBWTtJQUN4QixVQUFVLEVBQUUsWUFBWTtJQUN4QixRQUFRLEVBQUUsVUFBVTtJQUNwQixRQUFRLEVBQUUsVUFBVTtJQUNwQixVQUFVLEVBQUUsWUFBWTtJQUN4QixPQUFPLEVBQUUsd0JBQXdCO0lBQ2pDLE1BQU0sRUFBRSxRQUFRO0NBQ3VDLENBQUE7QUFFekQsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHO0lBQ3pCLE1BQU0sRUFBRSxRQUFRO0NBQ1IsQ0FBQTtBQUVWLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRztJQUN0QixnQkFBZ0IsRUFBRSxrQkFBa0I7SUFDcEMsYUFBYSxFQUFFLGVBQWU7SUFDOUIsYUFBYSxFQUFFLGVBQWU7SUFDOUIsV0FBVyxFQUFFLFlBQVk7SUFDekIsbUJBQW1CLEVBQUUscUJBQXFCO0lBQzFDLGVBQWUsRUFBRSxpQkFBaUI7SUFDbEMsSUFBSSxFQUFFLHVDQUF1QztJQUM3QyxlQUFlLEVBQUUsaUJBQWlCO0NBQzFCLENBQUE7QUFFVixNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUc7SUFDeEIsVUFBVSxFQUFFLFlBQVk7SUFDeEIsT0FBTyxFQUFFLFNBQVM7SUFDbEIsV0FBVyxFQUFFLGFBQWE7SUFDMUIsUUFBUSxFQUFFLFVBQVU7Q0FDK0IsQ0FBQTtBQUVyRCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUc7SUFDeEIsT0FBTyxFQUFFLHdCQUF3QjtJQUNqQyxXQUFXLEVBQUUsYUFBYTtJQUMxQixZQUFZLEVBQUUsY0FBYztDQUNwQixDQUFBIn0=\",\"filename\":\"scripts/corporations/constants.js\",\"server\":\"home\"}}],[\"scripts/corporations/fraud.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { MATERIALS } from 'scripts/corporations/constants';\\nconst getCurState = (ns) => ns.corporation.getCorporation().prevState;\\nexport const waitForCycle = async (ns) => {\\n    const curState = getCurState(ns);\\n    while (curState === getCurState(ns)) {\\n        await ns.sleep(100);\\n    }\\n    while (curState !== getCurState(ns)) {\\n        await ns.sleep(100);\\n    }\\n};\\nexport const commitFraud = async (ns) => {\\n    for (const divisionName of ns.corporation.getCorporation().divisions) {\\n        const division = ns.corporation.getDivision(divisionName);\\n        for (const cityName of division.cities) {\\n            const warehouse = ns.corporation.getWarehouse(divisionName, cityName);\\n            const freeSpace = warehouse.size - warehouse.sizeUsed;\\n            const realEstateObj = ns.corporation.getMaterialData(MATERIALS.REAL_ESTATE);\\n            const buyAmt = freeSpace / realEstateObj.size;\\n            ns.corporation.buyMaterial(divisionName, cityName, realEstateObj.name, buyAmt / 10);\\n            ns.print(`Set ${realEstateObj.name} buy amount in ${cityName} to ${buyAmt}`);\\n        }\\n    }\\n    ns.print('Waiting for cycle');\\n    await waitForCycle(ns);\\n    for (const divisionName of ns.corporation.getCorporation().divisions) {\\n        const division = ns.corporation.getDivision(divisionName);\\n        for (const cityName of division.cities) {\\n            ns.corporation.buyMaterial(divisionName, cityName, MATERIALS.REAL_ESTATE, 0);\\n            ns.print(`Set ${MATERIALS.REAL_ESTATE} buy amount in ${cityName} to 0`);\\n        }\\n    }\\n};\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    await commitFraud(ns);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJhdWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9jb3Jwb3JhdGlvbnMvZnJhdWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdDQUFnQyxDQUFBO0FBRTFELE1BQU0sV0FBVyxHQUFHLENBQUMsRUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLGNBQWMsRUFBRSxDQUFDLFNBQVMsQ0FBQTtBQUV6RSxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsS0FBSyxFQUFFLEVBQU0sRUFBRSxFQUFFO0lBQzNDLE1BQU0sUUFBUSxHQUFHLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUVoQyxPQUFPLFFBQVEsS0FBSyxXQUFXLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFDbkMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0tBQ3BCO0lBRUQsT0FBTyxRQUFRLEtBQUssV0FBVyxDQUFDLEVBQUUsQ0FBQyxFQUFFO1FBQ25DLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtLQUNwQjtBQUNILENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxLQUFLLEVBQUUsRUFBTSxFQUFFLEVBQUU7SUFDMUMsS0FBSyxNQUFNLFlBQVksSUFBSSxFQUFFLENBQUMsV0FBVyxDQUFDLGNBQWMsRUFBRSxDQUFDLFNBQVMsRUFBRTtRQUNwRSxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQTtRQUN6RCxLQUFLLE1BQU0sUUFBUSxJQUFJLFFBQVEsQ0FBQyxNQUFNLEVBQUU7WUFDdEMsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQyxDQUFBO1lBQ3JFLE1BQU0sU0FBUyxHQUFHLFNBQVMsQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQTtZQUNyRCxNQUFNLGFBQWEsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FDbEQsU0FBUyxDQUFDLFdBQVcsQ0FDdEIsQ0FBQTtZQUNELE1BQU0sTUFBTSxHQUFHLFNBQVMsR0FBRyxhQUFhLENBQUMsSUFBSSxDQUFBO1lBRTdDLEVBQUUsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUN4QixZQUFZLEVBQ1osUUFBUSxFQUNSLGFBQWEsQ0FBQyxJQUFJLEVBQ2xCLE1BQU0sR0FBRyxFQUFFLENBQ1osQ0FBQTtZQUVELEVBQUUsQ0FBQyxLQUFLLENBQ04sT0FBTyxhQUFhLENBQUMsSUFBSSxrQkFBa0IsUUFBUSxPQUFPLE1BQU0sRUFBRSxDQUNuRSxDQUFBO1NBQ0Y7S0FDRjtJQUVELEVBQUUsQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQTtJQUM3QixNQUFNLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUV0QixLQUFLLE1BQU0sWUFBWSxJQUFJLEVBQUUsQ0FBQyxXQUFXLENBQUMsY0FBYyxFQUFFLENBQUMsU0FBUyxFQUFFO1FBQ3BFLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFBO1FBQ3pELEtBQUssTUFBTSxRQUFRLElBQUksUUFBUSxDQUFDLE1BQU0sRUFBRTtZQUN0QyxFQUFFLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FDeEIsWUFBWSxFQUNaLFFBQVEsRUFDUixTQUFTLENBQUMsV0FBVyxFQUNyQixDQUFDLENBQ0YsQ0FBQTtZQUNELEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxTQUFTLENBQUMsV0FBVyxrQkFBa0IsUUFBUSxPQUFPLENBQUMsQ0FBQTtTQUN4RTtLQUNGO0FBQ0gsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ3BCLE1BQU0sV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0FBQ3ZCLENBQUMifQ==\",\"filename\":\"scripts/corporations/fraud.js\",\"server\":\"home\"}}],[\"scripts/corporations/main.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Round1 from 'scripts/corporations/round-1';\\nimport * as Round2 from 'scripts/corporations/round-2';\\nimport * as Round3 from 'scripts/corporations/round-3';\\nimport { formatTime } from 'scripts/utils/time';\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    const start = performance.now();\\n    const roundsToDo = ns.args;\\n    for (const round of roundsToDo) {\\n        switch (round) {\\n            case 1:\\n                await Round1.doit(ns);\\n                break;\\n            case 2:\\n                await Round2.doit(ns);\\n                break;\\n            case 3:\\n                await Round3.doit(ns);\\n                break;\\n        }\\n        ns.print(`Finished round ${round}. Elapsed time since script started: ${formatTime(performance.now() - start)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvcnBvcmF0aW9ucy9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sS0FBSyxNQUFNLE1BQU0sOEJBQThCLENBQUE7QUFDdEQsT0FBTyxLQUFLLE1BQU0sTUFBTSw4QkFBOEIsQ0FBQTtBQUN0RCxPQUFPLEtBQUssTUFBTSxNQUFNLDhCQUE4QixDQUFBO0FBRXRELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQTtBQUUvQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUE7SUFFcEIsTUFBTSxLQUFLLEdBQUcsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFBO0lBRS9CLE1BQU0sVUFBVSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUE7SUFFMUIsS0FBSyxNQUFNLEtBQUssSUFBSSxVQUFVLEVBQUU7UUFDOUIsUUFBUSxLQUFLLEVBQUU7WUFDYixLQUFLLENBQUM7Z0JBQ0osTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO2dCQUNyQixNQUFLO1lBRVAsS0FBSyxDQUFDO2dCQUNKLE1BQU0sTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtnQkFDckIsTUFBSztZQUVQLEtBQUssQ0FBQztnQkFDSixNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7Z0JBQ3JCLE1BQUs7U0FDUjtRQUVELEVBQUUsQ0FBQyxLQUFLLENBQ04sa0JBQWtCLEtBQUssd0NBQXdDLFVBQVUsQ0FDdkUsV0FBVyxDQUFDLEdBQUcsRUFBRSxHQUFHLEtBQUssQ0FDMUIsRUFBRSxDQUNKLENBQUE7S0FDRjtBQUNILENBQUMifQ==\",\"filename\":\"scripts/corporations/main.js\",\"server\":\"home\"}}],[\"scripts/corporations/round-1.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\n * Implements corporation management strategy for 1st investment round.\\n * Expects corporation in initial state.\\n * As of 2.3.1, this should get an offer between 16t and 18t.\\n * Estimated run time (in BN-3.x): 2m 14s\\n */\\nimport { CITY_NAMES, EMPLOYEE_POSITIONS, INDUSTRIES, MATERIALS, UPGRADES, } from 'scripts/corporations/constants';\\nimport { expandToAllCities, expandWarehouse, findInvestors, hireEmployees, maximizeMoraleAndEnergy, upgradeToLevel, waitForCycle, } from 'scripts/corporations/utils';\\nconst DIVISION_NAME = 'Nepfoods';\\nconst INDUSTRY = 'Restaurant';\\nconst WAREHOUSE_CAP = 200;\\nconst N_EMPLOYEES = 6;\\nconst WILSON_ANALYTICS_UPGRADES = 1;\\nconst ABC_SALESBOTS_UPGRADES = 2;\\nconst N_ADVERT_HIRES = 27;\\nexport const doit = async (ns) => {\\n    ns.print('Creating new Restaurant division');\\n    ns.corporation.expandIndustry(INDUSTRY, DIVISION_NAME);\\n    ns.print('Expanding to all cities');\\n    expandToAllCities(ns, DIVISION_NAME);\\n    ns.print('Expanding warehouses');\\n    for (const cityName of CITY_NAMES) {\\n        expandWarehouse(ns, DIVISION_NAME, cityName, WAREHOUSE_CAP);\\n    }\\n    ns.print('Hiring employees');\\n    for (const cityName of CITY_NAMES) {\\n        hireEmployees(ns, DIVISION_NAME, cityName, N_EMPLOYEES);\\n        ns.corporation.setAutoJobAssignment(DIVISION_NAME, cityName, EMPLOYEE_POSITIONS.BUSINESS, N_EMPLOYEES);\\n    }\\n    ns.print('Buying upgrades');\\n    upgradeToLevel(ns, UPGRADES.WILSON_ANALYTICS, WILSON_ANALYTICS_UPGRADES);\\n    upgradeToLevel(ns, UPGRADES.ABC_SALESBOTS, ABC_SALESBOTS_UPGRADES);\\n    ns.print('Hiring AdVert');\\n    for (let i = 0; i < N_ADVERT_HIRES; i++) {\\n        ns.corporation.hireAdVert(DIVISION_NAME);\\n    }\\n    ns.print('Maximizing employee morale and energy');\\n    await maximizeMoraleAndEnergy(ns, [INDUSTRIES.RESTAURANT]);\\n    ns.print('Filling warehouses with Real Estate');\\n    for (const cityName of CITY_NAMES) {\\n        const warehouse = ns.corporation.getWarehouse(DIVISION_NAME, cityName);\\n        const freeSpace = warehouse.size - warehouse.sizeUsed;\\n        const realEstateObj = ns.corporation.getMaterialData(MATERIALS.REAL_ESTATE);\\n        const buyAmt = freeSpace / realEstateObj.size;\\n        ns.corporation.buyMaterial(DIVISION_NAME, cityName, realEstateObj.name, buyAmt / 10);\\n    }\\n    await waitForCycle(ns);\\n    for (const cityName of CITY_NAMES) {\\n        ns.corporation.buyMaterial(DIVISION_NAME, cityName, MATERIALS.REAL_ESTATE, 0);\\n    }\\n    ns.print('Starting fraud');\\n    for (const cityName of CITY_NAMES) {\\n        ns.corporation.sellMaterial(DIVISION_NAME, cityName, MATERIALS.REAL_ESTATE, 'MAX', 'MP');\\n    }\\n    return await findInvestors(ns);\\n};\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91bmQtMS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvcnBvcmF0aW9ucy9yb3VuZC0xLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7OztHQUtHO0FBSUgsT0FBTyxFQUNMLFVBQVUsRUFDVixrQkFBa0IsRUFDbEIsVUFBVSxFQUNWLFNBQVMsRUFDVCxRQUFRLEdBQ1QsTUFBTSxnQ0FBZ0MsQ0FBQTtBQUN2QyxPQUFPLEVBQ0wsaUJBQWlCLEVBQ2pCLGVBQWUsRUFDZixhQUFhLEVBQ2IsYUFBYSxFQUNiLHVCQUF1QixFQUN2QixjQUFjLEVBQ2QsWUFBWSxHQUNiLE1BQU0sNEJBQTRCLENBQUE7QUFFbkMsTUFBTSxhQUFhLEdBQUcsVUFBVSxDQUFBO0FBQ2hDLE1BQU0sUUFBUSxHQUFxQixZQUFZLENBQUE7QUFDL0MsTUFBTSxhQUFhLEdBQUcsR0FBRyxDQUFBO0FBQ3pCLE1BQU0sV0FBVyxHQUFHLENBQUMsQ0FBQTtBQUNyQixNQUFNLHlCQUF5QixHQUFHLENBQUMsQ0FBQTtBQUNuQyxNQUFNLHNCQUFzQixHQUFHLENBQUMsQ0FBQTtBQUNoQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUE7QUFFekIsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFHLEtBQUssRUFBRSxFQUFNLEVBQUUsRUFBRTtJQUNuQyxFQUFFLENBQUMsS0FBSyxDQUFDLGtDQUFrQyxDQUFDLENBQUE7SUFDNUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFLGFBQWEsQ0FBQyxDQUFBO0lBRXRELEVBQUUsQ0FBQyxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQTtJQUNuQyxpQkFBaUIsQ0FBQyxFQUFFLEVBQUUsYUFBYSxDQUFDLENBQUE7SUFFcEMsRUFBRSxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFBO0lBQ2hDLEtBQUssTUFBTSxRQUFRLElBQUksVUFBVSxFQUFFO1FBQ2pDLGVBQWUsQ0FB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\",\"filename\":\"scripts/corporations/round-1.js\",\"server\":\"home\"}}],[\"scripts/corporations/utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CITY_NAMES } from 'scripts/corporations/constants';\\nconst getCurState = (ns) => ns.corporation.getCorporation().prevState;\\nexport const waitForCycle = async (ns) => {\\n    // Forces state to be START\\n    while (getCurState(ns) !== 'START') {\\n        await ns.sleep(100);\\n    }\\n    while (getCurState(ns) === 'START') {\\n        await ns.sleep(100);\\n    }\\n    while (getCurState(ns) !== 'START') {\\n        await ns.sleep(100);\\n    }\\n};\\nexport const upgradeToLevel = (ns, name, level) => {\\n    const curLevel = ns.corporation.getUpgradeLevel(name);\\n    for (let i = curLevel; i < level; i++) {\\n        ns.corporation.levelUpgrade(name);\\n    }\\n};\\nexport const expandWarehouse = (ns, division, city, capacity) => {\\n    if (!ns.corporation.hasWarehouse(division, city)) {\\n        ns.corporation.purchaseWarehouse(division, city);\\n    }\\n    while (ns.corporation.getWarehouse(division, city).size < capacity) {\\n        ns.corporation.upgradeWarehouse(division, city);\\n    }\\n};\\nexport const expandToAllCities = (ns, division) => {\\n    const curCities = ns.corporation.getDivision(division)\\n        .cities;\\n    for (const cityName of CITY_NAMES) {\\n        if (!curCities.includes(cityName)) {\\n            ns.corporation.expandCity(division, cityName);\\n        }\\n    }\\n};\\nexport const getDivisions = (ns, industries) => ns.corporation\\n    .getCorporation()\\n    .divisions.filter((divName) => industries.includes(ns.corporation.getDivision(divName).type));\\nexport const getDivisionsAndCities = (ns, industries) => {\\n    const dnc = [];\\n    const divisions = getDivisions(ns, industries);\\n    for (const divisionName of divisions) {\\n        for (const cityName of ns.corporation.getDivision(divisionName).cities) {\\n            dnc.push([divisionName, cityName]);\\n        }\\n    }\\n    return dnc;\\n};\\nexport const hireEmployees = (ns, division, city, desiredEmployees) => {\\n    const positionsToOpen = desiredEmployees - ns.corporation.getOffice(division, city).size;\\n    if (positionsToOpen > 0) {\\n        const reqCost = ns.corporation.getOfficeSizeUpgradeCost(division, city, positionsToOpen);\\n        if (reqCost > ns.corporation.getCorporation().funds) {\\n            throw new Error('Insufficient funds to hire employees');\\n        }\\n        ns.corporation.upgradeOfficeSize(division, city, positionsToOpen);\\n    }\\n    while (ns.corporation.getOffice(division, city).numEmployees < desiredEmployees) {\\n        if (!ns.corporation.hireEmployee(division, city)) {\\n            throw new Error('Failed to hire employee');\\n        }\\n    }\\n};\\nexport const buyTeaAndThrowParties = (ns, industries) => {\\n    let minStat = 100;\\n    for (const [divisionName, cityName] of getDivisionsAndCities(ns, industries)) {\\n        const { avgEnergy, avgMorale } = ns.corporation.getOffice(divisionName, cityName);\\n        minStat = Math.min(minStat, avgEnergy, avgMorale);\\n        if (!ns.corporation.buyTea(divisionName, cityName)) {\\n            ns.print(`Can't buy tea for ${divisionName} in ${cityName}`);\\n            return -1;\\n        }\\n        const amt = (110.5 - avgMorale) * 100000;\\n        if (!ns.corporation.throwParty(divisionName, cityName, amt)) {\\n            ns.print(`Can't throw party for ${divisionName} in ${cityName}`);\\n            return -1;\\n        }\\n    }\\n    return minStat;\\n};\\nexport const maximizeMoraleAndEnergy = async (ns, industries) => {\\n    while (true) {\\n        const minStat = buyTeaAndThrowParties(ns, industries);\\n        if (minStat < 0) {\\n            return;\\n        }\\n        else if (minStat > 99) {\\n            break;\\n        }\\n        else {\\n            ns.print(`-- Buying tea and throwing parties (min stat: ${minStat.toFixed(3)})`);\\n        }\\n        await waitForCycle(ns);\\n    }\\n};\\nexport const findInvestors = async (ns) => {\\n    let lastOffer = 0;\\n    for (let i = 0;; i++) {\\n        await waitForCycle(ns);\\n        const offer = ns.corporation.getInvestmentOffer();\\n        ns.print(`Offer after cycle ${i + 1}: ${ns.formatNumber(offer.funds)}`);\\n        if (offer.funds <= lastOffer) {\\n            ns.corporation.acceptInvestmentOffer();\\n            ns.print(`Accepted offer of ${ns.formatNumber(offer.funds)}`);\\n            lastOffer = offer.funds;\\n            break;\\n        }\\n        lastOffer = offer.funds;\\n    }\\n    return lastOffer;\\n};\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9jb3Jwb3JhdGlvbnMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdDQUFnQyxDQUFBO0FBRTNELE1BQU0sV0FBVyxHQUFHLENBQUMsRUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLGNBQWMsRUFBRSxDQUFDLFNBQVMsQ0FBQTtBQUV6RSxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsS0FBSyxFQUFFLEVBQU0sRUFBRSxFQUFFO0lBQzNDLDJCQUEyQjtJQUMzQixPQUFPLFdBQVcsQ0FBQyxFQUFFLENBQUMsS0FBSyxPQUFPLEVBQUU7UUFDbEMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0tBQ3BCO0lBRUQsT0FBTyxXQUFXLENBQUMsRUFBRSxDQUFDLEtBQUssT0FBTyxFQUFFO1FBQ2xDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtLQUNwQjtJQUVELE9BQU8sV0FBVyxDQUFDLEVBQUUsQ0FBQyxLQUFLLE9BQU8sRUFBRTtRQUNsQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUE7S0FDcEI7QUFDSCxDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsQ0FBQyxFQUFNLEVBQUUsSUFBWSxFQUFFLEtBQWEsRUFBRSxFQUFFO0lBQ3BFLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBRXJELEtBQUssSUFBSSxDQUFDLEdBQUcsUUFBUSxFQUFFLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDckMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUE7S0FDbEM7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\",\"filename\":\"scripts/corporations/utils.js\",\"server\":\"home\"}}],[\"scripts/corporations/round-2.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\n * Implements corporation management strategy for 2nd investment round.\\n * Expects corporation to have no divisions.\\n * As of 2.3.1, this should get about 20q funds in investment, assuming\\n * round 1 got at least 16t.\\n * Estimated run time (in BN-3.x): 2m 20s\\n */\\nimport { EMPLOYEE_POSITIONS, INDUSTRIES, MATERIALS, UPGRADES, } from 'scripts/corporations/constants';\\nimport { expandToAllCities, expandWarehouse, findInvestors, getDivisions, getDivisionsAndCities, hireEmployees, maximizeMoraleAndEnergy, upgradeToLevel, waitForCycle, } from 'scripts/corporations/utils';\\nconst N_DIVISIONS = 20;\\nconst DIVISON_NAME = 'Nepfoods';\\nconst WAREHOUSE_CAP = 1200;\\nconst SMART_STORAGE_LVL = 20;\\nconst WILSON_ANALYTICS_LVL = 10;\\nconst N_EMPLOYEES = 12;\\nconst getRestaurantDivisions = (ns) => getDivisions(ns, [INDUSTRIES.RESTAURANT]);\\nconst getRestaurantCities = (ns) => getDivisionsAndCities(ns, [INDUSTRIES.RESTAURANT]);\\nexport const doit = async (ns) => {\\n    while (ns.corporation.getCorporation().divisions.length > 0) {\\n        ns.print('Please sell all existing divisions');\\n        await ns.sleep(2000);\\n    }\\n    ns.print('Creating Restaurant divisions');\\n    const curRestaurantCnt = getRestaurantDivisions(ns).length;\\n    for (let i = curRestaurantCnt; i < N_DIVISIONS; i++) {\\n        try {\\n            ns.corporation.expandIndustry(INDUSTRIES.RESTAURANT, `${DIVISON_NAME} ${i + 1}`);\\n        }\\n        catch (err) {\\n            ns.print('Error while expanding industry. Most likely reached limit.');\\n            break;\\n        }\\n    }\\n    ns.print('Expanding to all cities');\\n    for (const divisionName of getRestaurantDivisions(ns)) {\\n        expandToAllCities(ns, divisionName);\\n    }\\n    ns.print('Buying upgrades');\\n    upgradeToLevel(ns, UPGRADES.SMART_STORAGE, SMART_STORAGE_LVL);\\n    upgradeToLevel(ns, UPGRADES.WILSON_ANALYTICS, WILSON_ANALYTICS_LVL);\\n    ns.print('Expanding warehouses');\\n    for (const [divisionName, cityName] of getRestaurantCities(ns)) {\\n        expandWarehouse(ns, divisionName, cityName, WAREHOUSE_CAP);\\n    }\\n    ns.print('Hiring employees');\\n    for (const [divisionName, cityName] of getRestaurantCities(ns)) {\\n        hireEmployees(ns, divisionName, cityName, N_EMPLOYEES);\\n        ns.corporation.setAutoJobAssignment(divisionName, cityName, EMPLOYEE_POSITIONS.BUSINESS, N_EMPLOYEES);\\n    }\\n    ns.print('Maximizing employee morale and energy');\\n    await maximizeMoraleAndEnergy(ns, [INDUSTRIES.RESTAURANT]);\\n    ns.print('Hiring AdVert');\\n    let advertCnt = 0;\\n    for (;; advertCnt++) {\\n        const divisionsToHire = getRestaurantDivisions(ns).filter((div) => ns.corporation.getHireAdVertCount(div) <= advertCnt);\\n        const cost = divisionsToHire.reduce((acc, div) => acc + ns.corporation.getHireAdVertCost(div), 0);\\n        if (cost > ns.corporation.getCorporation().funds) {\\n            break;\\n        }\\n        for (const divisionName of divisionsToHire) {\\n            ns.corporation.hireAdVert(divisionName);\\n        }\\n    }\\n    ns.print(`Hired AdVert ${advertCnt} times`);\\n    ns.print('Upgrading FocusWires');\\n    let focusWiresCnt = 0;\\n    while (ns.corporation.getUpgradeLevelCost(UPGRADES.FOCUS_WIRES) <\\n        ns.corporation.getCorporation().funds) {\\n        ns.corporation.levelUpgrade(UPGRADES.FOCUS_WIRES);\\n        focusWiresCnt += 1;\\n    }\\n    ns.print(`Upgraded FocusWires ${focusWiresCnt} times`);\\n    ns.print(`${ns.formatNumber(ns.corporation.getCorporation().funds)} leftover funds before fraud`);\\n    ns.print('Filling warehouses with Real Estate');\\n    for (const [divisionName, cityName] of getRestaurantCities(ns)) {\\n        const warehouse = ns.corporation.getWarehouse(divisionName, cityName);\\n        const freeSpace = warehouse.size - warehouse.sizeUsed;\\n        const buyAmt = freeSpace / ns.corporation.getMaterialData(MATERIALS.REAL_ESTATE).size;\\n        ns.corporation.buyMaterial(divisionName, cityName, MATERIALS.REAL_ESTATE, buyAmt / 10);\\n    }\\n    await waitForCycle(ns);\\n    for (const [divisionName, cityName] of getRestaurantCities(ns)) {\\n        ns.corporation.buyMaterial(divisionName, cityName, MATERIALS.REAL_ESTATE, 0);\\n    }\\n    ns.print(`Starting fraud (leftover funds: ${ns.formatNumber(ns.corporation.getCorporation().funds)})`);\\n    for (const [divisionName, cityName] of getRestaurantCities(ns)) {\\n        ns.corporation.sellMaterial(divisionName, cityName, MATERIALS.REAL_ESTATE, 'MAX', 'MP');\\n    }\\n    return await findInvestors(ns);\\n};\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91bmQtMi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvcnBvcmF0aW9ucy9yb3VuZC0yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUlILE9BQU8sRUFDTCxrQkFBa0IsRUFDbEIsVUFBVSxFQUNWLFNBQVMsRUFDVCxRQUFRLEdBQ1QsTUFBTSxnQ0FBZ0MsQ0FBQTtBQUN2QyxPQUFPLEVBQ0wsaUJBQWlCLEVBQ2pCLGVBQWUsRUFDZixhQUFhLEVBQ2IsWUFBWSxFQUNaLHFCQUFxQixFQUNyQixhQUFhLEVBQ2IsdUJBQXVCLEVBQ3ZCLGNBQWMsRUFDZCxZQUFZLEdBQ2IsTUFBTSw0QkFBNEIsQ0FBQTtBQUVuQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUE7QUFDdEIsTUFBTSxZQUFZLEdBQUcsVUFBVSxDQUFBO0FBQy9CLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQTtBQUMxQixNQUFNLGlCQUFpQixHQUFHLEVBQUUsQ0FBQTtBQUM1QixNQUFNLG9CQUFvQixHQUFHLEVBQUUsQ0FBQTtBQUMvQixNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUE7QUFFdEIsTUFBTSxzQkFBc0IsR0FBRyxDQUFDLEVBQU0sRUFBRSxFQUFFLENBQ3hDLFlBQVksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQTtBQUUzQyxNQUFNLG1CQUFtQixHQUFHLENBQUMsRUFBTSxFQUFFLEVBQUUsQ0FDckMscUJBQXFCLENBQUMsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUE7QUFFcEQsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFHLEtBQUssRUFBRSxFQUFNLEVBQUUsRUFBRTtJQUNuQyxPQUFPLEVBQUUsQ0FBQyxXQUFXLENBQUMsY0FBYyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDM0QsRUFBRSxDQUFD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\",\"filename\":\"scripts/corporations/round-2.js\",\"server\":\"home\"}}],[\"scripts/corporations/round-3.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\n * Implements corporation management strategy for 3rd investment round.\\n * Expects corporation to have no divisions.\\n * As of 2.3.1, this goes infinite.\\n * Estimated run time (in BN-3.x): 5h 30m\\n */\\nimport { CITIES, CITY_NAMES, EMPLOYEE_POSITIONS, INDUSTRIES, MATERIALS, RESEARCHES, UNLOCKABLES, UPGRADES, } from 'scripts/corporations/constants';\\nimport { buyTeaAndThrowParties, expandToAllCities, expandWarehouse, getDivisions, getDivisionsAndCities, hireEmployees, maximizeMoraleAndEnergy, upgradeToLevel, } from 'scripts/corporations/utils';\\nimport { CycleManager } from 'scripts/corporations/cycle-manager';\\nconst TOBACCO_DIV_NAME = 'Nepsmokes';\\nconst AGRICULTURE_DIV_NAME = 'Nepplants';\\nconst CHEM_DIV_NAME = 'Nepchem';\\nconst N_EMPLOYEES = 204;\\nconst WAREHOUSE_CAP = 24000;\\nconst SMART_STORAGE_LVL = 50;\\nconst AGRICULTURE_REAL_ESTATE = 3e6;\\nconst CHEM_REAL_ESTATE = 1e6;\\nconst CHEM_ROBOTS = 30e3;\\nconst TOBACCO_REAL_ESTATE = 1e6;\\nconst TOBACCO_ROBOTS = 30e3;\\nconst PLANT_PRODUCTION = 3800;\\nconst HI_TECH_RESEARCH = 5000;\\nconst MARKET_TA_II_RESEARCH = 70000;\\nconst HIRE_STEP = 12;\\nconst PRODUCT_NAME = 'Neparette';\\nconst PRODUCT_INVESTMENT = 10e9;\\nconst RESTAURANT_NAME = 'Nepmeals';\\nconst LOOP_INDUSTRIES = [\\n    { industry: INDUSTRIES.AGRICULTURE, divisionName: AGRICULTURE_DIV_NAME },\\n    { industry: INDUSTRIES.CHEMICAL, divisionName: CHEM_DIV_NAME },\\n];\\nconst ALL_INDUSTRIES = [\\n    ...LOOP_INDUSTRIES,\\n    { industry: INDUSTRIES.TOBACCO, divisionName: TOBACCO_DIV_NAME },\\n];\\nconst ALL_INDUSTRY_NAMES = ALL_INDUSTRIES.map((industry) => industry.industry);\\nconst LOOP_INDUSTRY_NAMES = LOOP_INDUSTRIES.map((industry) => industry.industry);\\nconst getProductName = (version) => `${PRODUCT_NAME} ${version}`;\\nconst getRestaurantDivision = (idx) => `Nepfoods ${idx}`;\\nconst createProductManager = (ns) => {\\n    let curVersion = 0;\\n    const inDevelopment = new Set();\\n    const develop = (version) => {\\n        const name = getProductName(version);\\n        ns.print(`Starting development of ${name}`);\\n        ns.corporation.makeProduct(TOBACCO_DIV_NAME, CITIES.SECTOR_12, name, PRODUCT_INVESTMENT, PRODUCT_INVESTMENT);\\n        inDevelopment.add(name);\\n    };\\n    for (let i = 0; i < 3; i++) {\\n        develop(curVersion++);\\n    }\\n    return () => {\\n        for (const name of inDevelopment) {\\n            const product = ns.corporation.getProduct(TOBACCO_DIV_NAME, CITIES.SECTOR_12, name);\\n            if (product.developmentProgress === 100) {\\n                inDevelopment.delete(name);\\n                ns.print(`Finished developing ${name}`);\\n                ns.print(`Activating Market-TA.II for ${name}`);\\n                ns.corporation.setProductMarketTA2(TOBACCO_DIV_NAME, name, true);\\n                if (inDevelopment.size === 0) {\\n                    const discontinued = getProductName(curVersion - 3);\\n                    ns.print(`Discontinuing ${discontinued}`);\\n                    ns.corporation.discontinueProduct(TOBACCO_DIV_NAME, discontinued);\\n                    develop(curVersion++);\\n                }\\n            }\\n        }\\n    };\\n};\\nconst makeUpgrades = (ns, fullRND) => {\\n    while (true) {\\n        const funds = ns.corporation.getCorporation().funds - 2 * PRODUCT_INVESTMENT;\\n        const actions = [\\n            ...[\\n                UPGRADES.WILSON_ANALYTICS,\\n                UPGRADES.FOCUS_WIRES,\\n                UPGRADES.NEURAL_ACCELERATORS,\\n                UPGRADES.PROJECT_INSIGHT,\\n                UPGRADES.NNII,\\n                UPGRADES.SMART_FACTORIES,\\n                UPGRADES.ABC_SALESBOTS,\\n            ].map((upgrade) => ({\\n                cost: ns.corporation.getUpgradeLevelCost(upgrade),\\n                action: () => ns.corporation.levelUpgrade(upgrade),\\n            })),\\n            {\\n                cost: ns.corporation.getHireAdVertCost(TOBACCO_DIV_NAME),\\n                action: () => ns.corporation.hireAdVert(TOBACCO_DIV_NAME),\\n            },\\n            {\\n                cost: CITY_NAMES.length *\\n                    ns.corporation.getOfficeSizeUpgradeCost(TOBACCO_DIV_NAME, CITIES.SECTOR_12, HIRE_STEP),\\n                action: () => CITY_NAMES.forEach((cityName) => {\\n                    ns.corporation.upgradeOfficeSize(TOBACCO_DIV_NAME, cityName, HIRE_STEP);\\n                    if (fullRND) {\\n                        for (let i = 0; i < HIRE_STEP; i++) {\\n                            ns.corporation.hireEmployee(TOBACCO_DIV_NAME, cityName, EMPLOYEE_POSITIONS.R_AND_D);\\n                        }\\n                    }\\n                    else {\\n                        if (cityName === CITIES.SECTOR_12) {\\n                            const third = Math.round(HIRE_STEP / 3);\\n                            for (let i = 0; i < third; i++) {\\n                                ns.corporation.hireEmployee(TOBACCO_DIV_NAME, cityName, EMPLOYEE_POSITIONS.OPERATIONS);\\n                                ns.corporation.hireEmployee(TOBACCO_DIV_NAME, cityName, EMPLOYEE_POSITIONS.ENGINEER);\\n                                ns.corporation.hireEmployee(TOBACCO_DIV_NAME, cityName, EMPLOYEE_POSITIONS.MANAGEMENT);\\n                            }\\n                        }\\n                        else {\\n                            const fourth = Math.round(HIRE_STEP / 4);\\n                            for (let i = 0; i < fourth; i++) {\\n                                ns.corporation.hireEmployee(TOBACCO_DIV_NAME, cityName, EMPLOYEE_POSITIONS.OPERATIONS);\\n                                ns.corporation.hireEmployee(TOBACCO_DIV_NAME, cityName, EMPLOYEE_POSITIONS.ENGINEER);\\n                                ns.corporation.hireEmployee(TOBACCO_DIV_NAME, cityName, EMPLOYEE_POSITIONS.MANAGEMENT);\\n                                ns.corporation.hireEmployee(TOBACCO_DIV_NAME, cityName, EMPLOYEE_POSITIONS.R_AND_D);\\n                            }\\n                        }\\n                    }\\n                }),\\n            },\\n        ].sort((a, b) => a.cost - b.cost);\\n        const action = actions[0];\\n        if (action.cost > funds) {\\n            return;\\n        }\\n        action.action();\\n    }\\n};\\nexport const doit = async (ns) => {\\n    const cycleManager = new CycleManager(ns);\\n    while (ns.corporation.getCorporation().divisions.length > 0) {\\n        ns.print('Please sell all existing divisions');\\n        await ns.sleep(2000);\\n    }\\n    ns.print('Creating Tobacco, Agriculture and Chemical divisions');\\n    for (const { industry, divisionName } of ALL_INDUSTRIES) {\\n        ns.corporation.expandIndustry(industry, divisionName);\\n    }\\n    ns.print('Creating Restaurant divisions for round 4');\\n    let nRestaurantDivisions = 0;\\n    for (let i = 0; i < 17; i++) {\\n        try {\\n            ns.corporation.expandIndustry(INDUSTRIES.RESTAURANT, getRestaurantDivision(i));\\n            nRestaurantDivisions++;\\n        }\\n        catch (err) {\\n            ns.print('Error while expanding industry. Most likely reached limit.');\\n            break;\\n        }\\n    }\\n    ns.print('Expanding divisions to all cities');\\n    for (const divisionName of getDivisions(ns, [\\n        ...ALL_INDUSTRY_NAMES,\\n        INDUSTRIES.RESTAURANT,\\n    ])) {\\n        expandToAllCities(ns, divisionName);\\n    }\\n    ns.print('Hiring employees');\\n    for (const [divisionName, cityName] of getDivisionsAndCities(ns, [\\n        ...ALL_INDUSTRY_NAMES,\\n        INDUSTRIES.RESTAURANT,\\n    ])) {\\n        hireEmployees(ns, divisionName, cityName, N_EMPLOYEES);\\n    }\\n    ns.print('Assigning all Tobacco and Restaurant employees to R&D');\\n    for (const [divisionName, cityName] of getDivisionsAndCities(ns, [\\n        INDUSTRIES.TOBACCO,\\n        INDUSTRIES.RESTAURANT,\\n    ])) {\\n        ns.corporation.setAutoJobAssignment(divisionName, cityName, EMPLOYEE_POSITIONS.R_AND_D, N_EMPLOYEES);\\n    }\\n    ns.print('Assigning Agriculture and Chemical employees to Operations, Engineer, Management and R&D');\\n    const loopPositions = [\\n        EMPLOYEE_POSITIONS.OPERATIONS,\\n        EMPLOYEE_POSITIONS.ENGINEER,\\n        EMPLOYEE_POSITIONS.MANAGEMENT,\\n        EMPLOYEE_POSITIONS.R_AND_D,\\n    ];\\n    for (const [divisionName, cityName] of getDivisionsAndCities(ns, LOOP_INDUSTRY_NAMES)) {\\n        for (const position of loopPositions) {\\n            ns.corporation.setAutoJobAssignment(divisionName, cityName, position, Math.round(N_EMPLOYEES / 4));\\n        }\\n    }\\n    ns.print('Buying export unlockable');\\n    // For some reason the script is able to set export without this unlockable.\\n    // Must be a bug (v2.3.1).\\n    ns.corporation.purchaseUnlock(UNLOCKABLES.EXPORT);\\n    ns.print('Leveling Smart Storage');\\n    upgradeToLevel(ns, UPGRADES.SMART_STORAGE, SMART_STORAGE_LVL);\\n    ns.print('Expanding warehouses');\\n    for (const [divisionName, cityName] of getDivisionsAndCities(ns, [\\n        ...ALL_INDUSTRY_NAMES,\\n        INDUSTRIES.RESTAURANT,\\n    ])) {\\n        expandWarehouse(ns, divisionName, cityName, WAREHOUSE_CAP);\\n    }\\n    ns.print('Maximizing employee morale and energy');\\n    await maximizeMoraleAndEnergy(ns, [\\n        ...ALL_INDUSTRY_NAMES,\\n        INDUSTRIES.RESTAURANT,\\n    ]);\\n    // cycleManager.registerRecurrentFunction(() =>\\n    //   buyTeaAndThrowParties(ns, [...ALL_INDUSTRY_NAMES, INDUSTRIES.RESTAURANT])\\n    // )\\n    ns.print('Setting up loop exports');\\n    for (const cityName of CITY_NAMES) {\\n        // Buy initial chemicals to start agriculture for 2 cycles\\n        ns.corporation.buyMaterial(AGRICULTURE_DIV_NAME, cityName, MATERIALS.CHEMICALS, (2 * PLANT_PRODUCTION) / 5);\\n        // Production boosting materials\\n        ns.corporation.buyMaterial(TOBACCO_DIV_NAME, cityName, MATERIALS.REAL_ESTATE, TOBACCO_REAL_ESTATE / 10);\\n        ns.corporation.buyMaterial(TOBACCO_DIV_NAME, cityName, MATERIALS.ROBOTS, TOBACCO_ROBOTS / 10);\\n        ns.corporation.buyMaterial(AGRICULTURE_DIV_NAME, cityName, MATERIALS.REAL_ESTATE, AGRICULTURE_REAL_ESTATE / 10);\\n        ns.corporation.buyMaterial(CHEM_DIV_NAME, cityName, MATERIALS.REAL_ESTATE, CHEM_REAL_ESTATE / 10);\\n        ns.corporation.buyMaterial(CHEM_DIV_NAME, cityName, MATERIALS.ROBOTS, CHEM_ROBOTS / 10);\\n    }\\n    await cycleManager.waitForCycle();\\n    for (const cityName of CITY_NAMES) {\\n        ns.corporation.buyMaterial(AGRICULTURE_DIV_NAME, cityName, MATERIALS.CHEMICALS, 0);\\n        ns.corporation.buyMaterial(TOBACCO_DIV_NAME, cityName, MATERIALS.REAL_ESTATE, 0);\\n        ns.corporation.buyMaterial(TOBACCO_DIV_NAME, cityName, MATERIALS.ROBOTS, 0);\\n        ns.corporation.buyMaterial(AGRICULTURE_DIV_NAME, cityName, MATERIALS.REAL_ESTATE, 0);\\n        ns.corporation.buyMaterial(CHEM_DIV_NAME, cityName, MATERIALS.REAL_ESTATE, 0);\\n        ns.corporation.buyMaterial(CHEM_DIV_NAME, cityName, MATERIALS.ROBOTS, 0);\\n    }\\n    for (const cityName of CITY_NAMES) {\\n        ns.corporation.buyMaterial(AGRICULTURE_DIV_NAME, cityName, MATERIALS.WATER, PLANT_PRODUCTION / 2);\\n        ns.corporation.buyMaterial(CHEM_DIV_NAME, cityName, MATERIALS.WATER, PLANT_PRODUCTION / 10);\\n        // Setup exports\\n        ns.corporation.exportMaterial(AGRICULTURE_DIV_NAME, cityName, CHEM_DIV_NAME, cityName, MATERIALS.PLANTS, PLANT_PRODUCTION / 5);\\n        ns.corporation.exportMaterial(CHEM_DIV_NAME, cityName, AGRICULTURE_DIV_NAME, cityName, MATERIALS.CHEMICALS, PLANT_PRODUCTION / 5);\\n        // Sell leftovers\\n        // Prices should be low enough to sell everything, but also high enough\\n        // so the company profit stays positive.\\n        ns.corporation.sellMaterial(AGRICULTURE_DIV_NAME, cityName, MATERIALS.FOOD, 'MAX', '0.2*MP');\\n        ns.corporation.sellMaterial(AGRICULTURE_DIV_NAME, cityName, MATERIALS.PLANTS, 'MAX', '0.4*MP');\\n    }\\n    await cycleManager.waitForCycle();\\n    ns.print('Buying all other upgrades');\\n    makeUpgrades(ns, true);\\n    ns.print('Waiting for Hi-Tech research in Tobacco');\\n    while (true) {\\n        if (ns.corporation.getDivision(TOBACCO_DIV_NAME).researchPoints >\\n            HI_TECH_RESEARCH) {\\n            ns.corporation.research(TOBACCO_DIV_NAME, RESEARCHES.HI_TECH);\\n            ns.print('Purchased Hi-Tech research in Tobacco');\\n            break;\\n        }\\n        await cycleManager.waitForCycle();\\n    }\\n    ns.print('Waiting for Hi-Tech research in loop divisions');\\n    while (true) {\\n        if (ns.corporation.getDivision(AGRICULTURE_DIV_NAME).researchPoints >\\n            HI_TECH_RESEARCH &&\\n            ns.corporation.getDivision(CHEM_DIV_NAME).researchPoints >\\n                HI_TECH_RESEARCH) {\\n            ns.corporation.research(AGRICULTURE_DIV_NAME, RESEARCHES.HI_TECH);\\n            ns.corporation.research(CHEM_DIV_NAME, RESEARCHES.HI_TECH);\\n            ns.print('Purchased Hi-Tech research in loop divisions');\\n            break;\\n        }\\n        await cycleManager.waitForCycle();\\n    }\\n    ns.print('Waiting for Hi-Tech research in Restaurants');\\n    while (true) {\\n        const divName = getRestaurantDivision(0);\\n        if (ns.corporation.getDivision(divName).researchPoints > HI_TECH_RESEARCH) {\\n            ns.corporation.research(divName, RESEARCHES.HI_TECH);\\n            ns.print('Purchased Hi-Tech research in Restaurants');\\n            break;\\n        }\\n        await cycleManager.waitForCycle();\\n    }\\n    ns.print('Waiting for Market-TA.II in Tobacco');\\n    while (true) {\\n        if (ns.corporation.getDivision(TOBACCO_DIV_NAME).researchPoints >\\n            MARKET_TA_II_RESEARCH) {\\n            ns.corporation.research(TOBACCO_DIV_NAME, RESEARCHES.MARKET_TA_I);\\n            ns.corporation.research(TOBACCO_DIV_NAME, RESEARCHES.MARKET_TA_II);\\n            ns.print('Purchased Market-TA.II in Tobacco');\\n            break;\\n        }\\n        await cycleManager.waitForCycle();\\n    }\\n    ns.print('Waiting for Market-TA.II in Restaurants');\\n    while (true) {\\n        const divName = getRestaurantDivision(0);\\n        if (ns.corporation.getDivision(divName).researchPoints > MARKET_TA_II_RESEARCH) {\\n            ns.corporation.research(divName, RESEARCHES.MARKET_TA_I);\\n            ns.corporation.research(divName, RESEARCHES.MARKET_TA_II);\\n            ns.print('Purchased Market-TA.II in Restaurants');\\n            break;\\n        }\\n        await cycleManager.waitForCycle();\\n    }\\n    ns.print('Reassigning Tobacco employees');\\n    for (const cityName of CITY_NAMES) {\\n        for (const position of Object.values(EMPLOYEE_POSITIONS)) {\\n            if (position !== 'Unassigned') {\\n                ns.corporation.setAutoJobAssignment(TOBACCO_DIV_NAME, cityName, position, 0);\\n            }\\n        }\\n        await cycleManager.waitForCycle();\\n        const nEmployees = ns.corporation.getOffice(TOBACCO_DIV_NAME, cityName).numEmployees;\\n        if (cityName === CITIES.SECTOR_12) {\\n            const thirdEmployees = Math.round(nEmployees / 3);\\n            ns.corporation.setAutoJobAssignment(TOBACCO_DIV_NAME, cityName, EMPLOYEE_POSITIONS.OPERATIONS, thirdEmployees);\\n            ns.corporation.setAutoJobAssignment(TOBACCO_DIV_NAME, cityName, EMPLOYEE_POSITIONS.ENGINEER, thirdEmployees);\\n            ns.corporation.setAutoJobAssignment(TOBACCO_DIV_NAME, cityName, EMPLOYEE_POSITIONS.MANAGEMENT, thirdEmployees);\\n        }\\n        else {\\n            const fourthEmployees = Math.round(nEmployees / 4);\\n            ns.corporation.setAutoJobAssignment(TOBACCO_DIV_NAME, cityName, EMPLOYEE_POSITIONS.OPERATIONS, fourthEmployees);\\n            ns.corporation.setAutoJobAssignment(TOBACCO_DIV_NAME, cityName, EMPLOYEE_POSITIONS.ENGINEER, fourthEmployees);\\n            ns.corporation.setAutoJobAssignment(TOBACCO_DIV_NAME, cityName, EMPLOYEE_POSITIONS.MANAGEMENT, fourthEmployees);\\n            ns.corporation.setAutoJobAssignment(TOBACCO_DIV_NAME, cityName, EMPLOYEE_POSITIONS.R_AND_D, fourthEmployees);\\n        }\\n    }\\n    cycleManager.registerRecurrentFunction(() => buyTeaAndThrowParties(ns, [...ALL_INDUSTRY_NAMES, INDUSTRIES.RESTAURANT]));\\n    cycleManager.registerRecurrentFunction(createProductManager(ns));\\n    ns.print('Waiting for first product to be completed');\\n    while (ns.corporation.getProduct(TOBACCO_DIV_NAME, CITIES.SECTOR_12, getProductName(0)).developmentProgress < 100) {\\n        await cycleManager.waitForCycle();\\n    }\\n    ns.print('Redirecting all leftover plants to Tobacco');\\n    for (const cityName of CITY_NAMES) {\\n        ns.corporation.exportMaterial(AGRICULTURE_DIV_NAME, cityName, TOBACCO_DIV_NAME, cityName, MATERIALS.PLANTS, `EPROD - ${(PLANT_PRODUCTION / 5).toFixed(6)}`);\\n    }\\n    ns.print('Waiting until profit reaches 1Q/s');\\n    while (ns.corporation.getDivision(TOBACCO_DIV_NAME).lastCycleRevenue < 1e18) {\\n        await cycleManager.waitForCycle();\\n        makeUpgrades(ns, false);\\n    }\\n    ns.print('Using restaurants to go to the moon');\\n    for (let i = 0; i < nRestaurantDivisions; i++) {\\n        const divName = getRestaurantDivision(i);\\n        ns.corporation.makeProduct(divName, CITIES.SECTOR_12, RESTAURANT_NAME, PRODUCT_INVESTMENT, PRODUCT_INVESTMENT);\\n        ns.corporation.setAutoJobAssignment(divName, CITIES.SECTOR_12, EMPLOYEE_POSITIONS.R_AND_D, 0);\\n    }\\n    await cycleManager.waitForCycle();\\n    for (let i = 0; i < nRestaurantDivisions; i++) {\\n        const divName = getRestaurantDivision(i);\\n        const thirdEmployees = Math.round(N_EMPLOYEES / 3);\\n        ns.corporation.setAutoJobAssignment(divName, CITIES.SECTOR_12, EMPLOYEE_POSITIONS.OPERATIONS, thirdEmployees);\\n        ns.corporation.setAutoJobAssignment(divName, CITIES.SECTOR_12, EMPLOYEE_POSITIONS.ENGINEER, thirdEmployees);\\n        ns.corporation.setAutoJobAssignment(divName, CITIES.SECTOR_12, EMPLOYEE_POSITIONS.MANAGEMENT, thirdEmployees);\\n    }\\n    ns.print(`Waiting for product developments`);\\n    while ([...new Array(nRestaurantDivisions)].some((_, i) => ns.corporation.getProduct(getRestaurantDivision(i), CITIES.SECTOR_12, RESTAURANT_NAME).developmentProgress < 100)) {\\n        await cycleManager.waitForCycle();\\n    }\\n    ns.print('Activating Market-TA.II');\\n    for (let i = 0; i < nRestaurantDivisions; i++) {\\n        ns.corporation.setProductMarketTA2(getRestaurantDivision(i), RESTAURANT_NAME, true);\\n    }\\n    ns.print(`Buying production boosting materials`);\\n    for (const [divName, cityName] of getDivisionsAndCities(ns, [\\n        INDUSTRIES.RESTAURANT,\\n    ])) {\\n        ns.corporation.buyMaterial(divName, cityName, MATERIALS.REAL_ESTATE, TOBACCO_REAL_ESTATE / 10);\\n        ns.corporation.buyMaterial(divName, cityName, MATERIALS.ROBOTS, TOBACCO_ROBOTS / 10);\\n    }\\n    await cycleManager.waitForCycle();\\n    for (const [divName, cityName] of getDivisionsAndCities(ns, [\\n        INDUSTRIES.RESTAURANT,\\n    ])) {\\n        ns.corporation.buyMaterial(divName, cityName, MATERIALS.REAL_ESTATE, 0);\\n        ns.corporation.buyMaterial(divName, cityName, MATERIALS.ROBOTS, 0);\\n    }\\n    ns.print('Reassigning employees');\\n    for (const [divName, cityName] of getDivisionsAndCities(ns, [\\n        INDUSTRIES.RESTAURANT,\\n    ])) {\\n        for (const position of Object.values(EMPLOYEE_POSITIONS)) {\\n            if (position !== 'Unassigned') {\\n                ns.corporation.setAutoJobAssignment(divName, cityName, position, 0);\\n            }\\n        }\\n    }\\n    await cycleManager.waitForCycle();\\n    for (const [divName, cityName] of getDivisionsAndCities(ns, [\\n        INDUSTRIES.RESTAURANT,\\n    ])) {\\n        const fourthEmployees = Math.round(N_EMPLOYEES / 4);\\n        ns.corporation.setAutoJobAssignment(divName, cityName, EMPLOYEE_POSITIONS.OPERATIONS, fourthEmployees);\\n        ns.corporation.setAutoJobAssignment(divName, cityName, EMPLOYEE_POSITIONS.ENGINEER, fourthEmployees);\\n        ns.corporation.setAutoJobAssignment(divName, cityName, EMPLOYEE_POSITIONS.MANAGEMENT, fourthEmployees);\\n        ns.corporation.setAutoJobAssignment(divName, cityName, EMPLOYEE_POSITIONS.BUSINESS, fourthEmployees);\\n    }\\n    const offer = ns.corporation.getInvestmentOffer().funds;\\n    ns.print(`Accepting 3rd offer (${ns.formatNumber(offer)})`);\\n    ns.corporation.acceptInvestmentOffer();\\n    ns.print('Buying all possible Wilson upgrades');\\n    while (ns.corporation.getUpgradeLevelCost(UPGRADES.WILSON_ANALYTICS) <=\\n        ns.corporation.getCorporation().funds) {\\n        ns.corporation.levelUpgrade(UPGRADES.WILSON_ANALYTICS);\\n    }\\n    for (let i = 0; i < nRestaurantDivisions; i++) {\\n        ns.print(`Launching restaurant ${i}`);\\n        const divName = getRestaurantDivision(i);\\n        for (const cityName of CITY_NAMES) {\\n            if (i > 0) {\\n                ns.corporation.cancelExportMaterial(AGRICULTURE_DIV_NAME, cityName, getRestaurantDivision(i - 1), cityName, MATERIALS.FOOD);\\n            }\\n            ns.corporation.exportMaterial(AGRICULTURE_DIV_NAME, cityName, divName, cityName, MATERIALS.FOOD, 500);\\n            ns.corporation.buyMaterial(divName, cityName, MATERIALS.WATER, 500);\\n        }\\n        const wilsonCost = ns.corporation.getUpgradeLevelCost(UPGRADES.WILSON_ANALYTICS);\\n        while (wilsonCost > ns.corporation.getCorporation().funds) {\\n            while (ns.corporation.getHireAdVertCost(divName) <\\n                Math.min(wilsonCost, ns.corporation.getCorporation().funds)) {\\n                ns.corporation.hireAdVert(divName);\\n            }\\n            await cycleManager.waitForCycle();\\n        }\\n        while (ns.corporation.getUpgradeLevelCost(UPGRADES.WILSON_ANALYTICS) <=\\n            ns.corporation.getCorporation().funds) {\\n            ns.corporation.levelUpgrade(UPGRADES.WILSON_ANALYTICS);\\n        }\\n    }\\n    ns.print('Reaching the moon');\\n    const lastDivName = getRestaurantDivision(nRestaurantDivisions - 1);\\n    while (ns.corporation.getDivision(lastDivName).awareness < 1.79e308) {\\n        while (ns.corporation.getHireAdVertCost(lastDivName) <\\n            ns.corporation.getCorporation().funds) {\\n            ns.corporation.hireAdVert(lastDivName);\\n        }\\n        await cycleManager.waitForCycle();\\n    }\\n    ns.print('Welcome to the moon');\\n};\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91bmQtMy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvcnBvcmF0aW9ucy9yb3VuZC0zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7OztHQUtHO0FBSUgsT0FBTyxFQUNMLE1BQU0sRUFDTixVQUFVLEVBQ1Ysa0JBQWtCLEVBQ2xCLFVBQVUsRUFDVixTQUFTLEVBQ1QsVUFBVSxFQUNWLFdBQVcsRUFDWCxRQUFRLEdBQ1QsTUFBTSxnQ0FBZ0MsQ0FBQTtBQUN2QyxPQUFPLEVBQ0wscUJBQXFCLEVBQ3JCLGlCQUFpQixFQUNqQixlQUFlLEVBQ2YsWUFBWSxFQUNaLHFCQUFxQixFQUNyQixhQUFhLEVBQ2IsdUJBQXVCLEVBQ3ZCLGNBQWMsR0FDZixNQUFNLDRCQUE0QixDQUFBO0FBQ25DLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQTtBQUVqRSxNQUFNLGdCQUFnQixHQUFHLFdBQVcsQ0FBQTtBQUNwQyxNQUFNLG9CQUFvQixHQUFHLFdBQVcsQ0FBQTtBQUN4QyxNQUFNLGFBQWEsR0FBRyxTQUFTLENBQUE7QUFDL0IsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFBO0FBQ3ZCLE1BQU0sYUFBYSxHQUFHLEtBQUssQ0FBQTtBQUMzQixNQUFNLGlCQUFpQixHQUFHLEVBQUUsQ0FBQTtBQUM1QixNQUFNLHVCQUF1QixHQUFHLEdBQUcsQ0FBQTtBQUNuQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQTtBQUM1QixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUE7QUFDeEIsTUFBTSxtQkFBbUIsR0FBRyxHQUFHLENBQUE7QUFDL0IsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFBO0FBQzNCLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFBO0FBQzdCLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFBO0FBQzdCLE1BQU0scUJBQXFCLEdBQUcsS0FBSyxDQUFBO0FBQ25DLE1BQU0sU0FBUyxHQUFH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\",\"filename\":\"scripts/corporations/round-3.js\",\"server\":\"home\"}}],[\"scripts/corporations/cycle-manager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { waitForCycle } from 'scripts/corporations/utils';\\nexport class CycleManager {\\n    ns;\\n    recurrentFunctions;\\n    constructor(ns) {\\n        this.ns = ns;\\n        this.recurrentFunctions = [];\\n    }\\n    registerRecurrentFunction(fn) {\\n        this.recurrentFunctions.push(fn);\\n    }\\n    unregisterRecurrentFunction(fn) {\\n        this.recurrentFunctions = this.recurrentFunctions.filter((rf) => rf !== fn);\\n    }\\n    async waitForCycle() {\\n        await waitForCycle(this.ns);\\n        this.recurrentFunctions.forEach((fn) => fn());\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3ljbGUtbWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvcnBvcmF0aW9ucy9jeWNsZS1tYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQTtBQUV6RCxNQUFNLE9BQU8sWUFBWTtJQUN2QixFQUFFLENBQUk7SUFDTixrQkFBa0IsQ0FBZTtJQUVqQyxZQUFZLEVBQU07UUFDaEIsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUE7UUFDWixJQUFJLENBQUMsa0JBQWtCLEdBQUcsRUFBRSxDQUFBO0lBQzlCLENBQUM7SUFFRCx5QkFBeUIsQ0FBQyxFQUFhO1FBQ3JDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDbEMsQ0FBQztJQUVELDJCQUEyQixDQUFDLEVBQWE7UUFDdkMsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQTtJQUM3RSxDQUFDO0lBRUQsS0FBSyxDQUFDLFlBQVk7UUFDaEIsTUFBTSxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBQzNCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDL0MsQ0FBQztDQUNGIn0=\",\"filename\":\"scripts/corporations/cycle-manager.js\",\"server\":\"home\"}}],[\"scripts/buy-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const [level, name] = ns.args;\\n    if (!level || typeof level !== 'number') {\\n        ns.tprint('Invalid level argument');\\n        ns.exit();\\n    }\\n    if (!name || typeof name !== 'string') {\\n        ns.tprint('Missing or invalid server name');\\n        ns.exit();\\n    }\\n    const ram = Math.pow(2, level);\\n    const price = ns.getPurchasedServerCost(ram);\\n    await ns\\n        .prompt(`Do you want to purchase a ${ns.formatRam(ram)} server for ${ns.formatNumber(price)}?`)\\n        .then((choice) => {\\n        if (choice) {\\n            ns.purchaseServer(name, ram);\\n        }\\n    });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV5LXNlcnZlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL2J1eS1zZXJ2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixNQUFNLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUE7SUFFN0IsSUFBSSxDQUFDLEtBQUssSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7UUFDdkMsRUFBRSxDQUFDLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFBO1FBQ25DLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtLQUNWO0lBRUQsSUFBSSxDQUFDLElBQUksSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLEVBQUU7UUFDckMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFBO1FBQzNDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtLQUNWO0lBRUQsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUE7SUFDOUIsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBRTVDLE1BQU0sRUFBRTtTQUNMLE1BQU0sQ0FDTCw2QkFBNkIsRUFBRSxDQUFDLFNBQVMsQ0FDdkMsR0FBRyxDQUNKLGVBQWUsRUFBRSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUMxQztTQUNBLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFO1FBQ2YsSUFBSSxNQUFNLEVBQUU7WUFDVixFQUFFLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQTtTQUM3QjtJQUNILENBQUMsQ0FBQyxDQUFBO0FBQ04sQ0FBQyJ9\",\"filename\":\"scripts/buy-server.js\",\"server\":\"home\"}}],[\"scripts/corporations/late-game.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\n * Script to run after or right before 3rd round of investment.\\n * Produces new products, expands development city and hire AdVerts.\\n */\\nimport { CITIES, EMPLOYEE_POSITIONS, INDUSTRIES, } from 'scripts/corporations/constants';\\nimport { buyTeaAndThrowParties, waitForCycle } from 'scripts/corporations/utils';\\nconst TOBACCO_DIV_NAME = 'Nepsmokes';\\nconst PRODUCT_NAME = 'Neparette';\\nconst SHOULD_DISCONTINUE_TO_DEVELOP = true;\\nconst MAX_PRODUCTS = 5;\\nconst getProductName = (version) => `${PRODUCT_NAME} ${version}`;\\nlet lastInvestment = 13.31e21;\\nconst createProductManager = (ns) => {\\n    const inDevelopment = new Set();\\n    const develop = (version) => {\\n        const name = getProductName(version);\\n        lastInvestment = Math.max(lastInvestment, ns.corporation.getCorporation().funds / 10);\\n        ns.print(`Investing ${ns.formatNumber(lastInvestment)} for development of ${name}`);\\n        ns.corporation.makeProduct(TOBACCO_DIV_NAME, CITIES.SECTOR_12, name, lastInvestment, lastInvestment);\\n        inDevelopment.add(name);\\n    };\\n    const discontinue = (version) => {\\n        const discontinued = getProductName(version);\\n        ns.print(`Discontinuing ${discontinued}`);\\n        ns.corporation.discontinueProduct(TOBACCO_DIV_NAME, discontinued);\\n    };\\n    const curProducts = ns.corporation.getDivision(TOBACCO_DIV_NAME).products;\\n    let curVersion = 1 + Math.max(...curProducts.map((name) => parseInt(name.split(' ')[1])));\\n    for (let i = curProducts.length; i < MAX_PRODUCTS; i++) {\\n        develop(curVersion++);\\n    }\\n    for (const name of curProducts) {\\n        const product = ns.corporation.getProduct(TOBACCO_DIV_NAME, CITIES.SECTOR_12, name);\\n        if (product.developmentProgress < 100) {\\n            inDevelopment.add(name);\\n        }\\n    }\\n    if (inDevelopment.size === 0 && SHOULD_DISCONTINUE_TO_DEVELOP) {\\n        discontinue(curVersion - MAX_PRODUCTS);\\n        develop(curVersion++);\\n    }\\n    return () => {\\n        for (const name of inDevelopment) {\\n            const product = ns.corporation.getProduct(TOBACCO_DIV_NAME, CITIES.SECTOR_12, name);\\n            if (product.developmentProgress === 100) {\\n                inDevelopment.delete(name);\\n                ns.print(`Finished developing ${name}`);\\n                ns.print(`Activating Market-TA.II for ${name}`);\\n                ns.corporation.setProductMarketTA2(TOBACCO_DIV_NAME, name, true);\\n                if (inDevelopment.size === 0 && SHOULD_DISCONTINUE_TO_DEVELOP) {\\n                    discontinue(curVersion - MAX_PRODUCTS);\\n                    develop(curVersion++);\\n                }\\n            }\\n        }\\n    };\\n};\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    const manageProducts = createProductManager(ns);\\n    while (true) {\\n        await waitForCycle(ns);\\n        buyTeaAndThrowParties(ns, [\\n            INDUSTRIES.TOBACCO,\\n            INDUSTRIES.AGRICULTURE,\\n            INDUSTRIES.CHEMICAL,\\n            INDUSTRIES.RESTAURANT,\\n        ]);\\n        manageProducts();\\n        while (true) {\\n            const expandCost = ns.corporation.getOfficeSizeUpgradeCost(TOBACCO_DIV_NAME, CITIES.SECTOR_12, 15);\\n            const adVertCost = ns.corporation.getHireAdVertCost(TOBACCO_DIV_NAME);\\n            const funds = ns.corporation.getCorporation().funds;\\n            if (expandCost <= adVertCost &&\\n                expandCost <= funds - 2 * lastInvestment) {\\n                ns.print('Expanding office');\\n                ns.corporation.upgradeOfficeSize(TOBACCO_DIV_NAME, CITIES.SECTOR_12, 15);\\n                for (let i = 0; i < 5; i++) {\\n                    ns.corporation.hireEmployee(TOBACCO_DIV_NAME, CITIES.SECTOR_12, EMPLOYEE_POSITIONS.OPERATIONS);\\n                    ns.corporation.hireEmployee(TOBACCO_DIV_NAME, CITIES.SECTOR_12, EMPLOYEE_POSITIONS.ENGINEER);\\n                    ns.corporation.hireEmployee(TOBACCO_DIV_NAME, CITIES.SECTOR_12, EMPLOYEE_POSITIONS.MANAGEMENT);\\n                }\\n            }\\n            else if (adVertCost <= expandCost &&\\n                adVertCost <= funds - 2 * lastInvestment) {\\n                ns.print('Hiring AdVert');\\n                ns.corporation.hireAdVert(TOBACCO_DIV_NAME);\\n            }\\n            else {\\n                break;\\n            }\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF0ZS1nYW1lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29ycG9yYXRpb25zL2xhdGUtZ2FtZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7QUFJSCxPQUFPLEVBQ0wsTUFBTSxFQUNOLGtCQUFrQixFQUNsQixVQUFVLEdBQ1gsTUFBTSxnQ0FBZ0MsQ0FBQTtBQUN2QyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsWUFBWSxFQUFFLE1BQU0sNEJBQTRCLENBQUE7QUFFaEYsTUFBTSxnQkFBZ0IsR0FBRyxXQUFXLENBQUE7QUFDcEMsTUFBTSxZQUFZLEdBQUcsV0FBVyxDQUFBO0FBQ2hDLE1BQU0sNkJBQTZCLEdBQUcsSUFBSSxDQUFBO0FBQzFDLE1BQU0sWUFBWSxHQUFHLENBQUMsQ0FBQTtBQUV0QixNQUFNLGNBQWMsR0FBRyxDQUFDLE9BQWUsRUFBRSxFQUFFLENBQUMsR0FBRyxZQUFZLElBQUksT0FBTyxFQUFFLENBQUE7QUFFeEUsSUFBSSxjQUFjLEdBQUcsUUFBUSxDQUFBO0FBRTdCLE1BQU0sb0JBQW9CLEdBQUcsQ0FBQyxFQUFNLEVBQUUsRUFBRTtJQUN0QyxNQUFNLGFBQWEsR0FBRyxJQUFJLEdBQUcsRUFBVSxDQUFBO0lBRXZDLE1BQU0sT0FBTyxHQUFHLENBQUMsT0FBZSxFQUFFLEVBQUU7UUFDbEMsTUFBTSxJQUFJLEdBQUcsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBRXBDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUN2QixjQUFjLEVBQ2QsRUFBRSxDQUFDLFdBQVcsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUMzQyxDQUFBO1FBRUQsRUFBRSxDQUFDLEtBQUssQ0FDTixhQUFhLEVBQUUsQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLHVCQUF1QixJQUFJLEVBQUUsQ0FDMUUsQ0FBQTtRQUVELEVBQUUsQ0FBQyxXQUFXLENBQUMsV0FBVyxD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\",\"filename\":\"scripts/corporations/late-game.js\",\"server\":\"home\"}}],[\"scripts/tmp.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CITIES, CITY_NAMES, EMPLOYEE_POSITIONS, INDUSTRIES, MATERIALS, } from 'scripts/corporations/constants';\\nimport { expandWarehouse, hireEmployees } from 'scripts/corporations/utils';\\nconst WAREHOUSE_CAP = 50400;\\nexport async function main(ns) {\\n    for (let i = 0; i < 14; i++) {\\n        const divName = `Nepfoods ${i + 3}`;\\n        ns.corporation.expandIndustry(INDUSTRIES.RESTAURANT, divName);\\n        for (const city of CITY_NAMES) {\\n            if (city !== CITIES.SECTOR_12) {\\n                ns.corporation.expandCity(divName, city);\\n                ns.corporation.purchaseWarehouse(divName, city);\\n            }\\n            expandWarehouse(ns, divName, city, WAREHOUSE_CAP);\\n            ns.corporation.buyMaterial(divName, city, MATERIALS.REAL_ESTATE, 1e6);\\n            ns.corporation.buyMaterial(divName, city, MATERIALS.AI_CORES, 1e5);\\n            ns.corporation.buyMaterial(divName, city, MATERIALS.ROBOTS, 1e4);\\n            hireEmployees(ns, divName, city, 303);\\n            if (city !== CITIES.SECTOR_12) {\\n                ns.corporation.setAutoJobAssignment(divName, city, EMPLOYEE_POSITIONS.R_AND_D, 303);\\n            }\\n            else {\\n                ns.corporation.setAutoJobAssignment(divName, city, EMPLOYEE_POSITIONS.OPERATIONS, 101);\\n                ns.corporation.setAutoJobAssignment(divName, city, EMPLOYEE_POSITIONS.ENGINEER, 101);\\n                ns.corporation.setAutoJobAssignment(divName, city, EMPLOYEE_POSITIONS.MANAGEMENT, 101);\\n            }\\n        }\\n        ns.corporation.makeProduct(divName, CITIES.SECTOR_12, 'Nepmeals', 1e21, 1e21);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG1wLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NjcmlwdHMvdG1wLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFDTCxNQUFNLEVBQ04sVUFBVSxFQUNWLGtCQUFrQixFQUNsQixVQUFVLEVBQ1YsU0FBUyxHQUNWLE1BQU0sZ0NBQWdDLENBQUE7QUFDdkMsT0FBTyxFQUFFLGVBQWUsRUFBRSxhQUFhLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQTtBQUUzRSxNQUFNLGFBQWEsR0FBRyxLQUFLLENBQUE7QUFFM0IsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzNCLE1BQU0sT0FBTyxHQUFHLFlBQVksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFBO1FBQ25DLEVBQUUsQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUE7UUFFN0QsS0FBSyxNQUFNLElBQUksSUFBSSxVQUFVLEVBQUU7WUFDN0IsSUFBSSxJQUFJLEtBQUssTUFBTSxDQUFDLFNBQVMsRUFBRTtnQkFDN0IsRUFBRSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFBO2dCQUN4QyxFQUFFLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQTthQUNoRDtZQUVELGVBQWUsQ0FBQyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQTtZQUNqRCxFQUFFLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUE7WUFDckUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFBO1lBQ2xFLEVBQUUsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsU0FBUyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQTtZQUVoRSxhQUFhLENBQUMsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUE7WUFDckMsSUFBSSxJQUFJLEtBQUssTUFBTSxDQUFDLFNBQVMsRUFBRTtnQkFDN0IsRUFBRSxDQUFDLFdBQVcsQ0FBQyxvQkFBb0IsQ0FDakMsT0FBTyxFQUNQLElBQUksRUFDSixrQkFBa0IsQ0FBQyxPQUFPLEVBQzFCLEdBQUcsQ0FDSixDQUFBO2FBQ0Y7aUJBQU07Z0JBQ0wsRUFBRSxDQUFDLFdBQVcsQ0FBQyxvQkFBb0IsQ0FDakMsT0FBTyxFQUNQLElBQUksRUFDSixrQkFBa0IsQ0FBQyxVQUFVLEVBQzdCLEdBQUcsQ0FDSixDQUFBO2dCQUNELEVBQUUsQ0FBQyxXQUFXLENBQUMsb0JBQW9CLENBQ2pDLE9BQU8sRUFDUCxJQUFJLEVBQ0osa0JBQWtCLENBQUMsUUFBUSxFQUMzQixHQUFHLENBQ0osQ0FBQTtnQkFDRCxFQUFFLENBQUMsV0FBVyxDQUFDLG9CQUFvQixDQUNqQyxPQUFPLEVBQ1AsSUFBSSxFQUNKLGtCQUFrQixDQUFDLFVBQVUsRUFDN0IsR0FBRyxDQUNKLENBQUE7YUFDRjtTQUNGO1FBRUQsRUFBRSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQ3hCLE9BQU8sRUFDUCxNQUFNLENBQUMsU0FBUyxFQUNoQixVQUFVLEVBQ1YsSUFBSSxFQUNKLElBQUksQ0FDTCxDQUFBO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"scripts/tmp.js\",\"server\":\"home\"}}],[\"scripts/corporations/round-3-old.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CITIES, CITY_NAMES, EMPLOYEE_POSITIONS, INDUSTRIES, MATERIALS, RESEARCHES, UNLOCKABLES, UPGRADES, } from 'scripts/corporations/constants';\\nimport { buyTeaAndThrowParties, expandToAllCities, expandWarehouse, getDivisionsAndCities, hireEmployees, maximizeMoraleAndEnergy, upgradeToLevel, } from 'scripts/corporations/utils';\\nimport { CycleManager } from 'scripts/corporations/cycle-manager';\\nconst TOBACCO_DIV_NAME = 'Nepsmokes';\\nconst AGRICULTURE_DIV_NAME = 'Nepplants';\\nconst CHEM_DIV_NAME = 'Nepchem';\\nconst N_EMPLOYEES = 204;\\nconst WAREHOUSE_CAP = 24000;\\nconst WILSON_ANALYTICS_LVL = 20;\\nconst FOCUS_WIRES_LVL = 60;\\nconst NEURAL_ACCELERATORS_LVL = 60;\\nconst PROJECT_INSIGHT_LVL = 20;\\nconst NNII_LVL = 60;\\nconst SMART_FACTORIES_LVL = 60;\\nconst SMART_STORAGE_LVL = 50;\\nconst AGRICULTURE_REAL_ESTATE = 3e6;\\nconst CHEM_REAL_ESTATE = 1e6;\\nconst CHEM_ROBOTS = 30e3;\\nconst TOBACCO_REAL_ESTATE = 1e6;\\nconst TOBACCO_ROBOTS = 30e3;\\nconst PLANT_PRODUCTION = 3800;\\nconst HI_TECH_RESEARCH = 5000;\\nconst MARKET_TA_II_RESEARCH = 70000;\\nconst PRODUCT_NAME = 'Neparette';\\nconst PRODUCT_INVESTMENT = 10e9;\\nconst LOOP_INDUSTRIES = [\\n    { industry: INDUSTRIES.AGRICULTURE, divisionName: AGRICULTURE_DIV_NAME },\\n    { industry: INDUSTRIES.CHEMICAL, divisionName: CHEM_DIV_NAME },\\n];\\nconst ALL_INDUSTRIES = [\\n    ...LOOP_INDUSTRIES,\\n    { industry: INDUSTRIES.TOBACCO, divisionName: TOBACCO_DIV_NAME },\\n];\\nconst ALL_INDUSTRY_NAMES = ALL_INDUSTRIES.map((industry) => industry.industry);\\nconst LOOP_INDUSTRY_NAMES = LOOP_INDUSTRIES.map((industry) => industry.industry);\\nconst getProductName = (version) => `${PRODUCT_NAME} ${version}`;\\nconst createProductManager = (ns) => {\\n    let curVersion = 0;\\n    const inDevelopment = new Set();\\n    const develop = (version) => {\\n        const name = getProductName(version);\\n        ns.print(`Starting development of ${name}`);\\n        ns.corporation.makeProduct(TOBACCO_DIV_NAME, CITIES.SECTOR_12, name, PRODUCT_INVESTMENT, PRODUCT_INVESTMENT);\\n        inDevelopment.add(name);\\n    };\\n    for (let i = 0; i < 3; i++) {\\n        develop(curVersion++);\\n    }\\n    return () => {\\n        for (const name of inDevelopment) {\\n            const product = ns.corporation.getProduct(TOBACCO_DIV_NAME, CITIES.SECTOR_12, name);\\n            if (product.developmentProgress === 100) {\\n                inDevelopment.delete(name);\\n                ns.print(`Finished developing ${name}`);\\n                ns.print(`Activating Market-TA.II for ${name}`);\\n                ns.corporation.setProductMarketTA2(TOBACCO_DIV_NAME, name, true);\\n                if (inDevelopment.size === 0) {\\n                    const discontinued = getProductName(curVersion - 3);\\n                    ns.print(`Discontinuing ${discontinued}`);\\n                    ns.corporation.discontinueProduct(TOBACCO_DIV_NAME, discontinued);\\n                    develop(curVersion++);\\n                }\\n            }\\n        }\\n    };\\n};\\nexport const doit = async (ns) => {\\n    const cycleManager = new CycleManager(ns);\\n    while (ns.corporation.getCorporation().divisions.length > 0) {\\n        ns.print('Please sell all existing divisions');\\n        await ns.sleep(2000);\\n    }\\n    ns.print('Creating Tobacco, Agriculture and Chemical divisions');\\n    for (const { industry, divisionName } of ALL_INDUSTRIES) {\\n        ns.corporation.expandIndustry(industry, divisionName);\\n    }\\n    ns.print('Expanding divisions to all cities');\\n    for (const { divisionName } of ALL_INDUSTRIES) {\\n        expandToAllCities(ns, divisionName);\\n    }\\n    ns.print('Hiring employees');\\n    for (const [divisionName, cityName] of getDivisionsAndCities(ns, ALL_INDUSTRY_NAMES)) {\\n        hireEmployees(ns, divisionName, cityName, N_EMPLOYEES);\\n    }\\n    ns.print('Assigning all Tobacco employees to R&D');\\n    for (const cityName of CITY_NAMES) {\\n        ns.corporation.setAutoJobAssignment(TOBACCO_DIV_NAME, cityName, EMPLOYEE_POSITIONS.R_AND_D, N_EMPLOYEES);\\n    }\\n    ns.print('Assigning Agriculture and Chemical employees to Operations, Engineer, Management and R&D');\\n    const loopPositions = [\\n        EMPLOYEE_POSITIONS.OPERATIONS,\\n        EMPLOYEE_POSITIONS.ENGINEER,\\n        EMPLOYEE_POSITIONS.MANAGEMENT,\\n        EMPLOYEE_POSITIONS.R_AND_D,\\n    ];\\n    for (const [divisionName, cityName] of getDivisionsAndCities(ns, LOOP_INDUSTRY_NAMES)) {\\n        for (const position of loopPositions) {\\n            ns.corporation.setAutoJobAssignment(divisionName, cityName, position, Math.round(N_EMPLOYEES / 4));\\n        }\\n    }\\n    ns.print('Preparing restaurants for round 4');\\n    for (let i = 0; i < 17; i++) {\\n        const divName = `Nepfoods ${i}`;\\n        ns.corporation.expandIndustry(INDUSTRIES.RESTAURANT, divName);\\n        hireEmployees(ns, divName, CITIES.SECTOR_12, N_EMPLOYEES);\\n        const employeesPerPosition = Math.round(N_EMPLOYEES / 3);\\n        ns.corporation.setAutoJobAssignment(divName, CITIES.SECTOR_12, EMPLOYEE_POSITIONS.OPERATIONS, employeesPerPosition);\\n        ns.corporation.setAutoJobAssignment(divName, CITIES.SECTOR_12, EMPLOYEE_POSITIONS.ENGINEER, employeesPerPosition);\\n        ns.corporation.setAutoJobAssignment(divName, CITIES.SECTOR_12, EMPLOYEE_POSITIONS.MANAGEMENT, employeesPerPosition);\\n        ns.corporation.makeProduct(divName, CITIES.SECTOR_12, 'Nepmeals', PRODUCT_INVESTMENT, PRODUCT_INVESTMENT);\\n        expandToAllCities(ns, divName);\\n        for (const cityName of CITY_NAMES) {\\n            if (cityName === CITIES.SECTOR_12) {\\n                continue;\\n            }\\n            hireEmployees(ns, divName, cityName, N_EMPLOYEES);\\n            ns.corporation.setAutoJobAssignment(divName, cityName, EMPLOYEE_POSITIONS.R_AND_D, N_EMPLOYEES);\\n        }\\n    }\\n    cycleManager.registerRecurrentFunction(() => buyTeaAndThrowParties(ns, [INDUSTRIES.RESTAURANT]));\\n    ns.print('Buying export unlockable');\\n    // For some reason the script is able to set export without this unlockable.\\n    // Must be a bug (v2.3.1).\\n    ns.corporation.purchaseUnlock(UNLOCKABLES.EXPORT);\\n    ns.print('Leveling upgrades');\\n    upgradeToLevel(ns, UPGRADES.WILSON_ANALYTICS, WILSON_ANALYTICS_LVL);\\n    upgradeToLevel(ns, UPGRADES.FOCUS_WIRES, FOCUS_WIRES_LVL);\\n    upgradeToLevel(ns, UPGRADES.NEURAL_ACCELERATORS, NEURAL_ACCELERATORS_LVL);\\n    upgradeToLevel(ns, UPGRADES.PROJECT_INSIGHT, PROJECT_INSIGHT_LVL);\\n    upgradeToLevel(ns, UPGRADES.NNII, NNII_LVL);\\n    upgradeToLevel(ns, UPGRADES.SMART_FACTORIES, SMART_FACTORIES_LVL);\\n    upgradeToLevel(ns, UPGRADES.SMART_STORAGE, SMART_STORAGE_LVL);\\n    ns.print('Maximizing employee morale and energy');\\n    await maximizeMoraleAndEnergy(ns, ALL_INDUSTRY_NAMES);\\n    cycleManager.registerRecurrentFunction(() => buyTeaAndThrowParties(ns, ALL_INDUSTRY_NAMES));\\n    ns.print('Expanding warehouses');\\n    for (const [divisionName, cityName] of getDivisionsAndCities(ns, ALL_INDUSTRY_NAMES)) {\\n        expandWarehouse(ns, divisionName, cityName, WAREHOUSE_CAP);\\n    }\\n    ns.print('Setting up loop exports');\\n    for (const cityName of CITY_NAMES) {\\n        // Buy initial chemicals to start agriculture for 2 cycles\\n        ns.corporation.buyMaterial(AGRICULTURE_DIV_NAME, cityName, MATERIALS.CHEMICALS, (2 * PLANT_PRODUCTION) / 5);\\n        // Production boosting materials\\n        ns.corporation.buyMaterial(TOBACCO_DIV_NAME, cityName, MATERIALS.REAL_ESTATE, TOBACCO_REAL_ESTATE / 10);\\n        ns.corporation.buyMaterial(TOBACCO_DIV_NAME, cityName, MATERIALS.ROBOTS, TOBACCO_ROBOTS / 10);\\n        ns.corporation.buyMaterial(AGRICULTURE_DIV_NAME, cityName, MATERIALS.REAL_ESTATE, AGRICULTURE_REAL_ESTATE / 10);\\n        ns.corporation.buyMaterial(CHEM_DIV_NAME, cityName, MATERIALS.REAL_ESTATE, CHEM_REAL_ESTATE / 10);\\n        ns.corporation.buyMaterial(CHEM_DIV_NAME, cityName, MATERIALS.ROBOTS, CHEM_ROBOTS / 10);\\n    }\\n    await cycleManager.waitForCycle();\\n    for (const cityName of CITY_NAMES) {\\n        ns.corporation.buyMaterial(AGRICULTURE_DIV_NAME, cityName, MATERIALS.CHEMICALS, 0);\\n        ns.corporation.buyMaterial(TOBACCO_DIV_NAME, cityName, MATERIALS.REAL_ESTATE, 0);\\n        ns.corporation.buyMaterial(TOBACCO_DIV_NAME, cityName, MATERIALS.ROBOTS, 0);\\n        ns.corporation.buyMaterial(AGRICULTURE_DIV_NAME, cityName, MATERIALS.REAL_ESTATE, 0);\\n        ns.corporation.buyMaterial(CHEM_DIV_NAME, cityName, MATERIALS.REAL_ESTATE, 0);\\n        ns.corporation.buyMaterial(CHEM_DIV_NAME, cityName, MATERIALS.ROBOTS, 0);\\n    }\\n    for (const cityName of CITY_NAMES) {\\n        ns.corporation.buyMaterial(AGRICULTURE_DIV_NAME, cityName, MATERIALS.WATER, PLANT_PRODUCTION / 2);\\n        ns.corporation.buyMaterial(CHEM_DIV_NAME, cityName, MATERIALS.WATER, PLANT_PRODUCTION / 10);\\n        // Setup exports\\n        ns.corporation.exportMaterial(AGRICULTURE_DIV_NAME, cityName, CHEM_DIV_NAME, cityName, MATERIALS.PLANTS, PLANT_PRODUCTION / 5);\\n        ns.corporation.exportMaterial(CHEM_DIV_NAME, cityName, AGRICULTURE_DIV_NAME, cityName, MATERIALS.CHEMICALS, PLANT_PRODUCTION / 5);\\n        // Sell leftovers\\n        ns.corporation.sellMaterial(AGRICULTURE_DIV_NAME, cityName, MATERIALS.FOOD, 'MAX', '0');\\n        ns.corporation.sellMaterial(AGRICULTURE_DIV_NAME, cityName, MATERIALS.PLANTS, 'MAX', '0');\\n    }\\n    await cycleManager.waitForCycle();\\n    ns.print('Waiting for Hi-Tech research in Tobacco');\\n    while (true) {\\n        if (ns.corporation.getDivision(TOBACCO_DIV_NAME).researchPoints >\\n            HI_TECH_RESEARCH) {\\n            ns.corporation.research(TOBACCO_DIV_NAME, RESEARCHES.HI_TECH);\\n            ns.print('Purchased Hi-Tech research in Tobacco');\\n            break;\\n        }\\n        await cycleManager.waitForCycle();\\n    }\\n    ns.print('Waiting for Hi-Tech research in loop divisions');\\n    while (true) {\\n        if (ns.corporation.getDivision(AGRICULTURE_DIV_NAME).researchPoints >\\n            HI_TECH_RESEARCH &&\\n            ns.corporation.getDivision(CHEM_DIV_NAME).researchPoints >\\n                HI_TECH_RESEARCH) {\\n            ns.corporation.research(AGRICULTURE_DIV_NAME, RESEARCHES.HI_TECH);\\n            ns.corporation.research(CHEM_DIV_NAME, RESEARCHES.HI_TECH);\\n            ns.print('Purchased Hi-Tech research in loop divisions');\\n            break;\\n        }\\n        await cycleManager.waitForCycle();\\n    }\\n    ns.print('Waiting for Market-TA.II in Tobacco');\\n    while (true) {\\n        if (ns.corporation.getDivision(TOBACCO_DIV_NAME).researchPoints >\\n            MARKET_TA_II_RESEARCH) {\\n            ns.corporation.research(TOBACCO_DIV_NAME, RESEARCHES.MARKET_TA_I);\\n            ns.corporation.research(TOBACCO_DIV_NAME, RESEARCHES.MARKET_TA_II);\\n            ns.print('Purchased Market-TA.II in Tobacco');\\n            break;\\n        }\\n        await cycleManager.waitForCycle();\\n    }\\n    ns.print('Reassigning Tobacco employees');\\n    for (const cityName of CITY_NAMES) {\\n        for (const position of Object.values(EMPLOYEE_POSITIONS)) {\\n            if (position !== 'Unassigned') {\\n                ns.corporation.setAutoJobAssignment(TOBACCO_DIV_NAME, cityName, position, 0);\\n            }\\n        }\\n        await cycleManager.waitForCycle();\\n        if (cityName === CITIES.SECTOR_12) {\\n            const thirdEmployees = Math.round(N_EMPLOYEES / 3);\\n            ns.corporation.setAutoJobAssignment(TOBACCO_DIV_NAME, cityName, EMPLOYEE_POSITIONS.OPERATIONS, thirdEmployees);\\n            ns.corporation.setAutoJobAssignment(TOBACCO_DIV_NAME, cityName, EMPLOYEE_POSITIONS.ENGINEER, thirdEmployees);\\n            ns.corporation.setAutoJobAssignment(TOBACCO_DIV_NAME, cityName, EMPLOYEE_POSITIONS.MANAGEMENT, thirdEmployees);\\n        }\\n        else {\\n            const fourthEmployees = Math.round(N_EMPLOYEES / 4);\\n            ns.corporation.setAutoJobAssignment(TOBACCO_DIV_NAME, cityName, EMPLOYEE_POSITIONS.OPERATIONS, fourthEmployees);\\n            ns.corporation.setAutoJobAssignment(TOBACCO_DIV_NAME, cityName, EMPLOYEE_POSITIONS.ENGINEER, fourthEmployees);\\n            ns.corporation.setAutoJobAssignment(TOBACCO_DIV_NAME, cityName, EMPLOYEE_POSITIONS.MANAGEMENT, fourthEmployees);\\n            ns.corporation.setAutoJobAssignment(TOBACCO_DIV_NAME, cityName, EMPLOYEE_POSITIONS.R_AND_D, fourthEmployees);\\n        }\\n    }\\n    cycleManager.registerRecurrentFunction(createProductManager(ns));\\n    ns.print('Waiting for first product to be completed');\\n    while (ns.corporation.getProduct(TOBACCO_DIV_NAME, CITIES.SECTOR_12, getProductName(0)).developmentProgress < 100) {\\n        await cycleManager.waitForCycle();\\n    }\\n    ns.print('Hiring maximum amount of AdVert in Tobacco');\\n    while (ns.corporation.getCorporation().funds >=\\n        ns.corporation.getHireAdVertCost(TOBACCO_DIV_NAME)) {\\n        ns.corporation.hireAdVert(TOBACCO_DIV_NAME);\\n    }\\n    ns.print('Redirecting all leftover plants to Tobacco');\\n    for (const cityName of CITY_NAMES) {\\n        ns.corporation.exportMaterial(AGRICULTURE_DIV_NAME, cityName, TOBACCO_DIV_NAME, cityName, MATERIALS.PLANTS, `EPROD - ${(PLANT_PRODUCTION / 5).toFixed(6)}`);\\n    }\\n    ns.print('Entering tea party mode');\\n    while (true) {\\n        await cycleManager.waitForCycle();\\n    }\\n};\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91bmQtMy1vbGQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9jb3Jwb3JhdGlvbnMvcm91bmQtMy1vbGQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUNMLE1BQU0sRUFDTixVQUFVLEVBQ1Ysa0JBQWtCLEVBQ2xCLFVBQVUsRUFDVixTQUFTLEVBQ1QsVUFBVSxFQUNWLFdBQVcsRUFDWCxRQUFRLEdBQ1QsTUFBTSxnQ0FBZ0MsQ0FBQTtBQUN2QyxPQUFPLEVBQ0wscUJBQXFCLEVBQ3JCLGlCQUFpQixFQUNqQixlQUFlLEVBQ2YscUJBQXFCLEVBQ3JCLGFBQWEsRUFDYix1QkFBdUIsRUFDdkIsY0FBYyxHQUNmLE1BQU0sNEJBQTRCLENBQUE7QUFDbkMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG9DQUFvQyxDQUFBO0FBRWpFLE1BQU0sZ0JBQWdCLEdBQUcsV0FBVyxDQUFBO0FBQ3BDLE1BQU0sb0JBQW9CLEdBQUcsV0FBVyxDQUFBO0FBQ3hDLE1BQU0sYUFBYSxHQUFHLFNBQVMsQ0FBQTtBQUMvQixNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUE7QUFDdkIsTUFBTSxhQUFhLEdBQUcsS0FBSyxDQUFBO0FBQzNCLE1BQU0sb0JBQW9CLEdBQUcsRUFBRSxDQUFBO0FBQy9CLE1BQU0sZUFBZSxHQUFHLEVBQUUsQ0FBQTtBQUMxQixNQUFNLHVCQUF1QixHQUFHLEVBQUUsQ0FBQTtBQUNsQyxNQUFNLG1CQUFtQixHQUFHLEVBQUUsQ0FBQTtBQUM5QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUE7QUFDbkIsTUFBTSxtQkFBbUIsR0FBRyxFQUFFLENBQUE7QUFDOUIsTUFBTSxpQkFBaUIsR0FBRyxFQUFFLENBQUE7QUFDNUIsTUFBTSx1QkFBdUIsR0FBRyxHQUFHLENBQUE7QUFDbkMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUE7QUFDNUIsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFBO0FBQ3hC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\",\"filename\":\"scripts/corporations/round-3-old.js\",\"server\":\"home\"}}],[\"scripts/infiltration/index.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as BackwardGame from 'scripts/infiltration/backward-game';\\nimport * as BracketGame from 'scripts/infiltration/bracket-game';\\nimport * as BribeGame from 'scripts/infiltration/bribe-game';\\nimport * as CheatCodeGame from 'scripts/infiltration/cheat-code-game';\\nimport * as Cyberpunk from 'scripts/infiltration/cyberpunk';\\nimport * as Main from 'scripts/infiltration/main';\\nimport * as MinesweeperGame from 'scripts/infiltration/minesweeper-game';\\nimport * as SlashGame from 'scripts/infiltration/slash-game';\\nimport * as WireCutting from 'scripts/infiltration/wire-cutting';\\nimport { getDocument } from 'scripts/utils/dom';\\nconst getPageHandler = () => {\\n    switch (true) {\\n        case BackwardGame.isCurrentPage():\\n            return BackwardGame;\\n        case BracketGame.isCurrentPage():\\n            return BracketGame;\\n        case BribeGame.isCurrentPage():\\n            return BribeGame;\\n        case CheatCodeGame.isCurrentPage():\\n            return CheatCodeGame;\\n        case Cyberpunk.isCurrentPage():\\n            return Cyberpunk;\\n        case Main.isCurrentPage():\\n            return Main;\\n        case MinesweeperGame.isCurrentPage():\\n            return MinesweeperGame;\\n        case SlashGame.isCurrentPage():\\n            return SlashGame;\\n        case WireCutting.isCurrentPage():\\n            return WireCutting;\\n        default:\\n            return null;\\n    }\\n};\\nclass InfiltrationManager {\\n    previousState = null;\\n    cleanupCallbacks = [];\\n    update() {\\n        const handler = getPageHandler();\\n        if (!handler) {\\n            console.log('Current state: null');\\n            this.previousState = null;\\n            this.cleanupCallbacks.forEach((cb) => cb());\\n            this.cleanupCallbacks = [];\\n            return;\\n        }\\n        console.log('Current state:', handler.PAGE_ID);\\n        if (this.previousState !== handler.PAGE_ID) {\\n            console.log('Initializing', handler.PAGE_ID);\\n            const cb = handler.init();\\n            if (typeof cb === 'function') {\\n                this.cleanupCallbacks.push(cb);\\n            }\\n            this.previousState = handler.PAGE_ID;\\n            return;\\n        }\\n        console.log('Updating', handler.PAGE_ID);\\n        const cb = handler.update();\\n        if (typeof cb === 'function') {\\n            this.cleanupCallbacks.push(cb);\\n        }\\n        this.previousState = handler.PAGE_ID;\\n    }\\n}\\nexport async function main(_) {\\n    const manager = new InfiltrationManager();\\n    const observer = new MutationObserver(() => manager.update());\\n    const rootElement = getDocument().getElementById('root');\\n    if (!rootElement) {\\n        throw new Error('Root element not found');\\n    }\\n    observer.observe(rootElement, {\\n        childList: true,\\n        subtree: true,\\n    });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9pbmZpbHRyYXRpb24vaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxLQUFLLFlBQVksTUFBTSxvQ0FBb0MsQ0FBQTtBQUNsRSxPQUFPLEtBQUssV0FBVyxNQUFNLG1DQUFtQyxDQUFBO0FBQ2hFLE9BQU8sS0FBSyxTQUFTLE1BQU0saUNBQWlDLENBQUE7QUFDNUQsT0FBTyxLQUFLLGFBQWEsTUFBTSxzQ0FBc0MsQ0FBQTtBQUNyRSxPQUFPLEtBQUssU0FBUyxNQUFNLGdDQUFnQyxDQUFBO0FBQzNELE9BQU8sS0FBSyxJQUFJLE1BQU0sMkJBQTJCLENBQUE7QUFDakQsT0FBTyxLQUFLLGVBQWUsTUFBTSx1Q0FBdUMsQ0FBQTtBQUN4RSxPQUFPLEtBQUssU0FBUyxNQUFNLGlDQUFpQyxDQUFBO0FBQzVELE9BQU8sS0FBSyxXQUFXLE1BQU0sbUNBQW1DLENBQUE7QUFDaEUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG1CQUFtQixDQUFBO0FBYy9DLE1BQU0sY0FBYyxHQUFHLEdBQUcsRUFBRTtJQUMxQixRQUFRLElBQUksRUFBRTtRQUNaLEtBQUssWUFBWSxDQUFDLGFBQWEsRUFBRTtZQUMvQixPQUFPLFlBQVksQ0FBQTtRQUNyQixLQUFLLFdBQVcsQ0FBQyxhQUFhLEVBQUU7WUFDOUIsT0FBTyxXQUFXLENBQUE7UUFDcEIsS0FBSyxTQUFTLENBQUMsYUFBYSxFQUFFO1lBQzVCLE9BQU8sU0FBUyxDQUFBO1FBQ2xCLEtBQUssYUFBYSxDQUFDLGFBQWEsRUFBRTtZQUNoQyxPQUFPLGFBQWEsQ0FBQTtRQUN0QixLQUFLLFNBQVMsQ0FBQyxhQUFhLEVBQUU7WUFDNUIsT0FBTyxTQUFTLENBQUE7UUFDbEIsS0FBSyxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3ZCLE9BQU8sSUFBSSxDQUFBO1FBQ2IsS0FBSyxlQUFlLENBQUMsYUFBYSxF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\",\"filename\":\"scripts/infiltration/index.js\",\"server\":\"home\"}}],[\"scripts/infiltration/main.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getDocument, getElementSelectorFromRootByPath, } from 'scripts/utils/dom';\\nexport const PAGE_ID = 'infiltration-main';\\nconst containerPath = [2, 1, 1, 2];\\nexport const isCurrentPage = () => {\\n    const el = getDocument().querySelector(getElementSelectorFromRootByPath(containerPath.concat(1)));\\n    return Boolean(el &&\\n        'innerText' in el &&\\n        typeof el.innerText === 'string' &&\\n        el.innerText?.includes('Infiltration is a series of short minigames'));\\n};\\nexport const init = () => {\\n    const container = getDocument().querySelector(getElementSelectorFromRootByPath(containerPath));\\n    if (!container) {\\n        throw new Error('Infiltration main screen container not found');\\n    }\\n    const infoElement = getDocument().createElement('p');\\n    infoElement.innerText = 'Infiltration helper scripts loaded.';\\n    infoElement.style.color = 'yellow';\\n    infoElement.style.fontFamily =\\n        '\\\"Lucida Console\\\", \\\"Lucida Sans Unicode\\\", \\\"Fira Mono\\\", Consolas, \\\"Courier New\\\", Courier, monospace, \\\"Times New Roman\\\"';\\n    infoElement.style.fontStyle = 'italic';\\n    container.prepend(infoElement);\\n};\\nexport const update = () => { }; // eslint-disable-line @typescript-eslint/no-empty-function\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2luZmlsdHJhdGlvbi9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxXQUFXLEVBQ1gsZ0NBQWdDLEdBQ2pDLE1BQU0sbUJBQW1CLENBQUE7QUFFMUIsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLG1CQUFtQixDQUFBO0FBRTFDLE1BQU0sYUFBYSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFFbEMsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLEdBQUcsRUFBRTtJQUNoQyxNQUFNLEVBQUUsR0FBRyxXQUFXLEVBQUUsQ0FBQyxhQUFhLENBQ3BDLGdDQUFnQyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDMUQsQ0FBQTtJQUNELE9BQU8sT0FBTyxDQUNaLEVBQUU7UUFDQSxXQUFXLElBQUksRUFBRTtRQUNqQixPQUFPLEVBQUUsQ0FBQyxTQUFTLEtBQUssUUFBUTtRQUNoQyxFQUFFLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyw2Q0FBNkMsQ0FBQyxDQUN4RSxDQUFBO0FBQ0gsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFHLEdBQUcsRUFBRTtJQUN2QixNQUFNLFNBQVMsR0FBRyxXQUFXLEVBQUUsQ0FBQyxhQUFhLENBQzNDLGdDQUFnQyxDQUFDLGFBQWEsQ0FBQyxDQUNoRCxDQUFBO0lBRUQsSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUNkLE1BQU0sSUFBSSxLQUFLLENBQUMsOENBQThDLENBQUMsQ0FBQTtLQUNoRTtJQUVELE1BQU0sV0FBVyxHQUFHLFdBQVcsRUFBRSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNwRCxXQUFXLENBQUMsU0FBUyxHQUFHLHFDQUFxQyxDQUFBO0lBQzdELFdBQVcsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQTtJQUNsQyxXQUFXLENBQUMsS0FBSyxDQUFDLFVBQVU7UUFDMUIsc0hBQXNILENBQUE7SUFDeEgsV0FBVyxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFBO0lBRXRDLFNBQVMsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUE7QUFDaEMsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLEdBQUcsRUFBRSxHQUFFLENBQUMsQ0FBQSxDQUFDLDJEQUEyRCJ9\",\"filename\":\"scripts/infiltration/main.js\",\"server\":\"home\"}}],[\"scripts/utils/dom.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getDocument = () => eval('document');\\nexport const getElementSelectorFromRootByPath = (path) => ['#root', ...path.map((n) => `:nth-child(${n})`)].join(' > ');\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvdXRpbHMvZG9tLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFvQixFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0FBRWxFLE1BQU0sQ0FBQyxNQUFNLGdDQUFnQyxHQUFHLENBQUMsSUFBYyxFQUFFLEVBQUUsQ0FDakUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUEifQ==\",\"filename\":\"scripts/utils/dom.js\",\"server\":\"home\"}}],[\"scripts/infiltration/cyberpunk.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getDocument, getElementSelectorFromRootByPath, } from 'scripts/utils/dom';\\nexport const PAGE_ID = 'cyperpunk';\\nconst containerPath = [2, 1, 1, 3];\\nexport const isCurrentPage = () => {\\n    const el = getDocument().querySelector(getElementSelectorFromRootByPath(containerPath.concat(1)));\\n    return Boolean(el &&\\n        'innerText' in el &&\\n        typeof el.innerText === 'string' &&\\n        el.innerText?.includes('Match the symbols'));\\n};\\nexport const update = () => {\\n    const sequence = [\\n        ...(getDocument().querySelector(getElementSelectorFromRootByPath(containerPath.concat(2)))?.children ?? []),\\n    ];\\n    const curIdx = sequence.findIndex((el) => el.style.color === 'rgb(102, 153, 255)');\\n    const curSymbol = sequence[curIdx]?.innerText.trim();\\n    const nextSymbol = sequence[curIdx + 1]?.innerText.trim();\\n    const grid = [\\n        ...(getDocument().querySelector(getElementSelectorFromRootByPath(containerPath.concat(4)))?.children ?? []),\\n    ];\\n    grid.forEach((el) => {\\n        if (el.innerText.trim() === curSymbol) {\\n            el.style.color = 'red';\\n        }\\n        else if (el.innerText.trim() === nextSymbol) {\\n            el.style.color = 'yellow';\\n        }\\n        else {\\n            el.style.color = '';\\n        }\\n    });\\n};\\nexport const init = () => {\\n    const f = () => setTimeout(update);\\n    getDocument().addEventListener('keydown', f);\\n    update();\\n    return () => getDocument().removeEventListener('keydown', f);\\n};\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3liZXJwdW5rLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvaW5maWx0cmF0aW9uL2N5YmVycHVuay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsV0FBVyxFQUNYLGdDQUFnQyxHQUNqQyxNQUFNLG1CQUFtQixDQUFBO0FBRTFCLE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUE7QUFFbEMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUVsQyxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsR0FBRyxFQUFFO0lBQ2hDLE1BQU0sRUFBRSxHQUFHLFdBQVcsRUFBRSxDQUFDLGFBQWEsQ0FDcEMsZ0NBQWdDLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUMxRCxDQUFBO0lBQ0QsT0FBTyxPQUFPLENBQ1osRUFBRTtRQUNBLFdBQVcsSUFBSSxFQUFFO1FBQ2pCLE9BQU8sRUFBRSxDQUFDLFNBQVMsS0FBSyxRQUFRO1FBQ2hDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLG1CQUFtQixDQUFDLENBQzlDLENBQUE7QUFDSCxDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsR0FBRyxFQUFFO0lBQ3pCLE1BQU0sUUFBUSxHQUFHO1FBQ2YsR0FBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLGFBQWEsQ0FDOUIsZ0NBQWdDLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUMxRCxFQUFFLFFBQVEsSUFBSSxFQUFFLENBQW1CO0tBQ3JDLENBQUE7SUFFRCxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsU0FBUyxDQUMvQixDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUssb0JBQW9CLENBQ2hELENBQUE7SUFFRCxNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFBO0lBQ3BELE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFBO0lBRXpELE1BQU0sSUFBSSxHQUFHO1FBQ1gsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLGFBQWEsQ0FDN0IsZ0NBQWdDLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUMxRCxFQUFFLFFBQVEsSUFBSSxFQUFFLENBQUM7S0FDRixDQUFBO0lBRWxCLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRTtRQUNsQixJQUFJLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLEtBQUssU0FBUyxFQUFFO1lBQ3JDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQTtTQUN2QjthQUFNLElBQUksRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxVQUFVLEVBQUU7WUFDN0MsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFBO1NBQzFCO2FBQU07WUFDTCxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUE7U0FDcEI7SUFDSCxDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBRyxHQUFHLEVBQUU7SUFDdkIsTUFBTSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ2xDLFdBQVcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUM1QyxNQUFNLEVBQUUsQ0FBQTtJQUNSLE9BQU8sR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsbUJBQW1CLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQzlELENBQUMsQ0FBQSJ9\",\"filename\":\"scripts/infiltration/cyberpunk.js\",\"server\":\"home\"}}],[\"scripts/infiltration/cheat-code-game.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getDocument, getElementSelectorFromRootByPath, } from 'scripts/utils/dom';\\nexport const PAGE_ID = 'cheat-code-game';\\nconst upArrowSymbol = '↑';\\nconst downArrowSymbol = '↓';\\nconst leftArrowSymbol = '←';\\nconst rightArrowSymbol = '→';\\nfunction getArrow(event) {\\n    switch (event.key) {\\n        case 'ArrowUp':\\n            return upArrowSymbol;\\n        case 'ArrowLeft':\\n            return leftArrowSymbol;\\n        case 'ArrowDown':\\n            return downArrowSymbol;\\n        case 'ArrowRight':\\n            return rightArrowSymbol;\\n        default:\\n            return undefined;\\n    }\\n}\\nconst containerPath = [2, 1, 1, 3];\\nexport const isCurrentPage = () => {\\n    const el = getDocument().querySelector(getElementSelectorFromRootByPath(containerPath.concat(1)));\\n    return Boolean(el &&\\n        'innerText' in el &&\\n        typeof el.innerText === 'string' &&\\n        el.innerText?.includes('Enter the Code'));\\n};\\nexport const init = () => {\\n    const f = (event) => {\\n        const seq = [\\n            ...(getDocument().querySelector(getElementSelectorFromRootByPath(containerPath.concat(2, 1)))?.children ?? []),\\n        ].map((el) => el.innerText);\\n        let nextKey = '';\\n        seq.forEach((key) => key !== '?' && (nextKey = key));\\n        if (getArrow(event) !== nextKey) {\\n            event.preventDefault();\\n            event.stopImmediatePropagation();\\n            return;\\n        }\\n    };\\n    getDocument().addEventListener('keydown', f, true);\\n    return () => getDocument().removeEventListener('keydown', f, true);\\n};\\nexport const update = () => { }; // eslint-disable-line @typescript-eslint/no-empty-function\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlYXQtY29kZS1nYW1lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvaW5maWx0cmF0aW9uL2NoZWF0LWNvZGUtZ2FtZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsV0FBVyxFQUNYLGdDQUFnQyxHQUNqQyxNQUFNLG1CQUFtQixDQUFBO0FBRTFCLE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRyxpQkFBaUIsQ0FBQTtBQUV4QyxNQUFNLGFBQWEsR0FBRyxHQUFHLENBQUE7QUFDekIsTUFBTSxlQUFlLEdBQUcsR0FBRyxDQUFBO0FBQzNCLE1BQU0sZUFBZSxHQUFHLEdBQUcsQ0FBQTtBQUMzQixNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQTtBQUU1QixTQUFTLFFBQVEsQ0FBQyxLQUFvQjtJQUNwQyxRQUFRLEtBQUssQ0FBQyxHQUFHLEVBQUU7UUFDakIsS0FBSyxTQUFTO1lBQ1osT0FBTyxhQUFhLENBQUE7UUFDdEIsS0FBSyxXQUFXO1lBQ2QsT0FBTyxlQUFlLENBQUE7UUFDeEIsS0FBSyxXQUFXO1lBQ2QsT0FBTyxlQUFlLENBQUE7UUFDeEIsS0FBSyxZQUFZO1lBQ2YsT0FBTyxnQkFBZ0IsQ0FBQTtRQUN6QjtZQUNFLE9BQU8sU0FBUyxDQUFBO0tBQ25CO0FBQ0gsQ0FBQztBQUVELE1BQU0sYUFBYSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFFbEMsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLEdBQUcsRUFBRTtJQUNoQyxNQUFNLEVBQUUsR0FBRyxXQUFXLEVBQUUsQ0FBQyxhQUFhLENBQ3BDLGdDQUFnQyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDMUQsQ0FBQTtJQUNELE9BQU8sT0FBTyxDQUNaLEVBQUU7UUFDQSxXQUFXLElBQUksRUFBRTtRQUNqQixPQUFPLEVBQUUsQ0FBQyxTQUFTLEtBQUssUUFBUTtRQUNoQyxFQUFFLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUMzQyxDQUFBO0FBQ0gsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFHLEdBQUcsRUFBRTtJQUN2QixNQUFNLENBQUMsR0FBRyxDQUFDLEtBQVksRUFBRSxFQUFFO1FBQ3pCLE1BQU0sR0FBRyxHQUFHO1lBQ1YsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLGFBQWEsQ0FDN0IsZ0NBQWdDLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FDN0QsRUFBRSxRQUFRLElBQUksRUFBRSxDQUFDO1NBQ25CLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBRSxFQUFrQixDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBRTVDLElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQTtRQUVoQixHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUE7UUFFcEQsSUFBSSxRQUFRLENBQUMsS0FBc0IsQ0FBQyxLQUFLLE9BQU8sRUFBRTtZQUNoRCxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUE7WUFDdEIsS0FBSyxDQUFDLHdCQUF3QixFQUFFLENBQUE7WUFDaEMsT0FBTTtTQUNQO0lBQ0gsQ0FBQyxDQUFBO0lBRUQsV0FBVyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQTtJQUNsRCxPQUFPLEdBQUcsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLG1CQUFtQixDQUFDLFNBQVMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUE7QUFDcEUsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLEdBQUcsRUFBRSxHQUFFLENBQUMsQ0FBQSxDQUFDLDJEQUEyRCJ9\",\"filename\":\"scripts/infiltration/cheat-code-game.js\",\"server\":\"home\"}}],[\"scripts/infiltration/wire-cutting.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getDocument, getElementSelectorFromRootByPath, } from 'scripts/utils/dom';\\nexport const PAGE_ID = 'wire-cutting';\\nconst containerPath = [2, 1, 1, 3];\\nexport const isCurrentPage = () => {\\n    const el = getDocument().querySelector(getElementSelectorFromRootByPath(containerPath.concat(1)));\\n    return Boolean(el &&\\n        'innerText' in el &&\\n        typeof el.innerText === 'string' &&\\n        el.innerText?.includes('Cut the wires'));\\n};\\nexport const init = () => {\\n    if (getDocument().querySelector('#wire-cutting-solution')) {\\n        return;\\n    }\\n    const instructions = [\\n        ...getDocument().querySelectorAll(getElementSelectorFromRootByPath(containerPath) + ' > p'),\\n    ].map((el) => el.innerText.slice(0, -1));\\n    if (instructions.length === 0) {\\n        return;\\n    }\\n    const grid = [\\n        ...(getDocument().querySelector(getElementSelectorFromRootByPath(containerPath) + ' :last-child')?.children ?? []),\\n    ];\\n    const N = grid.filter((el) => el.style.color === 'rgb(0, 204, 0)').length;\\n    const wireHasColor = (wire, color) => {\\n        for (let i = N + wire - 1; i < grid.length; i += N) {\\n            if (grid[i].style.color === color) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    };\\n    const solution = new Set();\\n    instructions.forEach((instruction) => {\\n        if (instruction.split(' ').slice(-2)[0] === 'number') {\\n            solution.add(instruction.split(' ').slice(-1)[0]);\\n            return;\\n        }\\n        const [color] = instruction.split(' ').slice(-1);\\n        for (let i = 1; i <= N; i++) {\\n            if (wireHasColor(i, color === 'yellow' ? 'rgb(255, 193, 7)' : color)) {\\n                solution.add(i.toString());\\n            }\\n        }\\n    });\\n    const infoElement = getDocument().createElement('p');\\n    infoElement.id = 'wire-cutting-solution';\\n    infoElement.innerText = `Solution: ${[...solution]\\n        .sort((a, b) => parseInt(a) - parseInt(b))\\n        .join(', ')}`;\\n    infoElement.style.color = 'yellow';\\n    infoElement.style.fontFamily =\\n        '\\\"Lucida Console\\\", \\\"Lucida Sans Unicode\\\", \\\"Fira Mono\\\", Consolas, \\\"Courier New\\\", Courier, monospace, \\\"Times New Roman\\\"';\\n    infoElement.style.fontStyle = 'italic';\\n    getDocument()\\n        .querySelector(getElementSelectorFromRootByPath(containerPath))\\n        ?.appendChild(infoElement);\\n    const f = (event) => {\\n        if (!solution.has(event.key)) {\\n            event.preventDefault();\\n            event.stopImmediatePropagation();\\n            return;\\n        }\\n    };\\n    getDocument().addEventListener('keydown', f, true);\\n    return () => getDocument().removeEventListener('keydown', f, true);\\n};\\nexport const update = init;\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lyZS1jdXR0aW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvaW5maWx0cmF0aW9uL3dpcmUtY3V0dGluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsV0FBVyxFQUNYLGdDQUFnQyxHQUNqQyxNQUFNLG1CQUFtQixDQUFBO0FBRTFCLE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRyxjQUFjLENBQUE7QUFFckMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUVsQyxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsR0FBRyxFQUFFO0lBQ2hDLE1BQU0sRUFBRSxHQUFHLFdBQVcsRUFBRSxDQUFDLGFBQWEsQ0FDcEMsZ0NBQWdDLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUMxRCxDQUFBO0lBQ0QsT0FBTyxPQUFPLENBQ1osRUFBRTtRQUNBLFdBQVcsSUFBSSxFQUFFO1FBQ2pCLE9BQU8sRUFBRSxDQUFDLFNBQVMsS0FBSyxRQUFRO1FBQ2hDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLGVBQWUsQ0FBQyxDQUMxQyxDQUFBO0FBQ0gsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFHLEdBQUcsRUFBRTtJQUN2QixJQUFJLFdBQVcsRUFBRSxDQUFDLGFBQWEsQ0FBQyx3QkFBd0IsQ0FBQyxFQUFFO1FBQ3pELE9BQU07S0FDUDtJQUVELE1BQU0sWUFBWSxHQUFHO1FBQ25CLEdBQUcsV0FBVyxFQUFFLENBQUMsZ0JBQWdCLENBQy9CLGdDQUFnQyxDQUFDLGFBQWEsQ0FBQyxHQUFHLE1BQU0sQ0FDekQ7S0FDRixDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUUsRUFBa0IsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxD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\",\"filename\":\"scripts/infiltration/wire-cutting.js\",\"server\":\"home\"}}],[\"scripts/infiltration/backward-game.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getDocument, getElementSelectorFromRootByPath, } from 'scripts/utils/dom';\\nexport const PAGE_ID = 'backward-game';\\nconst containerPath = [2, 1, 1, 3];\\nexport const isCurrentPage = () => {\\n    const el = getDocument().querySelector(getElementSelectorFromRootByPath(containerPath.concat(1)));\\n    return Boolean(el &&\\n        'innerText' in el &&\\n        typeof el.innerText === 'string' &&\\n        el.innerText?.includes('Type it backward'));\\n};\\nexport const update = () => {\\n    if (getDocument().querySelector('#backward-game-solution')) {\\n        return;\\n    }\\n    const text = getDocument().querySelector(getElementSelectorFromRootByPath(containerPath.concat(2)))?.innerText.trim() ?? '';\\n    const infoElement = getDocument().createElement('p');\\n    infoElement.id = 'backward-game-solution';\\n    infoElement.innerText = text;\\n    infoElement.style.color = 'yellow';\\n    infoElement.style.fontFamily =\\n        '\\\"Lucida Console\\\", \\\"Lucida Sans Unicode\\\", \\\"Fira Mono\\\", Consolas, \\\"Courier New\\\", Courier, monospace, \\\"Times New Roman\\\"';\\n    infoElement.style.fontStyle = 'italic';\\n    getDocument()\\n        .querySelector(getElementSelectorFromRootByPath(containerPath))\\n        ?.appendChild(infoElement);\\n    const f = (event) => {\\n        const curText = getDocument().querySelector(getElementSelectorFromRootByPath(containerPath.concat(3)))?.innerText.slice(0, -1) ?? '';\\n        const nextChar = text.charAt(curText.length);\\n        if (nextChar.toLowerCase() !== event.key.toLowerCase()) {\\n            event.preventDefault();\\n            event.stopImmediatePropagation();\\n            return;\\n        }\\n    };\\n    getDocument().addEventListener('keydown', f, true);\\n    return () => getDocument().removeEventListener('keydown', f, true);\\n};\\nexport const init = update;\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja3dhcmQtZ2FtZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2luZmlsdHJhdGlvbi9iYWNrd2FyZC1nYW1lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxXQUFXLEVBQ1gsZ0NBQWdDLEdBQ2pDLE1BQU0sbUJBQW1CLENBQUE7QUFFMUIsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLGVBQWUsQ0FBQTtBQUV0QyxNQUFNLGFBQWEsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBRWxDLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxHQUFHLEVBQUU7SUFDaEMsTUFBTSxFQUFFLEdBQUcsV0FBVyxFQUFFLENBQUMsYUFBYSxDQUNwQyxnQ0FBZ0MsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQzFELENBQUE7SUFDRCxPQUFPLE9BQU8sQ0FDWixFQUFFO1FBQ0EsV0FBVyxJQUFJLEVBQUU7UUFDakIsT0FBTyxFQUFFLENBQUMsU0FBUyxLQUFLLFFBQVE7UUFDaEMsRUFBRSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsa0JBQWtCLENBQUMsQ0FDN0MsQ0FBQTtBQUNILENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxHQUFHLEVBQUU7SUFDekIsSUFBSSxXQUFXLEVBQUUsQ0FBQyxhQUFhLENBQUMseUJBQXlCLENBQUMsRUFBRTtRQUMxRCxPQUFNO0tBQ1A7SUFFRCxNQUFNLElBQUksR0FFTixXQUFXLEVBQUUsQ0FBQyxhQUFhLENBQ3pCLGdDQUFnQyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FFNUQsRUFBRSxTQUFTLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFBO0lBRTNCLE1BQU0sV0FBVyxHQUFHLFdBQVcsRUFBRSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNwRCxXQUFXLENBQUMsRUFBRSxHQUFHLHdCQUF3QixDQUFBO0lBQ3pDLFdBQVcsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFBO0lBQzVCLFdBQVcsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQTtJQUNsQyxXQUFXLENBQUMsS0FBSyxDQUFDLFVBQVU7UUFDMUIsc0hBQXNILENBQUE7SUFDeEgsV0FBVyxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFBO0lBRXRDLFdBQVcsRUFBRTtTQUNWLGFBQWEsQ0FBQyxnQ0FBZ0MsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUMvRCxFQUFFLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUU1QixNQUFNLENBQUMsR0FBRyxDQUFDLEtBQW9CLEVBQUUsRUFBRTtRQUNqQyxNQUFNLE9BQU8sR0FFVCxXQUFXLEVBQUUsQ0FBQyxhQUFhLENBQ3pCLGdDQUFnQyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FFNUQsRUFBRSxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUVqQyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUU1QyxJQUFJLFFBQVEsQ0FBQyxXQUFXLEVBQUUsS0FBSyxLQUFLLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxFQUFFO1lBQ3RELEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQTtZQUN0QixLQUFLLENBQUMsd0JBQXdCLEVBQUUsQ0FBQTtZQUNoQyxPQUFNO1NBQ1A7SUFDSCxDQUFDLENBQUE7SUFFRCxXQUFXLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFBO0lBQ2xELE9BQU8sR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsbUJBQW1CLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQTtBQUNwRSxDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFBIn0=\",\"filename\":\"scripts/infiltration/backward-game.js\",\"server\":\"home\"}}],[\"scripts/infiltration/minesweeper-game.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getDocument, getElementSelectorFromRootByPath, } from 'scripts/utils/dom';\\nexport const PAGE_ID = 'minesweeper-game';\\nconst containerPath = [2, 1, 1, 3];\\nexport const isCurrentPage = () => {\\n    const el = getDocument().querySelector(getElementSelectorFromRootByPath(containerPath.concat(1)));\\n    return Boolean(el &&\\n        'innerText' in el &&\\n        typeof el.innerText === 'string' &&\\n        el.innerText?.includes('all the mines'));\\n};\\nconst memo = {\\n    mines: [],\\n};\\nexport const init = () => {\\n    const grid = [\\n        ...(getDocument().querySelector(getElementSelectorFromRootByPath(containerPath.concat(2)))?.children ?? []),\\n    ];\\n    memo.mines = [];\\n    grid.forEach((el, idx) => {\\n        if (el.children.length > 0) {\\n            memo.mines.push(idx);\\n        }\\n    });\\n};\\nexport const update = () => {\\n    const grid = [\\n        ...(getDocument().querySelector(getElementSelectorFromRootByPath(containerPath.concat(2)))?.children ?? []),\\n    ];\\n    grid.forEach((el, idx) => {\\n        if (memo.mines.includes(idx) && el.children.length === 0) {\\n            el.style.borderColor = 'red';\\n        }\\n    });\\n    const f = (event) => {\\n        if (event.key !== 'Enter') {\\n            return;\\n        }\\n        let curIdx = -1;\\n        const grid = [\\n            ...(getDocument().querySelector(getElementSelectorFromRootByPath(containerPath.concat(2)))?.children ?? []),\\n        ];\\n        grid.forEach((el, idx) => {\\n            const child = el.children[0];\\n            if (child?.dataset.testid === 'CloseIcon') {\\n                curIdx = idx;\\n            }\\n        });\\n        if (!memo.mines.includes(curIdx)) {\\n            event.preventDefault();\\n            event.stopImmediatePropagation();\\n            return;\\n        }\\n    };\\n    getDocument().addEventListener('keydown', f, true);\\n    return () => getDocument().removeEventListener('keydown', f, true);\\n};\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWluZXN3ZWVwZXItZ2FtZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2luZmlsdHJhdGlvbi9taW5lc3dlZXBlci1nYW1lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxXQUFXLEVBQ1gsZ0NBQWdDLEdBQ2pDLE1BQU0sbUJBQW1CLENBQUE7QUFFMUIsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLGtCQUFrQixDQUFBO0FBRXpDLE1BQU0sYUFBYSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFFbEMsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLEdBQUcsRUFBRTtJQUNoQyxNQUFNLEVBQUUsR0FBRyxXQUFXLEVBQUUsQ0FBQyxhQUFhLENBQ3BDLGdDQUFnQyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDMUQsQ0FBQTtJQUNELE9BQU8sT0FBTyxDQUNaLEVBQUU7UUFDQSxXQUFXLElBQUksRUFBRTtRQUNqQixPQUFPLEVBQUUsQ0FBQyxTQUFTLEtBQUssUUFBUTtRQUNoQyxFQUFFLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FDMUMsQ0FBQTtBQUNILENBQUMsQ0FBQTtBQUVELE1BQU0sSUFBSSxHQUFHO0lBQ1gsS0FBSyxFQUFFLEVBQWM7Q0FDdEIsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBRyxHQUFHLEVBQUU7SUFDdkIsTUFBTSxJQUFJLEdBQUc7UUFDWCxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUMsYUFBYSxDQUM3QixnQ0FBZ0MsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQzFELEVBQUUsUUFBUSxJQUFJLEVBQUUsQ0FBQztLQUNGLENBQUE7SUFFbEIsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUE7SUFFZixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQ3ZCLElBQUksRUFBRSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzFCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1NBQ3JCO0lBQ0gsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsR0FBRyxFQUFFO0lBQ3pCLE1BQU0sSUFBSSxHQUFHO1FBQ1gsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLGFBQWEsQ0FDN0IsZ0NBQWdDLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUMxRCxFQUFFLFFBQVEsSUFBSSxFQUFFLENBQUM7S0FDRixDQUFBO0lBRWxCLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUU7UUFDdkIsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsUUFBUSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDeEQsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFBO1NBQzdCO0lBQ0gsQ0FBQyxDQUFDLENBQUE7SUFFRixNQUFNLENBQUMsR0FBRyxDQUFDLEtBQW9CLEVBQUUsRUFBRTtRQUNqQyxJQUFJLEtBQUssQ0FBQyxHQUFHLEtBQUssT0FBTyxFQUFFO1lBQ3pCLE9BQU07U0FDUDtRQUVELElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFBO1FBQ2YsTUFBTSxJQUFJLEdBQUc7WUFDWCxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUMsYUFBYSxDQUM3QixnQ0FBZ0MsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQzFELEVBQUUsUUFBUSxJQUFJLEVBQUUsQ0FBQztTQUNGLENBQUE7UUFFbEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUN2QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBNEIsQ0FBQTtZQUV2RCxJQUFJLEtBQUssRUFBRSxPQUFPLENBQUMsTUFBTSxLQUFLLFdBQVcsRUFBRTtnQkFDekMsTUFBTSxHQUFHLEdBQUcsQ0FBQTthQUNiO1FBQ0gsQ0FBQyxDQUFDLENBQUE7UUFFRixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDaEMsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFBO1lBQ3RCLEtBQUssQ0FBQyx3QkFBd0IsRUFBRSxDQUFBO1lBQ2hDLE9BQU07U0FDUDtJQUNILENBQUMsQ0FBQTtJQUVELFdBQVcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUE7SUFDbEQsT0FBTyxHQUFHLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFBO0FBQ3BFLENBQUMsQ0FBQSJ9\",\"filename\":\"scripts/infiltration/minesweeper-game.js\",\"server\":\"home\"}}],[\"scripts/infiltration/bribe-game.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getDocument, getElementSelectorFromRootByPath, } from 'scripts/utils/dom';\\nexport const PAGE_ID = 'bribe-game';\\nconst containerPath = [2, 1, 1, 3];\\nconst positiveWords = [\\n    'affectionate',\\n    'agreeable',\\n    'bright',\\n    'charming',\\n    'creative',\\n    'determined',\\n    'energetic',\\n    'friendly',\\n    'funny',\\n    'generous',\\n    'polite',\\n    'likable',\\n    'diplomatic',\\n    'helpful',\\n    'giving',\\n    'kind',\\n    'hardworking',\\n    'patient',\\n    'dynamic',\\n    'loyal',\\n    'straightforward',\\n];\\nexport const isCurrentPage = () => {\\n    const el = getDocument().querySelector(getElementSelectorFromRootByPath(containerPath.concat(1)));\\n    return Boolean(el &&\\n        'innerText' in el &&\\n        typeof el.innerText === 'string' &&\\n        el.innerText?.includes('Say something nice'));\\n};\\nexport const init = () => {\\n    const upd = () => setTimeout(() => {\\n        const el = getDocument().querySelector(getElementSelectorFromRootByPath(containerPath.concat(3)));\\n        if (!el) {\\n            return;\\n        }\\n        if (positiveWords.includes(el.innerText)) {\\n            el.style.color = 'red';\\n        }\\n        else {\\n            el.style.color = '';\\n        }\\n    });\\n    upd();\\n    getDocument().addEventListener('keydown', upd);\\n    return () => getDocument().removeEventListener('keydown', upd);\\n};\\nexport const update = () => { }; // eslint-disable-line @typescript-eslint/no-empty-function\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJpYmUtZ2FtZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2luZmlsdHJhdGlvbi9icmliZS1nYW1lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxXQUFXLEVBQ1gsZ0NBQWdDLEdBQ2pDLE1BQU0sbUJBQW1CLENBQUE7QUFFMUIsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLFlBQVksQ0FBQTtBQUVuQyxNQUFNLGFBQWEsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBRWxDLE1BQU0sYUFBYSxHQUFHO0lBQ3BCLGNBQWM7SUFDZCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsWUFBWTtJQUNaLFdBQVc7SUFDWCxVQUFVO0lBQ1YsT0FBTztJQUNQLFVBQVU7SUFDVixRQUFRO0lBQ1IsU0FBUztJQUNULFlBQVk7SUFDWixTQUFTO0lBQ1QsUUFBUTtJQUNSLE1BQU07SUFDTixhQUFhO0lBQ2IsU0FBUztJQUNULFNBQVM7SUFDVCxPQUFPO0lBQ1AsaUJBQWlCO0NBQ2xCLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsR0FBRyxFQUFFO0lBQ2hDLE1BQU0sRUFBRSxHQUFHLFdBQVcsRUFBRSxDQUFDLGFBQWEsQ0FDcEMsZ0NBQWdDLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUMxRCxDQUFBO0lBQ0QsT0FBTyxPQUFPLENBQ1osRUFBRTtRQUNBLFdBQVcsSUFBSSxFQUFFO1FBQ2pCLE9BQU8sRUFBRSxDQUFDLFNBQVMsS0FBSyxRQUFRO1FBQ2hDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLG9CQUFvQixDQUFDLENBQy9DLENBQUE7QUFDSCxDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUcsR0FBRyxFQUFFO0lBQ3ZCLE1BQU0sR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUNmLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxNQUFNLEVBQUUsR0FBRyxXQUFXLEVBQUUsQ0FBQyxhQUFhLENBQ3BDLGdDQUFnQyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDL0IsQ0FBQTtRQUU1QixJQUFJLENBQUMsRUFBRSxFQUFFO1lBQ1AsT0FBTTtTQUNQO1FBRUQsSUFBSSxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUN4QyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUE7U0FDdkI7YUFBTTtZQUNMLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQTtTQUNwQjtJQUNILENBQUMsQ0FBQyxDQUFBO0lBRUosR0FBRyxFQUFFLENBQUE7SUFFTCxXQUFXLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLENBQUE7SUFDOUMsT0FBTyxHQUFHLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLENBQUE7QUFDaEUsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLEdBQUcsRUFBRSxHQUFFLENBQUMsQ0FBQSxDQUFDLDJEQUEyRCJ9\",\"filename\":\"scripts/infiltration/bribe-game.js\",\"server\":\"home\"}}],[\"scripts/infiltration/bracket-game.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getDocument, getElementSelectorFromRootByPath, } from 'scripts/utils/dom';\\nexport const PAGE_ID = 'bracket-game';\\nconst containerPath = [2, 1, 1, 3];\\nexport const isCurrentPage = () => {\\n    const el = getDocument().querySelector(getElementSelectorFromRootByPath(containerPath.concat(1)));\\n    return Boolean(el &&\\n        'innerText' in el &&\\n        typeof el.innerText === 'string' &&\\n        el.innerText?.includes('Close the brackets'));\\n};\\nexport const init = () => {\\n    const brackets = getDocument().querySelector(getElementSelectorFromRootByPath(containerPath.concat(2)))?.innerText\\n        .slice(0, -1)\\n        .split('')\\n        .reverse()\\n        .join('') ?? '';\\n    const f = (event) => {\\n        const curIdx = (getDocument().querySelector(getElementSelectorFromRootByPath(containerPath.concat(2)))?.innerText.length ?? 0) -\\n            1 -\\n            brackets.length;\\n        const nextKey = brackets[curIdx];\\n        const solutionMap = {\\n            '(': ')',\\n            '[': ']',\\n            '{': '}',\\n            '<': '>',\\n        };\\n        if (event.key !== solutionMap[nextKey]) {\\n            event.preventDefault();\\n            event.stopImmediatePropagation();\\n        }\\n    };\\n    getDocument().addEventListener('keydown', f, true);\\n    return () => getDocument().removeEventListener('keydown', f, true);\\n};\\nexport const update = () => { }; // eslint-disable-line @typescript-eslint/no-empty-function\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJhY2tldC1nYW1lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvaW5maWx0cmF0aW9uL2JyYWNrZXQtZ2FtZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsV0FBVyxFQUNYLGdDQUFnQyxHQUNqQyxNQUFNLG1CQUFtQixDQUFBO0FBRTFCLE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRyxjQUFjLENBQUE7QUFFckMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUVsQyxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsR0FBRyxFQUFFO0lBQ2hDLE1BQU0sRUFBRSxHQUFHLFdBQVcsRUFBRSxDQUFDLGFBQWEsQ0FDcEMsZ0NBQWdDLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUMxRCxDQUFBO0lBQ0QsT0FBTyxPQUFPLENBQ1osRUFBRTtRQUNBLFdBQVcsSUFBSSxFQUFFO1FBQ2pCLE9BQU8sRUFBRSxDQUFDLFNBQVMsS0FBSyxRQUFRO1FBQ2hDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLG9CQUFvQixDQUFDLENBQy9DLENBQUE7QUFDSCxDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUcsR0FBRyxFQUFFO0lBQ3ZCLE1BQU0sUUFBUSxHQUVWLFdBQVcsRUFBRSxDQUFDLGFBQWEsQ0FDekIsZ0NBQWdDLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUU1RCxFQUFFLFNBQVM7U0FDVCxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ1osS0FBSyxDQUFDLEVBQUUsQ0FBQztTQUNULE9BQU8sRUFBRTtTQUNULElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7SUFFbkIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFZLEVBQUUsRUFBRTtRQUN6QixNQUFNLE1BQU0sR0FDVixDQUNFLFdBQVcsRUFBRSxDQUFDLGFBQWEsQ0FDekIsZ0NBQWdDLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUU1RCxFQUFFLFNBQVMsQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDO1lBQ3pCLENBQUM7WUFDRCxRQUFRLENBQUMsTUFBTSxDQUFBO1FBRWpCLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUVoQyxNQUFNLFdBQVcsR0FBMkI7WUFDMUMsR0FBRyxFQUFFLEdBQUc7WUFDUixHQUFHLEVBQUUsR0FBRztZQUNSLEdBQUcsRUFBRSxHQUFHO1lBQ1IsR0FBRyxFQUFFLEdBQUc7U0FDVCxDQUFBO1FBRUQsSUFBSyxLQUF1QixDQUFDLEdBQUcsS0FBSyxXQUFXLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDekQsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFBO1lBQ3RCLEtBQUssQ0FBQyx3QkFBd0IsRUFBRSxDQUFBO1NBQ2pDO0lBQ0gsQ0FBQyxDQUFBO0lBRUQsV0FBVyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQTtJQUNsRCxPQUFPLEdBQUcsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLG1CQUFtQixDQUFDLFNBQVMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUE7QUFDcEUsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLEdBQUcsRUFBRSxHQUFFLENBQUMsQ0FBQSxDQUFDLDJEQUEyRCJ9\",\"filename\":\"scripts/infiltration/bracket-game.js\",\"server\":\"home\"}}],[\"scripts/infiltration/slash-game.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getDocument, getElementSelectorFromRootByPath, } from 'scripts/utils/dom';\\nexport const PAGE_ID = 'slash-game';\\nconst containerPath = [2, 1, 1, 3];\\nexport const isCurrentPage = () => {\\n    const el = getDocument().querySelector(getElementSelectorFromRootByPath(containerPath.concat(1)));\\n    return Boolean(el &&\\n        'innerText' in el &&\\n        typeof el.innerText === 'string' &&\\n        el.innerText?.includes('Attack when his guard is down'));\\n};\\nconst syncSleep = (ms) => {\\n    const start = Date.now();\\n    while (Date.now() - start < ms)\\n        ;\\n};\\nexport const init = () => { }; // eslint-disable-line @typescript-eslint/no-empty-function\\nexport const update = () => {\\n    const text = getDocument().querySelector(getElementSelectorFromRootByPath(containerPath.concat(2)))?.innerText ?? '';\\n    if (text.toLowerCase().includes('preparing')) {\\n        setTimeout(() => syncSleep(1000));\\n    }\\n};\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xhc2gtZ2FtZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2luZmlsdHJhdGlvbi9zbGFzaC1nYW1lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxXQUFXLEVBQ1gsZ0NBQWdDLEdBQ2pDLE1BQU0sbUJBQW1CLENBQUE7QUFFMUIsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLFlBQVksQ0FBQTtBQUVuQyxNQUFNLGFBQWEsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBRWxDLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxHQUFHLEVBQUU7SUFDaEMsTUFBTSxFQUFFLEdBQUcsV0FBVyxFQUFFLENBQUMsYUFBYSxDQUNwQyxnQ0FBZ0MsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQzFELENBQUE7SUFDRCxPQUFPLE9BQU8sQ0FDWixFQUFFO1FBQ0EsV0FBVyxJQUFJLEVBQUU7UUFDakIsT0FBTyxFQUFFLENBQUMsU0FBUyxLQUFLLFFBQVE7UUFDaEMsRUFBRSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsK0JBQStCLENBQUMsQ0FDMUQsQ0FBQTtBQUNILENBQUMsQ0FBQTtBQUVELE1BQU0sU0FBUyxHQUFHLENBQUMsRUFBVSxFQUFFLEVBQUU7SUFDL0IsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFBO0lBQ3hCLE9BQU8sSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLEtBQUssR0FBRyxFQUFFO1FBQUMsQ0FBQztBQUNsQyxDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUcsR0FBRyxFQUFFLEdBQUUsQ0FBQyxDQUFBLENBQUMsMkRBQTJEO0FBRXhGLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxHQUFHLEVBQUU7SUFDekIsTUFBTSxJQUFJLEdBRU4sV0FBVyxFQUFFLENBQUMsYUFBYSxDQUN6QixnQ0FBZ0MsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBRTVELEVBQUUsU0FBUyxJQUFJLEVBQUUsQ0FBQTtJQUVwQixJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLEVBQUU7UUFDNUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO0tBQ2xDO0FBQ0gsQ0FBQyxDQUFBIn0=\",\"filename\":\"scripts/infiltration/slash-game.js\",\"server\":\"home\"}}],[\"scripts/infiltration/utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { locationsMetadata } from 'scripts/utils/locations-metadata';\\nconst calcReward = (maxLevel, reward, difficulty, ns) => {\\n    const levelBonus = maxLevel * Math.pow(1.01, maxLevel);\\n    return (Math.pow(reward + 1, 2) *\\n        Math.pow(difficulty, 3) *\\n        3e3 *\\n        levelBonus *\\n        ns.getBitNodeMultipliers().InfiltrationMoney);\\n};\\nexport async function main(ns) {\\n    const res = locationsMetadata\\n        .filter((location) => 'infiltrationData' in location)\\n        .map((company) => ({\\n        name: company.name,\\n        city: company.city,\\n        rounds: company.infiltrationData?.maxClearanceLevel ?? 0,\\n        reward: calcReward(company.infiltrationData?.maxClearanceLevel ?? 0, 3, company.infiltrationData?.startingSecurityLevel ?? 0, ns),\\n    }))\\n        .sort((a, b) => b.reward - a.reward)\\n        .map((company) => `${company.name} (${company.city}, ${company.rounds} rounds): ${ns.formatNumber(company.reward)} (${ns.formatNumber(company.reward / company.rounds)} per round)`)\\n        .join('\\\\n');\\n    ns.tprint('\\\\n' + res);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9pbmZpbHRyYXRpb24vdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sa0NBQWtDLENBQUE7QUFFcEUsTUFBTSxVQUFVLEdBQUcsQ0FDakIsUUFBZ0IsRUFDaEIsTUFBYyxFQUNkLFVBQWtCLEVBQ2xCLEVBQU0sRUFDTixFQUFFO0lBQ0YsTUFBTSxVQUFVLEdBQUcsUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBRXRELE9BQU8sQ0FDTCxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztRQUN2QixHQUFHO1FBQ0gsVUFBVTtRQUNWLEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLGlCQUFpQixDQUM3QyxDQUFBO0FBQ0gsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixNQUFNLEdBQUcsR0FBRyxpQkFBaUI7U0FDMUIsTUFBTSxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsSUFBSSxRQUFRLENBQUM7U0FDcEQsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtRQUNsQixJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUk7UUFDbEIsTUFBTSxFQUFFLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxpQkFBaUIsSUFBSSxDQUFDO1FBQ3hELE1BQU0sRUFBRSxVQUFVLENBQ2hCLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxpQkFBaUIsSUFBSSxDQUFDLEVBQ2hELENBQUMsRUFDRCxPQUFPLENBQUMsZ0JBQWdCLEVBQUUscUJBQXFCLElBQUksQ0FBQyxFQUNwRCxFQUFFLENBQ0g7S0FDRixDQUFDLENBQUM7U0FDRixJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUM7U0FDbkMsR0FBRyxDQUNGLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FDVixHQUFHLE9BQU8sQ0FBQyxJQUFJLEtBQUssT0FBTyxDQUFDLElBQUksS0FDOUIsT0FBTyxDQUFDLE1BQ1YsYUFBYSxFQUFFLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsWUFBWSxDQUM5RCxPQUFPLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQ2hDLGFBQWEsQ0FDakI7U0FDQSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7SUFFYixFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQTtBQUN2QixDQUFDIn0=\",\"filename\":\"scripts/infiltration/utils.js\",\"server\":\"home\"}}],[\"scripts/utils/locations-metadata.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"var LocationName;\\n(function (LocationName) {\\n    LocationName[\\\"AevumAeroCorp\\\"] = \\\"AeroCorp\\\";\\n    LocationName[\\\"AevumBachmanAndAssociates\\\"] = \\\"Bachman & Associates\\\";\\n    LocationName[\\\"AevumClarkeIncorporated\\\"] = \\\"Clarke Incorporated\\\";\\n    LocationName[\\\"AevumCrushFitnessGym\\\"] = \\\"Crush Fitness Gym\\\";\\n    LocationName[\\\"AevumECorp\\\"] = \\\"ECorp\\\";\\n    LocationName[\\\"AevumFulcrumTechnologies\\\"] = \\\"Fulcrum Technologies\\\";\\n    LocationName[\\\"AevumGalacticCybersystems\\\"] = \\\"Galactic Cybersystems\\\";\\n    LocationName[\\\"AevumNetLinkTechnologies\\\"] = \\\"NetLink Technologies\\\";\\n    LocationName[\\\"AevumPolice\\\"] = \\\"Aevum Police Headquarters\\\";\\n    LocationName[\\\"AevumRhoConstruction\\\"] = \\\"Rho Construction\\\";\\n    LocationName[\\\"AevumSnapFitnessGym\\\"] = \\\"Snap Fitness Gym\\\";\\n    LocationName[\\\"AevumSummitUniversity\\\"] = \\\"Summit University\\\";\\n    LocationName[\\\"AevumWatchdogSecurity\\\"] = \\\"Watchdog Security\\\";\\n    LocationName[\\\"AevumCasino\\\"] = \\\"Iker Molina Casino\\\";\\n    LocationName[\\\"ChongqingKuaiGongInternational\\\"] = \\\"KuaiGong International\\\";\\n    LocationName[\\\"ChongqingSolarisSpaceSystems\\\"] = \\\"Solaris Space Systems\\\";\\n    LocationName[\\\"ChongqingChurchOfTheMachineGod\\\"] = \\\"Church of the Machine God\\\";\\n    LocationName[\\\"Sector12AlphaEnterprises\\\"] = \\\"Alpha Enterprises\\\";\\n    LocationName[\\\"Sector12BladeIndustries\\\"] = \\\"Blade Industries\\\";\\n    LocationName[\\\"Sector12CIA\\\"] = \\\"Central Intelligence Agency\\\";\\n    LocationName[\\\"Sector12CarmichaelSecurity\\\"] = \\\"Carmichael Security\\\";\\n    LocationName[\\\"Sector12CityHall\\\"] = \\\"Sector-12 City Hall\\\";\\n    LocationName[\\\"Sector12DeltaOne\\\"] = \\\"DeltaOne\\\";\\n    LocationName[\\\"Sector12FoodNStuff\\\"] = \\\"FoodNStuff\\\";\\n    LocationName[\\\"Sector12FourSigma\\\"] = \\\"Four Sigma\\\";\\n    LocationName[\\\"Sector12IcarusMicrosystems\\\"] = \\\"Icarus Microsystems\\\";\\n    LocationName[\\\"Sector12IronGym\\\"] = \\\"Iron Gym\\\";\\n    LocationName[\\\"Sector12JoesGuns\\\"] = \\\"Joe's Guns\\\";\\n    LocationName[\\\"Sector12MegaCorp\\\"] = \\\"MegaCorp\\\";\\n    LocationName[\\\"Sector12NSA\\\"] = \\\"National Security Agency\\\";\\n    LocationName[\\\"Sector12PowerhouseGym\\\"] = \\\"Powerhouse Gym\\\";\\n    LocationName[\\\"Sector12RothmanUniversity\\\"] = \\\"Rothman University\\\";\\n    LocationName[\\\"Sector12UniversalEnergy\\\"] = \\\"Universal Energy\\\";\\n    LocationName[\\\"NewTokyoDefComm\\\"] = \\\"DefComm\\\";\\n    LocationName[\\\"NewTokyoGlobalPharmaceuticals\\\"] = \\\"Global Pharmaceuticals\\\";\\n    LocationName[\\\"NewTokyoNoodleBar\\\"] = \\\"Noodle Bar\\\";\\n    LocationName[\\\"NewTokyoVitaLife\\\"] = \\\"VitaLife\\\";\\n    LocationName[\\\"NewTokyoArcade\\\"] = \\\"Arcade\\\";\\n    LocationName[\\\"IshimaNovaMedical\\\"] = \\\"Nova Medical\\\";\\n    LocationName[\\\"IshimaOmegaSoftware\\\"] = \\\"Omega Software\\\";\\n    LocationName[\\\"IshimaStormTechnologies\\\"] = \\\"Storm Technologies\\\";\\n    LocationName[\\\"IshimaGlitch\\\"] = \\\"0x6C1\\\";\\n    LocationName[\\\"VolhavenCompuTek\\\"] = \\\"CompuTek\\\";\\n    LocationName[\\\"VolhavenHeliosLabs\\\"] = \\\"Helios Labs\\\";\\n    LocationName[\\\"VolhavenLexoCorp\\\"] = \\\"LexoCorp\\\";\\n    LocationName[\\\"VolhavenMilleniumFitnessGym\\\"] = \\\"Millenium Fitness Gym\\\";\\n    LocationName[\\\"VolhavenNWO\\\"] = \\\"NWO\\\";\\n    LocationName[\\\"VolhavenOmniTekIncorporated\\\"] = \\\"OmniTek Incorporated\\\";\\n    LocationName[\\\"VolhavenOmniaCybersystems\\\"] = \\\"Omnia Cybersystems\\\";\\n    LocationName[\\\"VolhavenSysCoreSecurities\\\"] = \\\"SysCore Securities\\\";\\n    LocationName[\\\"VolhavenZBInstituteOfTechnology\\\"] = \\\"ZB Institute of Technology\\\";\\n    LocationName[\\\"Hospital\\\"] = \\\"Hospital\\\";\\n    LocationName[\\\"Slums\\\"] = \\\"The Slums\\\";\\n    LocationName[\\\"TravelAgency\\\"] = \\\"Travel Agency\\\";\\n    LocationName[\\\"WorldStockExchange\\\"] = \\\"World Stock Exchange\\\";\\n    LocationName[\\\"Void\\\"] = \\\"The Void\\\";\\n})(LocationName || (LocationName = {}));\\nvar CityName;\\n(function (CityName) {\\n    CityName[\\\"Aevum\\\"] = \\\"Aevum\\\";\\n    CityName[\\\"Chongqing\\\"] = \\\"Chongqing\\\";\\n    CityName[\\\"Sector12\\\"] = \\\"Sector-12\\\";\\n    CityName[\\\"NewTokyo\\\"] = \\\"New Tokyo\\\";\\n    CityName[\\\"Ishima\\\"] = \\\"Ishima\\\";\\n    CityName[\\\"Volhaven\\\"] = \\\"Volhaven\\\";\\n})(CityName || (CityName = {}));\\nvar LocationType;\\n(function (LocationType) {\\n    LocationType[\\\"Company\\\"] = \\\"Company\\\";\\n    LocationType[\\\"Gym\\\"] = \\\"Gym\\\";\\n    LocationType[\\\"Hospital\\\"] = \\\"Hospital\\\";\\n    LocationType[\\\"Slums\\\"] = \\\"Slums\\\";\\n    LocationType[\\\"Special\\\"] = \\\"Special\\\";\\n    LocationType[\\\"StockMarket\\\"] = \\\"Stock Market\\\";\\n    LocationType[\\\"TechVendor\\\"] = \\\"Tech Vendor\\\";\\n    LocationType[\\\"TravelAgency\\\"] = \\\"Travel Agency\\\";\\n    LocationType[\\\"University\\\"] = \\\"University\\\";\\n    LocationType[\\\"Casino\\\"] = \\\"Casino\\\";\\n})(LocationType || (LocationType = {}));\\nexport const locationsMetadata = [\\n    {\\n        city: CityName.Aevum,\\n        infiltrationData: {\\n            maxClearanceLevel: 12,\\n            startingSecurityLevel: 8.18,\\n        },\\n        name: LocationName.AevumAeroCorp,\\n        types: [LocationType.Company],\\n    },\\n    {\\n        city: CityName.Aevum,\\n        infiltrationData: {\\n            maxClearanceLevel: 15,\\n            startingSecurityLevel: 8.19,\\n        },\\n        name: LocationName.AevumBachmanAndAssociates,\\n        types: [LocationType.Company],\\n    },\\n    {\\n        city: CityName.Aevum,\\n        infiltrationData: {\\n            maxClearanceLevel: 18,\\n            startingSecurityLevel: 9.55,\\n        },\\n        name: LocationName.AevumClarkeIncorporated,\\n        types: [LocationType.Company],\\n    },\\n    {\\n        city: CityName.Aevum,\\n        costMult: 3,\\n        expMult: 2,\\n        name: LocationName.AevumCrushFitnessGym,\\n        types: [LocationType.Gym],\\n    },\\n    {\\n        city: CityName.Aevum,\\n        infiltrationData: {\\n            maxClearanceLevel: 37,\\n            startingSecurityLevel: 17.02,\\n        },\\n        name: LocationName.AevumECorp,\\n        types: [LocationType.Company, LocationType.TechVendor],\\n        techVendorMaxRam: 512,\\n        techVendorMinRam: 128,\\n    },\\n    {\\n        city: CityName.Aevum,\\n        infiltrationData: {\\n            maxClearanceLevel: 25,\\n            startingSecurityLevel: 15.54,\\n        },\\n        name: LocationName.AevumFulcrumTechnologies,\\n        types: [LocationType.Company, LocationType.TechVendor],\\n        techVendorMaxRam: 1024,\\n        techVendorMinRam: 256,\\n    },\\n    {\\n        city: CityName.Aevum,\\n        infiltrationData: {\\n            maxClearanceLevel: 12,\\n            startingSecurityLevel: 7.89,\\n        },\\n        name: LocationName.AevumGalacticCybersystems,\\n        types: [LocationType.Company],\\n    },\\n    {\\n        city: CityName.Aevum,\\n        infiltrationData: {\\n            maxClearanceLevel: 6,\\n            startingSecurityLevel: 3.29,\\n        },\\n        name: LocationName.AevumNetLinkTechnologies,\\n        types: [LocationType.Company, LocationType.TechVendor],\\n        techVendorMaxRam: 64,\\n        techVendorMinRam: 8,\\n    },\\n    {\\n        city: CityName.Aevum,\\n        infiltrationData: {\\n            maxClearanceLevel: 6,\\n            startingSecurityLevel: 5.35,\\n        },\\n        name: LocationName.AevumPolice,\\n        types: [LocationType.Company],\\n    },\\n    {\\n        city: CityName.Aevum,\\n        infiltrationData: {\\n            maxClearanceLevel: 5,\\n            startingSecurityLevel: 5.02,\\n        },\\n        name: LocationName.AevumRhoConstruction,\\n        types: [LocationType.Company],\\n    },\\n    {\\n        city: CityName.Aevum,\\n        costMult: 10,\\n        expMult: 5,\\n        name: LocationName.AevumSnapFitnessGym,\\n        types: [LocationType.Gym],\\n    },\\n    {\\n        city: CityName.Aevum,\\n        costMult: 4,\\n        expMult: 3,\\n        name: LocationName.AevumSummitUniversity,\\n        types: [LocationType.University],\\n    },\\n    {\\n        city: CityName.Aevum,\\n        infiltrationData: {\\n            maxClearanceLevel: 7,\\n            startingSecurityLevel: 5.85,\\n        },\\n        name: LocationName.AevumWatchdogSecurity,\\n        types: [LocationType.Company],\\n    },\\n    {\\n        city: CityName.Aevum,\\n        name: LocationName.AevumCasino,\\n        types: [LocationType.Casino],\\n    },\\n    {\\n        city: CityName.Chongqing,\\n        infiltrationData: {\\n            maxClearanceLevel: 25,\\n            startingSecurityLevel: 16.25,\\n        },\\n        name: LocationName.ChongqingKuaiGongInternational,\\n        types: [LocationType.Company],\\n    },\\n    {\\n        city: CityName.Chongqing,\\n        infiltrationData: {\\n            maxClearanceLevel: 18,\\n            startingSecurityLevel: 12.59,\\n        },\\n        name: LocationName.ChongqingSolarisSpaceSystems,\\n        types: [LocationType.Company],\\n    },\\n    {\\n        city: CityName.Ishima,\\n        infiltrationData: {\\n            maxClearanceLevel: 12,\\n            startingSecurityLevel: 5.02,\\n        },\\n        name: LocationName.IshimaNovaMedical,\\n        types: [LocationType.Company],\\n    },\\n    {\\n        city: CityName.Ishima,\\n        infiltrationData: {\\n            maxClearanceLevel: 10,\\n            startingSecurityLevel: 3.2,\\n        },\\n        name: LocationName.IshimaOmegaSoftware,\\n        types: [LocationType.Company, LocationType.TechVendor],\\n        techVendorMaxRam: 128,\\n        techVendorMinRam: 4,\\n    },\\n    {\\n        city: CityName.Ishima,\\n        infiltrationData: {\\n            maxClearanceLevel: 25,\\n            startingSecurityLevel: 5.38,\\n        },\\n        name: LocationName.IshimaStormTechnologies,\\n        types: [LocationType.Company, LocationType.TechVendor],\\n        techVendorMaxRam: 512,\\n        techVendorMinRam: 32,\\n    },\\n    {\\n        city: CityName.NewTokyo,\\n        infiltrationData: {\\n            maxClearanceLevel: 17,\\n            startingSecurityLevel: 7.18,\\n        },\\n        name: LocationName.NewTokyoDefComm,\\n        types: [LocationType.Company, LocationType.Special],\\n    },\\n    {\\n        city: CityName.NewTokyo,\\n        infiltrationData: {\\n            maxClearanceLevel: 20,\\n            startingSecurityLevel: 5.9,\\n        },\\n        name: LocationName.NewTokyoGlobalPharmaceuticals,\\n        types: [LocationType.Company],\\n    },\\n    {\\n        city: CityName.NewTokyo,\\n        infiltrationData: {\\n            maxClearanceLevel: 5,\\n            startingSecurityLevel: 2.5,\\n        },\\n        name: LocationName.NewTokyoNoodleBar,\\n        types: [LocationType.Company, LocationType.Special],\\n    },\\n    {\\n        city: CityName.NewTokyo,\\n        infiltrationData: {\\n            maxClearanceLevel: 25,\\n            startingSecurityLevel: 5.52,\\n        },\\n        name: LocationName.NewTokyoVitaLife,\\n        types: [LocationType.Company, LocationType.Special],\\n    },\\n    {\\n        city: CityName.NewTokyo,\\n        name: LocationName.NewTokyoArcade,\\n        types: [LocationType.Special],\\n    },\\n    {\\n        city: CityName.Sector12,\\n        infiltrationData: {\\n            maxClearanceLevel: 10,\\n            startingSecurityLevel: 3.62,\\n        },\\n        name: LocationName.Sector12AlphaEnterprises,\\n        types: [LocationType.Company, LocationType.TechVendor],\\n        techVendorMaxRam: 8,\\n        techVendorMinRam: 2,\\n    },\\n    {\\n        city: CityName.Sector12,\\n        infiltrationData: {\\n            maxClearanceLevel: 25,\\n            startingSecurityLevel: 10.59,\\n        },\\n        name: LocationName.Sector12BladeIndustries,\\n        types: [LocationType.Company],\\n    },\\n    {\\n        city: CityName.Sector12,\\n        name: LocationName.Sector12CIA,\\n        types: [LocationType.Company, LocationType.Special],\\n    },\\n    {\\n        city: CityName.Sector12,\\n        infiltrationData: {\\n            maxClearanceLevel: 15,\\n            startingSecurityLevel: 4.66,\\n        },\\n        name: LocationName.Sector12CarmichaelSecurity,\\n        types: [LocationType.Company],\\n    },\\n    {\\n        city: CityName.Sector12,\\n        name: LocationName.Sector12CityHall,\\n        types: [LocationType.Special],\\n    },\\n    {\\n        city: CityName.Sector12,\\n        infiltrationData: {\\n            maxClearanceLevel: 12,\\n            startingSecurityLevel: 5.9,\\n        },\\n        name: LocationName.Sector12DeltaOne,\\n        types: [LocationType.Company],\\n    },\\n    {\\n        city: CityName.Sector12,\\n        name: LocationName.Sector12FoodNStuff,\\n        types: [LocationType.Company],\\n    },\\n    {\\n        city: CityName.Sector12,\\n        infiltrationData: {\\n            maxClearanceLevel: 25,\\n            startingSecurityLevel: 8.18,\\n        },\\n        name: LocationName.Sector12FourSigma,\\n        types: [LocationType.Company],\\n    },\\n    {\\n        city: CityName.Sector12,\\n        infiltrationData: {\\n            maxClearanceLevel: 17,\\n            startingSecurityLevel: 6.02,\\n        },\\n        name: LocationName.Sector12IcarusMicrosystems,\\n        types: [LocationType.Company],\\n    },\\n    {\\n        city: CityName.Sector12,\\n        expMult: 1,\\n        costMult: 1,\\n        name: LocationName.Sector12IronGym,\\n        types: [LocationType.Gym],\\n    },\\n    {\\n        city: CityName.Sector12,\\n        infiltrationData: {\\n            maxClearanceLevel: 5,\\n            startingSecurityLevel: 3.13,\\n        },\\n        name: LocationName.Sector12JoesGuns,\\n        types: [LocationType.Company],\\n    },\\n    {\\n        city: CityName.Sector12,\\n        infiltrationData: {\\n            maxClearanceLevel: 31,\\n            startingSecurityLevel: 16.36,\\n        },\\n        name: LocationName.Sector12MegaCorp,\\n        types: [LocationType.Company],\\n    },\\n    {\\n        city: CityName.Sector12,\\n        name: LocationName.Sector12NSA,\\n        types: [LocationType.Company, LocationType.Special],\\n    },\\n    {\\n        city: CityName.Sector12,\\n        costMult: 20,\\n        expMult: 10,\\n        name: LocationName.Sector12PowerhouseGym,\\n        types: [LocationType.Gym],\\n    },\\n    {\\n        city: CityName.Sector12,\\n        costMult: 3,\\n        expMult: 2,\\n        name: LocationName.Sector12RothmanUniversity,\\n        types: [LocationType.University],\\n    },\\n    {\\n        city: CityName.Sector12,\\n        infiltrationData: {\\n            maxClearanceLevel: 12,\\n            startingSecurityLevel: 5.9,\\n        },\\n        name: LocationName.Sector12UniversalEnergy,\\n        types: [LocationType.Company],\\n    },\\n    {\\n        city: CityName.Volhaven,\\n        infiltrationData: {\\n            maxClearanceLevel: 15,\\n            startingSecurityLevel: 3.59,\\n        },\\n        name: LocationName.VolhavenCompuTek,\\n        types: [LocationType.Company, LocationType.TechVendor],\\n        techVendorMaxRam: 256,\\n        techVendorMinRam: 8,\\n    },\\n    {\\n        city: CityName.Volhaven,\\n        infiltrationData: {\\n            maxClearanceLevel: 18,\\n            startingSecurityLevel: 7.28,\\n        },\\n        name: LocationName.VolhavenHeliosLabs,\\n        types: [LocationType.Company],\\n    },\\n    {\\n        city: CityName.Volhaven,\\n        infiltrationData: {\\n            maxClearanceLevel: 15,\\n            startingSecurityLevel: 4.35,\\n        },\\n        name: LocationName.VolhavenLexoCorp,\\n        types: [LocationType.Company],\\n    },\\n    {\\n        city: CityName.Volhaven,\\n        costMult: 7,\\n        expMult: 4,\\n        name: LocationName.VolhavenMilleniumFitnessGym,\\n        types: [LocationType.Gym],\\n    },\\n    {\\n        city: CityName.Volhaven,\\n        infiltrationData: {\\n            maxClearanceLevel: 50,\\n            startingSecurityLevel: 8.53,\\n        },\\n        name: LocationName.VolhavenNWO,\\n        types: [LocationType.Company],\\n    },\\n    {\\n        city: CityName.Volhaven,\\n        infiltrationData: {\\n            maxClearanceLevel: 25,\\n            startingSecurityLevel: 7.74,\\n        },\\n        name: LocationName.VolhavenOmniTekIncorporated,\\n        types: [LocationType.Company, LocationType.TechVendor],\\n        techVendorMaxRam: 1024,\\n        techVendorMinRam: 128,\\n    },\\n    {\\n        city: CityName.Volhaven,\\n        infiltrationData: {\\n            maxClearanceLevel: 22,\\n            startingSecurityLevel: 6,\\n        },\\n        name: LocationName.VolhavenOmniaCybersystems,\\n        types: [LocationType.Company],\\n    },\\n    {\\n        city: CityName.Volhaven,\\n        infiltrationData: {\\n            maxClearanceLevel: 18,\\n            startingSecurityLevel: 4.77,\\n        },\\n        name: LocationName.VolhavenSysCoreSecurities,\\n        types: [LocationType.Company],\\n    },\\n    {\\n        city: CityName.Volhaven,\\n        costMult: 5,\\n        expMult: 4,\\n        name: LocationName.VolhavenZBInstituteOfTechnology,\\n        types: [LocationType.University],\\n    },\\n    {\\n        city: null,\\n        name: LocationName.Hospital,\\n        types: [LocationType.Hospital],\\n    },\\n    {\\n        city: null,\\n        name: LocationName.Slums,\\n        types: [LocationType.Slums],\\n    },\\n    {\\n        city: null,\\n        name: LocationName.TravelAgency,\\n        types: [LocationType.TravelAgency],\\n    },\\n    {\\n        city: null,\\n        name: LocationName.WorldStockExchange,\\n        types: [LocationType.StockMarket],\\n    },\\n    {\\n        city: CityName.Chongqing,\\n        name: LocationName.ChongqingChurchOfTheMachineGod,\\n        types: [LocationType.Special],\\n    },\\n    {\\n        city: CityName.Ishima,\\n        name: LocationName.IshimaGlitch,\\n        types: [LocationType.Special],\\n    },\\n];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYXRpb25zLW1ldGFkYXRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvdXRpbHMvbG9jYXRpb25zLW1ldGFkYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUssWUFnRUo7QUFoRUQsV0FBSyxZQUFZO0lBQ2YsMENBQTBCLENBQUE7SUFDMUIsa0VBQWtELENBQUE7SUFDbEQsK0RBQStDLENBQUE7SUFDL0MsMERBQTBDLENBQUE7SUFDMUMsb0NBQW9CLENBQUE7SUFDcEIsaUVBQWlELENBQUE7SUFDakQsbUVBQW1ELENBQUE7SUFDbkQsaUVBQWlELENBQUE7SUFDakQseURBQXlDLENBQUE7SUFDekMseURBQXlDLENBQUE7SUFDekMsd0RBQXdDLENBQUE7SUFDeEMsMkRBQTJDLENBQUE7SUFDM0MsMkRBQTJDLENBQUE7SUFDM0Msa0RBQWtDLENBQUE7SUFFbEMseUVBQXlELENBQUE7SUFDekQsc0VBQXNELENBQUE7SUFDdEQsNEVBQTRELENBQUE7SUFFNUQsOERBQThDLENBQUE7SUFDOUMsNERBQTRDLENBQUE7SUFDNUMsMkRBQTJDLENBQUE7SUFDM0Msa0VBQWtELENBQUE7SUFDbEQsd0RBQXdDLENBQUE7SUFDeEMsNkNBQTZCLENBQUE7SUFDN0IsaURBQWlDLENBQUE7SUFDakMsZ0RBQWdDLENBQUE7SUFDaEMsa0VBQWtELENBQUE7SUFDbEQsNENBQTRCLENBQUE7SUFDNUIsK0NBQStCLENBQUE7SUFDL0IsNkNBQTZCLENBQUE7SUFDN0Isd0RBQXdDLENBQUE7SUFDeEMsd0RBQXdDLENBQUE7SUFDeEMsZ0VBQWdELENBQUE7SUFDaEQsNERBQTRDLENBQUE7SUFFNUMsMkNBQTJCLENBQUE7SUFDM0Isd0VBQXdELENBQUE7SUFDeEQsZ0RBQWdDLENBQUE7SUFDaEMsNkNBQTZCLENBQUE7SUFDN0IseUNBQXlCLENBQUE7SUFFekIsa0RBQWtDLENBQUE7SUFDbEMsc0RBQXNDLENBQUE7SUFD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\",\"filename\":\"scripts/utils/locations-metadata.js\",\"server\":\"home\"}}],[\"scripts/infiltration/candidates.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { locationsMetadata } from 'scripts/utils/locations-metadata';\\nconst calcReward = (maxLevel, reward, difficulty, ns) => {\\n    const levelBonus = maxLevel * Math.pow(1.01, maxLevel);\\n    return (Math.pow(reward + 1, 2) *\\n        Math.pow(difficulty, 3) *\\n        3e3 *\\n        levelBonus *\\n        ns.getBitNodeMultipliers().InfiltrationMoney);\\n};\\nexport async function main(ns) {\\n    const res = locationsMetadata\\n        .filter((location) => 'infiltrationData' in location)\\n        .map((company) => ({\\n        name: company.name,\\n        city: company.city,\\n        rounds: company.infiltrationData?.maxClearanceLevel ?? 0,\\n        reward: calcReward(company.infiltrationData?.maxClearanceLevel ?? 0, 3, company.infiltrationData?.startingSecurityLevel ?? 0, ns),\\n    }))\\n        .sort((a, b) => b.reward - a.reward)\\n        .map((company) => `${company.name} (${company.city}, ${company.rounds} rounds): ${ns.formatNumber(company.reward)} (${ns.formatNumber(company.reward / company.rounds)} per round)`)\\n        .join('\\\\n');\\n    ns.tprint('\\\\n' + res);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FuZGlkYXRlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2luZmlsdHJhdGlvbi9jYW5kaWRhdGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGtDQUFrQyxDQUFBO0FBRXBFLE1BQU0sVUFBVSxHQUFHLENBQ2pCLFFBQWdCLEVBQ2hCLE1BQWMsRUFDZCxVQUFrQixFQUNsQixFQUFNLEVBQ04sRUFBRTtJQUNGLE1BQU0sVUFBVSxHQUFHLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUV0RCxPQUFPLENBQ0wsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN2QixJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7UUFDdkIsR0FBRztRQUNILFVBQVU7UUFDVixFQUFFLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxpQkFBaUIsQ0FDN0MsQ0FBQTtBQUNILENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxHQUFHLEdBQUcsaUJBQWlCO1NBQzFCLE1BQU0sQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsa0JBQWtCLElBQUksUUFBUSxDQUFDO1NBQ3BELEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUk7UUFDbEIsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJO1FBQ2xCLE1BQU0sRUFBRSxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsaUJBQWlCLElBQUksQ0FBQztRQUN4RCxNQUFNLEVBQUUsVUFBVSxDQUNoQixPQUFPLENBQUMsZ0JBQWdCLEVBQUUsaUJBQWlCLElBQUksQ0FBQyxFQUNoRCxDQUFDLEVBQ0QsT0FBTyxDQUFDLGdCQUFnQixFQUFFLHFCQUFxQixJQUFJLENBQUMsRUFDcEQsRUFBRSxDQUNIO0tBQ0YsQ0FBQyxDQUFDO1NBQ0YsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDO1NBQ25DLEdBQUcsQ0FDRixDQUFDLE9BQU8sRUFBRSxFQUFFLENBQ1YsR0FBRyxPQUFPLENBQUMsSUFBSSxLQUFLLE9BQU8sQ0FBQyxJQUFJLEtBQzlCLE9BQU8sQ0FBQyxNQUNWLGFBQWEsRUFBRSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLFlBQVksQ0FDOUQsT0FBTyxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUNoQyxhQUFhLENBQ2pCO1NBQ0EsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBRWIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUE7QUFDdkIsQ0FBQyJ9\",\"filename\":\"scripts/infiltration/candidates.js\",\"server\":\"home\"}}],[\"scripts/infiltration/list-candidates.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { locationsMetadata } from 'scripts/utils/locations-metadata';\\nconst calcReward = (maxLevel, reward, difficulty, ns) => {\\n    const levelBonus = maxLevel * Math.pow(1.01, maxLevel);\\n    return (Math.pow(reward + 1, 2) *\\n        Math.pow(difficulty, 3) *\\n        3e3 *\\n        levelBonus *\\n        ns.getBitNodeMultipliers().InfiltrationMoney);\\n};\\nexport async function main(ns) {\\n    const res = locationsMetadata\\n        .filter((location) => 'infiltrationData' in location)\\n        .map((company) => ({\\n        name: company.name,\\n        city: company.city,\\n        rounds: company.infiltrationData?.maxClearanceLevel ?? 0,\\n        reward: calcReward(company.infiltrationData?.maxClearanceLevel ?? 0, 3, company.infiltrationData?.startingSecurityLevel ?? 0, ns),\\n    }))\\n        .sort((a, b) => b.reward - a.reward)\\n        .map((company) => `${company.name} (${company.city}, ${company.rounds} rounds): ${ns.formatNumber(company.reward)} (${ns.formatNumber(company.reward / company.rounds)} per round)`)\\n        .join('\\\\n');\\n    ns.tprint('\\\\n' + res);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1jYW5kaWRhdGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvaW5maWx0cmF0aW9uL2xpc3QtY2FuZGlkYXRlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQTtBQUVwRSxNQUFNLFVBQVUsR0FBRyxDQUNqQixRQUFnQixFQUNoQixNQUFjLEVBQ2QsVUFBa0IsRUFDbEIsRUFBTSxFQUNOLEVBQUU7SUFDRixNQUFNLFVBQVUsR0FBRyxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFFdEQsT0FBTyxDQUNMLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZCLEdBQUc7UUFDSCxVQUFVO1FBQ1YsRUFBRSxDQUFDLHFCQUFxQixFQUFFLENBQUMsaUJBQWlCLENBQzdDLENBQUE7QUFDSCxDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sR0FBRyxHQUFHLGlCQUFpQjtTQUMxQixNQUFNLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixJQUFJLFFBQVEsQ0FBQztTQUNwRCxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDakIsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJO1FBQ2xCLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtRQUNsQixNQUFNLEVBQUUsT0FBTyxDQUFDLGdCQUFnQixFQUFFLGlCQUFpQixJQUFJLENBQUM7UUFDeEQsTUFBTSxFQUFFLFVBQVUsQ0FDaEIsT0FBTyxDQUFDLGdCQUFnQixFQUFFLGlCQUFpQixJQUFJLENBQUMsRUFDaEQsQ0FBQyxFQUNELE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxxQkFBcUIsSUFBSSxDQUFDLEVBQ3BELEVBQUUsQ0FDSDtLQUNGLENBQUMsQ0FBQztTQUNGLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQztTQUNuQyxHQUFHLENBQ0YsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUNWLEdBQUcsT0FBTyxDQUFDLElBQUksS0FBSyxPQUFPLENBQUMsSUFBSSxLQUM5QixPQUFPLENBQUMsTUFDVixhQUFhLEVBQUUsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxZQUFZLENBQzlELE9BQU8sQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FDaEMsYUFBYSxDQUNqQjtTQUNBLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUViLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFBO0FBQ3ZCLENBQUMifQ==\",\"filename\":\"scripts/infiltration/list-candidates.js\",\"server\":\"home\"}}],[\"exploits/tmp.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main() {\\n    const w = eval('window');\\n    w.parent.postMessage(true, '*');\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG1wLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2V4cGxvaXRzL3RtcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUk7SUFDeEIsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBa0IsQ0FBQTtJQUN6QyxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUE7QUFDakMsQ0FBQyJ9\",\"filename\":\"exploits/tmp.js\",\"server\":\"home\"}}],[\"exploits/true-recursion.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Open Arcade, change the iframe src to https://bitburner-official.github.io/\\n// Then run this script in the console of the inner game\\nexport async function main() {\\n    const w = eval('window');\\n    w.parent.postMessage(true, '*');\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJ1ZS1yZWN1cnNpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZXhwbG9pdHMvdHJ1ZS1yZWN1cnNpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsOEVBQThFO0FBQzlFLHdEQUF3RDtBQUV4RCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUk7SUFDeEIsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBa0IsQ0FBQTtJQUN6QyxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUE7QUFDakMsQ0FBQyJ9\",\"filename\":\"exploits/true-recursion.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"s0\",\"s1\",\"s2\",\"s3\",\"s4\",\"s5\",\"s6\",\"s7\",\"s8\",\"s9\",\"s10\",\"s11\",\"s12\",\"s13\",\"s14\",\"s15\",\"s16\",\"s17\",\"s18\",\"s19\",\"s20\",\"s21\",\"s22\",\"s23\",\"s24\",\"darkweb\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"scripts/contract-finder.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7146.409999995723,\"ramUsage\":22.4,\"server\":\"home\",\"scriptKey\":\"scripts/contract-finder.js*[]\",\"title\":\"scripts/contract-finder.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"scripts/hack-all.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":184922470.60006616,\"onlineMoneyMade\":244610620572.8768,\"onlineRunningTime\":7140.609999995729,\"ramUsage\":5.25,\"server\":\"home\",\"scriptKey\":\"scripts/hack-all.js*[\\\"rho-construction\\\"]\",\"title\":\"scripts/hack-all.js rho-construction\",\"threads\":1,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"15.8.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":66,\"moneyAvailable\":28675324421,\"moneyMax\":1433766221050,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1376,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"94.2.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":66,\"moneyAvailable\":25697675853,\"moneyMax\":1284883792650,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1193,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"89.8.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"b-and-a\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"b-and-a\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"b-and-a\"}}]]},\"serversOnNetwork\":[\"4sigma\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":57,\"moneyAvailable\":9297662671.5,\"moneyMax\":464883133575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":918,\"serverGrowth\":62,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"9.3.5.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":60,\"moneyAvailable\":13181833419.5,\"moneyMax\":659091670975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1178,\"serverGrowth\":85,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"45.6.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":66,\"moneyAvailable\":18890953690.5,\"moneyMax\":944547684525,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1227,\"serverGrowth\":83,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"39.9.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":34,\"moneyAvailable\":9595191050.5,\"moneyMax\":479759552525,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1114,\"serverGrowth\":61,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"67.2.0.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":61,\"moneyAvailable\":9962836974,\"moneyMax\":498141848700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1066,\"serverGrowth\":99,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"90.8.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"stormtech\",\"b-and-a\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":48,\"moneyAvailable\":9346877311.5,\"moneyMax\":467343865575,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1064,\"serverGrowth\":90,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"91.4.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\",\"blade\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":65,\"moneyAvailable\":14982323527.5,\"moneyMax\":749116176375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1161,\"serverGrowth\":95,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"67.8.4.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":63,\"moneyAvailable\":819853884,\"moneyMax\":40992694200,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1185,\"serverGrowth\":83,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"90.8.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":66,\"moneyAvailable\":500000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1519,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"21.2.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"microdyne\",\"omnitek\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":56,\"moneyAvailable\":508445031,\"moneyMax\":25422251550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":939,\"serverGrowth\":88,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"23.6.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":59,\"moneyAvailable\":447214791,\"moneyMax\":22360739550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1029,\"serverGrowth\":73,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"63.2.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"infocomm\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"infocomm\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"infocomm\"}}]]},\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":58,\"moneyAvailable\":363069648,\"moneyMax\":18153482400,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":906,\"serverGrowth\":58,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"84.1.6.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"helios\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"helios\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"helios\"}}]]},\"serversOnNetwork\":[\"applied-energetics\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":60,\"moneyAvailable\":297416639,\"moneyMax\":14870831950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":873,\"serverGrowth\":74,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"32.9.4.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"vitalife\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"vitalife\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"vitalife\"}}]]},\"serversOnNetwork\":[\"run4theh111z\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":59,\"moneyAvailable\":366526220,\"moneyMax\":18326311000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":829,\"serverGrowth\":62,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"74.7.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"icarus\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"icarus\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"icarus\"}}]]},\"serversOnNetwork\":[\"deltaone\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":59,\"moneyAvailable\":478505853,\"moneyMax\":23925292650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":851,\"serverGrowth\":93,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"18.6.1.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"univ-energy\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"univ-energy\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"univ-energy\"}}]]},\"serversOnNetwork\":[\"unitalife\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":58,\"moneyAvailable\":591392328,\"moneyMax\":29569616400,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":807,\"serverGrowth\":90,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"64.9.0.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"titan-labs\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"titan-labs\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"titan-labs\"}}]]},\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":53,\"moneyAvailable\":442039598.5,\"moneyMax\":22101979925,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":847,\"serverGrowth\":61,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"53.9.6.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"microdyne\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"microdyne\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"microdyne\"}}]]},\"serversOnNetwork\":[\"zb-def\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":45,\"moneyAvailable\":281971462,\"moneyMax\":14098573100,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":807,\"serverGrowth\":90,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"20.2.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zeus-med\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":47,\"moneyAvailable\":448359540,\"moneyMax\":22417977000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":942,\"serverGrowth\":71,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"42.9.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"galactic-cyber\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"galactic-cyber\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"galactic-cyber\"}}]]},\"serversOnNetwork\":[\"rho-construction\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":37,\"moneyAvailable\":405534024,\"moneyMax\":20276701200,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":849,\"serverGrowth\":72,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"73.7.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"aerocorp\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"aerocorp\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"aerocorp\"}}]]},\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":55,\"moneyAvailable\":515865912,\"moneyMax\":25793295600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":913,\"serverGrowth\":65,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"26.9.0.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"omnia\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"omnia\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"omnia\"}}]]},\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":63,\"moneyAvailable\":456738747,\"moneyMax\":22836937350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":858,\"serverGrowth\":66,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"94.5.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"zb-def\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"zb-def\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"zb-def\"}}]]},\"serversOnNetwork\":[\"univ-energy\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":40,\"moneyAvailable\":452695211.5,\"moneyMax\":22634760575,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":800,\"serverGrowth\":69,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"3.7.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"applied-energetics\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"applied-energetics\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"applied-energetics\"}}]]},\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":42,\"moneyAvailable\":473793948,\"moneyMax\":23689697400,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":795,\"serverGrowth\":74,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"13.5.1.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"solaris\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"solaris\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"solaris\"}}]]},\"serversOnNetwork\":[\"omnia\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":51,\"moneyAvailable\":365636817.5,\"moneyMax\":18281840875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":826,\"serverGrowth\":80,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"85.5.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"deltaone\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"deltaone\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"deltaone\"}}]]},\"serversOnNetwork\":[\"snap-fitness\",\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":56,\"moneyAvailable\":720511070.5,\"moneyMax\":36025553525,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":848,\"serverGrowth\":68,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"19.3.6.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"global-pharm\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"global-pharm\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"global-pharm\"}}]]},\"serversOnNetwork\":[\"alpha-ent\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":51,\"moneyAvailable\":858273391,\"moneyMax\":42913669550,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":815,\"serverGrowth\":84,\"runningScripts\":[]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"21.3.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"nova-med\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"nova-med\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"nova-med\"}}]]},\"serversOnNetwork\":[\"solaris\",\"titan-labs\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":53,\"moneyAvailable\":550214746,\"moneyMax\":27510737300,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":803,\"serverGrowth\":82,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"32.1.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"zeus-med\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"zeus-med\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"zeus-med\"}}]]},\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":49,\"moneyAvailable\":708220593.5,\"moneyMax\":35411029675,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":850,\"serverGrowth\":73,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"78.5.8.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"unitalife\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"unitalife\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"unitalife\"}}]]},\"serversOnNetwork\":[\"global-pharm\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":47,\"moneyAvailable\":539974490,\"moneyMax\":26998724500,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":825,\"serverGrowth\":76,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"61.6.6.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"lexo-corp\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"lexo-corp\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"lexo-corp\"}}]]},\"serversOnNetwork\":[\"rothman-uni\",\"aerocorp\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":52,\"moneyAvailable\":396320541,\"moneyMax\":19816027050,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":678,\"serverGrowth\":56,\"runningScripts\":[]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"21.9.4.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"rho-construction\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"rho-construction\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"rho-construction\"}}]]},\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":100,\"minDifficulty\":29,\"moneyAvailable\":16133675000,\"moneyMax\":16133675000,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":525,\"serverGrowth\":47,\"runningScripts\":[]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"60.5.8.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"alpha-ent\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"alpha-ent\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"alpha-ent\"}}]]},\"serversOnNetwork\":[\"rothman-uni\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":35,\"moneyAvailable\":363742368.5,\"moneyMax\":18187118425,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":584,\"serverGrowth\":53,\"runningScripts\":[]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"40.5.3.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"aevum-police\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"aevum-police\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"aevum-police\"}}]]},\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":51,\"moneyAvailable\":195540160,\"moneyMax\":9777008000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":402,\"serverGrowth\":44,\"runningScripts\":[]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"59.6.9.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"rothman-uni\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"rothman-uni\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"rothman-uni\"}}]]},\"serversOnNetwork\":[\"netlink\",\"lexo-corp\",\"alpha-ent\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":93773896.5,\"moneyMax\":4688694825,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":379,\"serverGrowth\":39,\"runningScripts\":[]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"47.1.6.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"zb-institute\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"zb-institute\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"zb-institute\"}}]]},\"serversOnNetwork\":[\"crush-fitness\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":55,\"moneyAvailable\":488980042,\"moneyMax\":24449002100,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":765,\"serverGrowth\":77,\"runningScripts\":[]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"40.0.7.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"summit-uni\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"summit-uni\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"summit-uni\"}}]]},\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":39,\"moneyAvailable\":164116777.5,\"moneyMax\":8205838875,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":439,\"serverGrowth\":51,\"runningScripts\":[]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"17.3.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"syscore\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"syscore\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"syscore\"}}]]},\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":41,\"moneyAvailable\":204365385.5,\"moneyMax\":10218269275,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":560,\"serverGrowth\":70,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"6.7.7.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"catalyst\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"catalyst\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"catalyst\"}}]]},\"serversOnNetwork\":[\"netlink\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":43,\"moneyAvailable\":253583864.5,\"moneyMax\":12679193225,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":421,\"serverGrowth\":40,\"runningScripts\":[]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"11.3.1.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"the-hub\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"the-hub\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"the-hub\"}}]]},\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":93162450.5,\"moneyMax\":4658122525,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":296,\"serverGrowth\":48,\"runningScripts\":[]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":true,\"ip\":\"81.3.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"computek\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"computek\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"computek\"}}]]},\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":37,\"moneyAvailable\":113477533.5,\"moneyMax\":5673876675,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":349,\"serverGrowth\":56,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"11.3.8.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"netlink\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"netlink\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"netlink\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":44,\"moneyAvailable\":137500000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":388,\"serverGrowth\":67,\"runningScripts\":[]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"21.9.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"johnson-ortho\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"johnson-ortho\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"johnson-ortho\"}}]]},\"serversOnNetwork\":[\"omega-net\",\"summit-uni\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":36865488,\"moneyMax\":1843274400,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":291,\"serverGrowth\":61,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":true,\"ip\":\"81.8.1.4\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"n00dles\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"n00dles\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":2,\"hackDifficulty\":2,\"minDifficulty\":1,\"moneyAvailable\":35000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":true,\"ip\":\"65.5.5.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"foodnstuff\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"foodnstuff\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":1000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":true,\"ip\":\"49.6.2.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"sigma-cosmetics\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"sigma-cosmetics\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":1150000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":4,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":true,\"ip\":\"13.0.6.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"joesguns\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"joesguns\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":1250000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":4,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"97.7.0.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"zer0\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"zer0\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"harakiri-sushi\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":3750000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":4,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":true,\"ip\":\"83.6.2.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"nectar-net\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"nectar-net\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"hong-fang-tea\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":1375000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":4,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"4.7.5.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"neo-net\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"neo-net\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":2500000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":4,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"82.3.2.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"silver-helix\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"silver-helix\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":22500000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":true,\"ip\":\"97.2.2.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"hong-fang-tea\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"hong-fang-tea\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":1500000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":4,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":true,\"ip\":\"42.4.9.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"harakiri-sushi\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"harakiri-sushi\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":2000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":4,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"0.0.2.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"phantasy\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"phantasy\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"nectar-net\",\"computek\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":12000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"95.8.2.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"max-hardware\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"max-hardware\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":5000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":4,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"44.0.7.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"omega-net\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"omega-net\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"nectar-net\",\"the-hub\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":17,\"minDifficulty\":17,\"moneyAvailable\":1625465575,\"moneyMax\":1625465575,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":185,\"serverGrowth\":39,\"runningScripts\":[]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"40.7.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"crush-fitness\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"crush-fitness\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"crush-fitness\"}}]]},\"serversOnNetwork\":[\"phantasy\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":24807903,\"moneyMax\":1240395150,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":236,\"serverGrowth\":33,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"89.6.9.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"iron-gym\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"iron-gym\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":10000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":4,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"55.4.3.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"millenium-fitness\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"millenium-fitness\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"millenium-fitness\"}}]]},\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":125000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":515,\"serverGrowth\":41,\"runningScripts\":[]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"25.6.4.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":43,\"moneyAvailable\":450000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1048,\"serverGrowth\":57,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"46.7.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"snap-fitness\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"snap-fitness\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"snap-fitness\"}}]]},\"serversOnNetwork\":[\"lexo-corp\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":34,\"moneyAvailable\":225000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":690,\"serverGrowth\":52,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"89.5.0.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"run4theh111z\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"run4theh111z\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"run4theh111z\"}}]]},\"serversOnNetwork\":[\"taiyang-digital\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":519,\"serverGrowth\":1,\"runningScripts\":[]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"45.3.9.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"I.I.I.I\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"I.I.I.I\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"I.I.I.I\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":362,\"serverGrowth\":1,\"runningScripts\":[]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"96.9.9.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"avmnite-02h\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"avmnite-02h\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"phantasy\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":212,\"serverGrowth\":1,\"runningScripts\":[]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"82.6.1.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\".\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\".\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\".\"}}]]},\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":520,\"serverGrowth\":1,\"runningScripts\":[]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"86.5.4.9\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"CSEC\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"CSEC\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"foodnstuff\",\"neo-net\",\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":4,\"requiredHackingSkill\":57,\"serverGrowth\":1,\"runningScripts\":[]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"68.6.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"36.5.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":4500,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"6.6.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"darkweb\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"darkweb\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"darkweb\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"s0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s0\",\"httpPortOpen\":true,\"ip\":\"64.5.7.8\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"s0\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"s0\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s0\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"s1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s1\",\"httpPortOpen\":true,\"ip\":\"61.5.9.8\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"s1\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"s1\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s1\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"s2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s2\",\"httpPortOpen\":true,\"ip\":\"28.4.8.1\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"s2\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"s2\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s2\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"s3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s3\",\"httpPortOpen\":true,\"ip\":\"64.9.2.9\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"s3\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"s3\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s3\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"s4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s4\",\"httpPortOpen\":true,\"ip\":\"93.7.8.1\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"s4\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"s4\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s4\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"s5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s5\",\"httpPortOpen\":true,\"ip\":\"22.2.1.0\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"s5\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"s5\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s5\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"s6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s6\",\"httpPortOpen\":true,\"ip\":\"33.2.6.9\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"s6\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"s6\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s6\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"s7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s7\",\"httpPortOpen\":true,\"ip\":\"79.5.4.7\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"s7\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"s7\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s7\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"s8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s8\",\"httpPortOpen\":true,\"ip\":\"41.6.9.2\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"s8\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"s8\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s8\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"s9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s9\",\"httpPortOpen\":true,\"ip\":\"75.5.5.1\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"s9\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"s9\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s9\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"s10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s10\",\"httpPortOpen\":true,\"ip\":\"96.5.3.1\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"s10\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"s10\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s10\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"s11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s11\",\"httpPortOpen\":true,\"ip\":\"8.8.8.7\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"s11\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"s11\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s11\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"s12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s12\",\"httpPortOpen\":true,\"ip\":\"12.7.0.0\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"s12\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"s12\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s12\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"s13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s13\",\"httpPortOpen\":true,\"ip\":\"6.8.9.5\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"s13\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"s13\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s13\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"s14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s14\",\"httpPortOpen\":true,\"ip\":\"23.4.6.4\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"s14\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"s14\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s14\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"s15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s15\",\"httpPortOpen\":true,\"ip\":\"75.7.1.0\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"s15\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"s15\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s15\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"s16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s16\",\"httpPortOpen\":true,\"ip\":\"95.2.6.8\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"s16\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"s16\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s16\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"s17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s17\",\"httpPortOpen\":true,\"ip\":\"18.2.0.6\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"s17\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"s17\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s17\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"s18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s18\",\"httpPortOpen\":true,\"ip\":\"6.4.4.6\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"s18\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"s18\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s18\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"s19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s19\",\"httpPortOpen\":true,\"ip\":\"86.1.7.7\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"s19\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"s19\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s19\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"s20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s20\",\"httpPortOpen\":true,\"ip\":\"15.3.5.6\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"s20\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"s20\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s20\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"s21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s21\",\"httpPortOpen\":true,\"ip\":\"48.2.8.2\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"s21\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"s21\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s21\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":315.60999999999063,\"ramUsage\":1.75,\"server\":\"s21\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"rho-construction\\\"]\",\"title\":\"scripts/simple-weaken.js rho-construction\",\"threads\":7317,\"temporary\":false}}]}},\"s22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s22\",\"httpPortOpen\":true,\"ip\":\"71.5.9.3\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"s22\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"s22\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s22\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":315.60999999999063,\"ramUsage\":1.75,\"server\":\"s22\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"rho-construction\\\"]\",\"title\":\"scripts/simple-weaken.js rho-construction\",\"threads\":9362,\"temporary\":false}}]}},\"s23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s23\",\"httpPortOpen\":true,\"ip\":\"26.6.7.6\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"s23\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"s23\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s23\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":315.60999999999063,\"ramUsage\":1.75,\"server\":\"s23\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"rho-construction\\\"]\",\"title\":\"scripts/simple-weaken.js rho-construction\",\"threads\":9362,\"temporary\":false}}]}},\"s24\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s24\",\"httpPortOpen\":true,\"ip\":\"55.4.9.4\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"s24\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"s24\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s24\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":315.60999999999063,\"ramUsage\":1.75,\"server\":\"s24\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"rho-construction\\\"]\",\"title\":\"scripts/simple-weaken.js rho-construction\",\"threads\":9351,\"temporary\":false}}]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":84.4319,\"discovery\":\"known\",\"playerReputation\":288808.1296477083}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"favor\":147.999,\"discovery\":\"known\",\"playerReputation\":781226.9245748005}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"favor\":161.2878,\"discovery\":\"known\",\"playerReputation\":342052.9858335489}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"favor\":114.351,\"discovery\":\"known\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"favor\":71.1658,\"discovery\":\"known\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"favor\":105.7182,\"discovery\":\"known\",\"playerReputation\":252892.66956076593}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"favor\":1,\"discovery\":\"known\",\"playerReputation\":30000}}}","AliasesSave":"{\"nuke\":\"run scripts/nuke.js\",\"sa\":\"scan-analyze\",\"c\":\"connect\",\"scpa\":\"run scripts/scp-all.js\",\"hc\":\"run scripts/hack-candidates.js\",\"ha\":\"run scripts/hack-all.js\",\"cf\":\"run scripts/contract-finder.js\",\"st\":\"run scripts/server-tree.js\"}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":10,\"ActiveScriptsScriptPageSize\":10,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"EnableHistorySearch\":false,\"GoTraditionalStyle\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiAddress\":\"localhost\",\"RemoteFileApiPort\":12525,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":false,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":false,\"TailRenderInterval\":1000,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\",\"maplocation\":\"#ffffff\",\"bnlvl0\":\"#ffff00\",\"bnlvl1\":\"#ff0000\",\"bnlvl2\":\"#48d1cc\",\"bnlvl3\":\"#0000ff\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-3,\"y\":13,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"38","AllGangsSave":"","LastExportBonus":"1713289375503","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}","GoSave":"{\"previousGame\":{\"ai\":\"Illuminati\",\"board\":[\"X..X..X\",\"..XX...\",\"X..XXXX\",\"XX.X.XX\",\"XX.X...\",\".XXXX.X\",\"XX..X..\"],\"previousPlayer\":null},\"currentGame\":{\"ai\":\"Illuminati\",\"board\":[\"X..X..X\",\"..XX...\",\"X..XXXX\",\"XX.X.XX\",\"XX.X...\",\".XXXX.X\",\"XX..X..\"],\"previousBoard\":[\"X..X..X\",\"..XX...\",\"X..XXXX\",\"XX.X.XX\",\"XX.X...\",\"OXXXX.X\",\".X..X..\"],\"previousPlayer\":null,\"cheatCount\":0,\"passCount\":2},\"stats\":{\"Netburners\":{\"favor\":0,\"highestWinStreak\":1,\"losses\":0,\"nodes\":0,\"wins\":1,\"oldWinStreak\":0,\"winStreak\":0,\"nodePower\":0},\"Illuminati\":{\"favor\":0,\"highestWinStreak\":2,\"losses\":78,\"nodes\":1102,\"wins\":29,\"oldWinStreak\":-4,\"winStreak\":1,\"nodePower\":3059},\"The Black Hand\":{\"favor\":18,\"highestWinStreak\":14,\"losses\":6,\"nodes\":0,\"wins\":37,\"oldWinStreak\":4,\"winStreak\":0,\"nodePower\":0}}}"}}