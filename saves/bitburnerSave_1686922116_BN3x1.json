{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":5,\"max\":26},\"skills\":{\"hacking\":408,\"strength\":169,\"defense\":168,\"dexterity\":168,\"agility\":169,\"charisma\":1,\"intelligence\":0},\"exp\":{\"hacking\":9069105.785278749,\"strength\":23052.905616904227,\"defense\":22647.325122230675,\"dexterity\":22473.504910227723,\"agility\":23238.923738521422,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.4554323971548855,\"hacking_speed\":1.470826713538506,\"hacking_money\":1.3861260925284622,\"hacking_grow\":1.3861260925284622,\"hacking\":1.6351782982035135,\"strength\":1.3861260925284622,\"defense\":1.3861260925284622,\"dexterity\":1.3861260925284622,\"agility\":1.3861260925284622,\"charisma\":1.3861260925284622,\"hacking_exp\":1.524738701781308,\"strength_exp\":1.524738701781308,\"defense_exp\":1.524738701781308,\"dexterity_exp\":1.524738701781308,\"agility_exp\":1.524738701781308,\"charisma_exp\":1.524738701781308,\"company_rep\":1.3861260925284622,\"faction_rep\":1.3861260925284622,\"crime_money\":1.3861260925284622,\"crime_success\":1.3861260925284622,\"hacknet_node_money\":1.3861260925284622,\"hacknet_node_purchase_cost\":0.7214278740117329,\"hacknet_node_ram_cost\":0.7214278740117329,\"hacknet_node_core_cost\":0.7214278740117329,\"hacknet_node_level_cost\":0.7214278740117329,\"work_money\":1.3861260925284622,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":7,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"SoA - Knowledge of Apollo\"},{\"level\":1,\"name\":\"SoA - phyzical WKS harmonizer\"},{\"level\":1,\"name\":\"SoA - Hunt of Artemis\"},{\"level\":1,\"name\":\"SoA - Trickery of Hermes\"}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"bitNodeN\":3,\"corporation\":{\"ctor\":\"Corporation\",\"data\":{\"name\":\"Nepcorp\",\"divisions\":{\"ctor\":\"JSONMap\",\"data\":[[\"Nepplants\",{\"ctor\":\"Division\",\"data\":{\"name\":\"Nepplants\",\"type\":\"Agriculture\",\"researchPoints\":4010.2154177249595,\"researched\":{\"ctor\":\"JSONSet\",\"data\":[]},\"requiredMaterials\":{\"Water\":0.5,\"Chemicals\":0.2},\"producedMaterials\":[\"Plants\",\"Food\"],\"products\":{\"ctor\":\"JSONMap\",\"data\":[]},\"makesProducts\":false,\"awareness\":122.20634825086421,\"popularity\":44.826137823755154,\"startingCost\":40000000000,\"realEstateFactor\":0.72,\"researchFactor\":0.5,\"hardwareFactor\":0.2,\"robotFactor\":0.3,\"aiCoreFactor\":0.3,\"advertisingFactor\":0.04,\"productionMult\":241.4150139763717,\"lastCycleRevenue\":22770191.740567353,\"lastCycleExpenses\":6665960.73410884,\"thisCycleRevenue\":227455860.73814148,\"thisCycleExpenses\":66575098.54475275,\"state\":\"SALE\",\"newInd\":false,\"warehouses\":{\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":10,\"city\":\"Sector-12\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":3.4545058974968015,\"quality\":1,\"demand\":72.81317882826778,\"demandRange\":[65,85],\"competition\":50.839895704349594,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":233.481466938823,\"actualSellAmount\":0,\"productionAmount\":-233.48226414491674,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1496.440757887097,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":46000,\"quality\":8.484657301364589,\"demand\":79.52971528139938,\"demandRange\":[70,90],\"competition\":39.47137634104965,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":466.9645282898335,\"productionAmount\":466.9645282898335,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":6468.60041585068,\"productionLimit\":null,\"desiredSellAmount\":\"PROD\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":6468.60041585068,\"maxSellPerCycle\":1102.3275493801655,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":8.482015699914971,\"demand\":60.165659128058294,\"demandRange\":[20,90],\"competition\":49.35440354986366,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":466.9645282898335,\"productionAmount\":466.9645282898335,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2906.170143788016,\"productionLimit\":null,\"desiredSellAmount\":\"PROD\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":2906.170143788016,\"maxSellPerCycle\":697.550390681779,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":2800,\"quality\":1,\"demand\":86.02501070310984,\"demandRange\":[80,90],\"competition\":85.34389614905965,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":9167.30370579538,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":1.3818023589986979,\"quality\":1,\"demand\":52.216492926741395,\"demandRange\":[40,70],\"competition\":73.82207396906898,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":93.3925867755292,\"actualSellAmount\":0,\"productionAmount\":-93.3929056579667,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":8177.756746096304,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":96,\"quality\":1,\"demand\":85.40251724322252,\"demandRange\":[80,99],\"competition\":93.46775834606703,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":70764.50935785507,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":2520,\"quality\":1,\"demand\":87.22843796485549,\"demandRange\":[80,99],\"competition\":87.84631566009716,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":14247.635369584958,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":146400,\"quality\":1,\"demand\":40.076613172476655,\"demandRange\":[5,99],\"competition\":38.20333613077954,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":68767.05313145624,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":3000.000000000002,\"sizeUsed\":2580.2418154128245,\"smartSupplyEnabled\":true,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":466.9645282898335}},\"Volhaven\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":10,\"city\":\"Volhaven\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":3.470292439646073,\"quality\":1,\"demand\":77.43421199777009,\"demandRange\":[65,85],\"competition\":46.77475850605547,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":233.62969262155283,\"actualSellAmount\":0,\"productionAmount\":-233.6296582424356,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1547.11066161871,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":46000,\"quality\":8.490598458562157,\"demand\":73.78421985311238,\"demandRange\":[70,90],\"competition\":53.550243456126296,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":467.2593164848712,\"productionAmount\":467.2593164848712,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5336.241676392991,\"productionLimit\":null,\"desiredSellAmount\":\"PROD\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":5336.241676392991,\"maxSellPerCycle\":793.0300321162955,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":8.487433465979171,\"demand\":61.26181035315219,\"demandRange\":[20,90],\"competition\":48.69296525390835,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":467.2593164848712,\"productionAmount\":467.2593164848712,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2876.196432869219,\"productionLimit\":null,\"desiredSellAmount\":\"PROD\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":2876.196432869219,\"maxSellPerCycle\":727.0219852523095,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":2800,\"quality\":1,\"demand\":80.1587254117085,\"demandRange\":[80,90],\"competition\":66.92279338357137,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":7994.424472044574,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":1.388116975858452,\"quality\":1,\"demand\":50.609595973132926,\"demandRange\":[40,70],\"competition\":57.885930001065994,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":93.45187704862114,\"actualSellAmount\":0,\"productionAmount\":-93.45186329697425,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":9787.06739371839,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":96,\"quality\":1,\"demand\":93.00958376912517,\"demandRange\":[80,99],\"competition\":85.78891988842457,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":74511.90589798758,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":2520,\"quality\":1,\"demand\":81.60550963567243,\"demandRange\":[80,99],\"competition\":86.91827545073578,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":14671.609393834198,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":146400,\"quality\":1,\"demand\":30.958199352372276,\"demandRange\":[5,99],\"competition\":42.270505217017,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":82926.63786475778,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":3000.000000000002,\"sizeUsed\":2580.242920470775,\"smartSupplyEnabled\":true,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":467.2593164848712}},\"Ishima\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":10,\"city\":\"Ishima\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":3.415769456909402,\"quality\":1,\"demand\":82.92298657534535,\"demandRange\":[65,85],\"competition\":46.28317933601734,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":231.05181982946138,\"actualSellAmount\":0,\"productionAmount\":-230.71024288377043,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1577.110340593257,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":46000.371446218356,\"quality\":8.452802367899674,\"demand\":87.54728002309189,\"demandRange\":[70,90],\"competition\":80.95701135725706,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":461.42048576754087,\"productionAmount\":461.42048576754087,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":4366.543900418387,\"productionLimit\":null,\"desiredSellAmount\":\"PROD\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":4366.543900418387,\"maxSellPerCycle\":608.3920019906284,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":8.45296462441675,\"demand\":65.50012307481613,\"demandRange\":[20,90],\"competition\":65.87935222565898,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":461.42048576754087,\"productionAmount\":461.42048576754087,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2442.975648349933,\"productionLimit\":null,\"desiredSellAmount\":\"PROD\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":2442.975648349933,\"maxSellPerCycle\":815.5929238035457,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":2800,\"quality\":1,\"demand\":89.75753899328579,\"demandRange\":[80,90],\"competition\":76.05483500484937,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":7843.138440507306,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":1.3663077827637835,\"quality\":1,\"demand\":54.19037884067782,\"demandRange\":[40,70],\"competition\":61.161822942619445,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":92.42072793178455,\"actualSellAmount\":0,\"productionAmount\":-92.28409715350817,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":6073.736473954299,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":96,\"quality\":1,\"demand\":83.20841782527664,\"demandRange\":[80,99],\"competition\":91.77158667506862,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":79336.66147479741,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":2520,\"quality\":1,\"demand\":92.98174243506297,\"demandRange\":[80,99],\"competition\":80.94421787728427,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":14529.414019312835,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":146400,\"quality\":1,\"demand\":15.112734639269275,\"demandRange\":[5,99],\"competition\":66.11150690032093,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":63294.65516608894,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":3000.000000000002,\"sizeUsed\":2580.2502472485344,\"smartSupplyEnabled\":true,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":461.42048576754087}},\"New Tokyo\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":10,\"city\":\"New Tokyo\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":3.4863138939595046,\"quality\":1,\"demand\":80.76605141287389,\"demandRange\":[65,85],\"competition\":50.831289190153456,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":234.71248370042113,\"actualSellAmount\":0,\"productionAmount\":-234.71175228030603,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1578.805437931979,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":46000,\"quality\":8.48244178008727,\"demand\":84.79698237180389,\"demandRange\":[70,90],\"competition\":71.2682512297176,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":469.42350456061206,\"productionAmount\":469.42350456061206,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5070.523898777859,\"productionLimit\":null,\"desiredSellAmount\":\"PROD\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":5070.523898777859,\"maxSellPerCycle\":812.637155695744,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":8.477640064638152,\"demand\":62.80695879756681,\"demandRange\":[20,90],\"competition\":51.3916485707843,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":469.42350456061206,\"productionAmount\":469.42350456061206,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2853.371391849019,\"productionLimit\":null,\"desiredSellAmount\":\"PROD\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":2853.371391849019,\"maxSellPerCycle\":1017.7169076853462,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":2800,\"quality\":1,\"demand\":89.53851612411783,\"demandRange\":[80,90],\"competition\":85.9994659173322,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":7584.936375986849,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":1.3945255575838473,\"quality\":1,\"demand\":41.5110956517803,\"demandRange\":[40,70],\"competition\":51.49833314186894,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":93.88499348016846,\"actualSellAmount\":0,\"productionAmount\":-93.88470091212241,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":7753.977885881872,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":96,\"quality\":1,\"demand\":96.79433042889441,\"demandRange\":[80,99],\"competition\":92.1833832690217,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":84036.96687225657,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":2520,\"quality\":1,\"demand\":83.36893600126777,\"demandRange\":[80,99],\"competition\":98.5848091268097,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":16682.696295945152,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":146400,\"quality\":1,\"demand\":59.85950090114594,\"demandRange\":[5,99],\"competition\":55.13023345020397,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":80063.51364557374,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":3000.000000000002,\"sizeUsed\":2580.244041972577,\"smartSupplyEnabled\":true,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":469.42350456061206}},\"Chongqing\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":10,\"city\":\"Chongqing\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":3.508416071098054,\"quality\":1,\"demand\":71.2950145925597,\"demandRange\":[65,85],\"competition\":51.48459759174527,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":235.31914335979064,\"actualSellAmount\":0,\"productionAmount\":-235.31875104627693,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1446.6958157421238,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":46000,\"quality\":8.471893415962937,\"demand\":85.9681114896482,\"demandRange\":[70,90],\"competition\":55.60733084253782,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":470.63750209255386,\"productionAmount\":470.63750209255386,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5517.427870732053,\"productionLimit\":null,\"desiredSellAmount\":\"PROD\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":5517.427870732053,\"maxSellPerCycle\":1499.6196245235149,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":8.474197887844928,\"demand\":76.87984330038154,\"demandRange\":[20,90],\"competition\":44.393750330748944,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":470.63750209255386,\"productionAmount\":470.63750209255386,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":3087.9873101704775,\"productionLimit\":null,\"desiredSellAmount\":\"PROD\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":3087.9873101704775,\"maxSellPerCycle\":1680.2993883635756,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":2800,\"quality\":1,\"demand\":88.61480196842327,\"demandRange\":[80,90],\"competition\":80.31962647139697,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":7879.374090045011,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":1.4033664284393126,\"quality\":1,\"demand\":45.93236524454197,\"demandRange\":[40,70],\"competition\":51.154722512566906,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":94.12765734391627,\"actualSellAmount\":0,\"productionAmount\":-94.12750041851078,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":6931.509939627901,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":96,\"quality\":1,\"demand\":93.32676744744901,\"demandRange\":[80,99],\"competition\":92.3322512435746,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":77086.84594505947,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":2520,\"quality\":1,\"demand\":80.84439301789988,\"demandRange\":[80,99],\"competition\":92.58325321320098,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":15299.517998351452,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":146400,\"quality\":1,\"demand\":25.11527038532582,\"demandRange\":[5,99],\"competition\":63.59685525755179,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":52163.28079245816,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":3000.000000000002,\"sizeUsed\":2580.245589124977,\"smartSupplyEnabled\":true,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":470.63750209255386}},\"Aevum\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":10,\"city\":\"Aevum\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":3.4554375766410885,\"quality\":1,\"demand\":72.66997430598389,\"demandRange\":[65,85],\"competition\":48.32897981831625,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":233.03683338380773,\"actualSellAmount\":0,\"productionAmount\":-233.03695219020977,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1481.7450990771245,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":46000,\"quality\":8.477539887249758,\"demand\":84.06231062914505,\"demandRange\":[70,90],\"competition\":43.37588156885996,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":466.07390438041955,\"productionAmount\":466.07390438041955,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":4575.193483864104,\"productionLimit\":null,\"desiredSellAmount\":\"PROD\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":4575.193483864104,\"maxSellPerCycle\":1085.3912917272744,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":8.472359513112263,\"demand\":73.79562799742921,\"demandRange\":[20,90],\"competition\":52.16954256941979,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":466.07390438041955,\"productionAmount\":466.07390438041955,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":3189.2766777224783,\"productionLimit\":null,\"desiredSellAmount\":\"PROD\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":3189.2766777224783,\"maxSellPerCycle\":804.3652291433234,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":2800,\"quality\":1,\"demand\":86.35084006675623,\"demandRange\":[80,90],\"competition\":87.8529595028293,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":7783.811487510449,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":1.3821750306564127,\"quality\":1,\"demand\":46.99091852463305,\"demandRange\":[40,70],\"competition\":57.47430490398081,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":93.2147333535231,\"actualSellAmount\":0,\"productionAmount\":-93.21478087608392,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":9228.88079332323,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":96,\"quality\":1,\"demand\":82.00010297013338,\"demandRange\":[80,99],\"competition\":84.34032994557612,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":72088.35742724371,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":2520,\"quality\":1,\"demand\":86.15963237910468,\"demandRange\":[80,99],\"competition\":88.254492669452,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":14316.316113459114,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":146400,\"quality\":1,\"demand\":76.02348111552001,\"demandRange\":[5,99],\"competition\":44.99080098194154,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":68666.88572275011,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":3000.000000000002,\"sizeUsed\":2580.241880630365,\"smartSupplyEnabled\":true,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":466.07390438041955}}},\"offices\":{\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Sector-12\",\"size\":9,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":99.39890115134462,\"avgMorale\":98.9004324844918,\"avgIntelligence\":76.3,\"avgCharisma\":71.6,\"avgCreativity\":71.8,\"avgEfficiency\":76.4,\"totalExperience\":698.820000000053,\"numEmployees\":9,\"totalSalary\":10091.16000000016,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1.010995675155082,\"employeeProductionByJob\":{\"total\":3053.323609850472,\"Operations\":1072.6358066092855,\"Engineer\":775.5552464900311,\"Business\":377.5013753238348,\"Management\":827.6311814273207,\"Research & Development\":0,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":3,\"Engineer\":2,\"Business\":2,\"Management\":2,\"Research & Development\":0,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":3,\"Engineer\":2,\"Business\":2,\"Management\":2,\"Research & Development\":0,\"Intern\":0,\"Unassigned\":0}}},\"Aevum\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Aevum\",\"size\":9,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":99.19863442389902,\"avgMorale\":98.89982345157588,\"avgIntelligence\":75.3,\"avgCharisma\":72.3,\"avgCreativity\":75.4,\"avgEfficiency\":77.5,\"totalExperience\":653.7270000000528,\"numEmployees\":9,\"totalSalary\":10074.681000000157,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1.0110017654842411,\"employeeProductionByJob\":{\"total\":3026.7192926604594,\"Operations\":1067.8034978985568,\"Engineer\":760.8209312138123,\"Business\":372.7059378430887,\"Management\":825.3889257050021,\"Research & Development\":0,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":3,\"Engineer\":2,\"Business\":2,\"Management\":2,\"Research & Development\":0,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":3,\"Engineer\":2,\"Business\":2,\"Management\":2,\"Research & Development\":0,\"Intern\":0,\"Unassigned\":0}}},\"Chongqing\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Chongqing\",\"size\":21,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":99.59774550468559,\"avgMorale\":99.49454573693953,\"avgIntelligence\":72,\"avgCharisma\":77.49999999999999,\"avgCreativity\":79.54545454545455,\"avgEfficiency\":75.36363636363636,\"totalExperience\":1609.2960000000844,\"numEmployees\":21,\"totalSalary\":24005.66072727298,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":5456.808568442513,\"Operations\":1080.4586354260643,\"Engineer\":763.6248022776537,\"Business\":2743.6562713450753,\"Management\":869.0688593937198,\"Research & Development\":0,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":3,\"Engineer\":2,\"Business\":14,\"Management\":2,\"Research & Development\":0,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":3,\"Engineer\":2,\"Business\":14,\"Management\":2,\"Research & Development\":0,\"Intern\":0,\"Unassigned\":0}}},\"New Tokyo\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"New Tokyo\",\"size\":15,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":98.99909311069753,\"avgMorale\":98.8984540532479,\"avgIntelligence\":71.6875,\"avgCharisma\":75.25,\"avgCreativity\":74.8125,\"avgEfficiency\":79.25000000000001,\"totalExperience\":1153.3145000000573,\"numEmployees\":15,\"totalSalary\":17004.943500000172,\"autoTea\":false,\"autoParty\":false,\"teaPending\":true,\"partyMult\":1.011015459467521,\"employeeProductionByJob\":{\"total\":4223.700897998962,\"Operations\":1078.8641321880039,\"Engineer\":768.8764123658817,\"Business\":1522.136146310421,\"Management\":853.8242071346555,\"Research & Development\":0,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":3,\"Engineer\":2,\"Business\":8,\"Management\":2,\"Research & Development\":0,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":3,\"Engineer\":2,\"Business\":8,\"Management\":2,\"Research & Development\":0,\"Intern\":0,\"Unassigned\":0}}},\"Ishima\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Ishima\",\"size\":18,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":99.79901846416179,\"avgMorale\":98.89136876779018,\"avgIntelligence\":74.10526315789474,\"avgCharisma\":75.63157894736842,\"avgCreativity\":75.05263157894737,\"avgEfficiency\":66.6842105263158,\"totalExperience\":1375.3335000000602,\"numEmployees\":18,\"totalSalary\":19865.579447368604,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1.0110863123220981,\"employeeProductionByJob\":{\"total\":4706.53927216283,\"Operations\":1018.8180361114147,\"Engineer\":731.2771012133534,\"Business\":2129.0529402989437,\"Management\":827.3911945391179,\"Research & Development\":0,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":3,\"Engineer\":2,\"Business\":11,\"Management\":2,\"Research & Development\":0,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":3,\"Engineer\":2,\"Business\":11,\"Management\":2,\"Research & Development\":0,\"Intern\":0,\"Unassigned\":0}}},\"Volhaven\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Volhaven\",\"size\":9,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":99.59897822610453,\"avgMorale\":98.89761461610199,\"avgIntelligence\":78.1,\"avgCharisma\":73.7,\"avgCreativity\":67,\"avgEfficiency\":72.8,\"totalExperience\":744.4435000000524,\"numEmployees\":9,\"totalSalary\":10106.530500000157,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1.0110238538389802,\"employeeProductionByJob\":{\"total\":3077.859695932286,\"Operations\":1063.5477855196068,\"Engineer\":783.8295320137543,\"Business\":391.57693489145566,\"Management\":838.9054435074689,\"Research & Development\":0,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":3,\"Engineer\":2,\"Business\":2,\"Management\":2,\"Research & Development\":0,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":3,\"Engineer\":2,\"Business\":2,\"Management\":2,\"Research & Development\":0,\"Intern\":0,\"Unassigned\":0}}}},\"numAdVerts\":37}}]]},\"maxDivisions\":20,\"funds\":1084746900.8954763,\"revenue\":22770191.740567353,\"expenses\":6665960.73410884,\"fundingRound\":1,\"public\":false,\"totalShares\":1500000000,\"numShares\":900000000,\"shareSalesUntilPriceUpdate\":1000000,\"shareSaleCooldown\":0,\"issueNewSharesCooldown\":0,\"dividendRate\":0,\"dividendTax\":0.15,\"issuedShares\":0,\"sharePrice\":2741.1956647274474,\"storedCycles\":8,\"unlocks\":{\"ctor\":\"JSONSet\",\"data\":[\"Warehouse API\",\"Office API\",\"Smart Supply\"]},\"upgrades\":{\"Smart Factories\":{\"level\":10,\"value\":1.3000000000000003},\"Smart Storage\":{\"level\":20,\"value\":3.0000000000000018},\"DreamSense\":{\"level\":0,\"value\":0},\"Wilson Analytics\":{\"level\":0,\"value\":1},\"Nuoptimal Nootropic Injector Implants\":{\"level\":5,\"value\":1.5000000000000004},\"Speech Processor Implants\":{\"level\":5,\"value\":1.5000000000000004},\"Neural Accelerators\":{\"level\":5,\"value\":1.5000000000000004},\"FocusWires\":{\"level\":10,\"value\":2.000000000000001},\"ABC SalesBots\":{\"level\":0,\"value\":1},\"Project Insight\":{\"level\":0,\"value\":1}},\"cycleValuation\":5591459000000,\"valuationsList\":[5569003000000,5569979000000,5573883000000,5566043000000,5555159000000,5756714000000,5574048000000,5577451000000,5579348000000,5591459000000],\"valuation\":5591308700000,\"state\":{\"ctor\":\"CorporationState\",\"data\":{\"state\":0}},\"seedFunded\":true}},\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"The Black Hand\",\"NiteSec\",\"Sector-12\",\"Slum Snakes\",\"CyberSec\",\"Shadows of Anarchy\"],\"factionInvitations\":[],\"hacknetNodes\":[],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":false,\"jobs\":{},\"karma\":-8533.84499999972,\"numPeopleKilled\":2677,\"location\":\"Alpha Enterprises\",\"money\":5103303049.60513,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-3456768,\"codingcontract\":4950000000,\"corporation\":2936309.649718289,\"crime\":69751597.63364963,\"gang\":0,\"hacking\":230065.06767870943,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":-18531681.175150946,\"infiltration\":109572447.42921971,\"sleeves\":0,\"stock\":0,\"total\":5103301970.60513,\"work\":0,\"servers\":0,\"other\":-7200000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-5862464,\"codingcontract\":22650000000,\"corporation\":2936309.649718289,\"crime\":92648567.22728358,\"gang\":0,\"hacking\":31002269.293863412,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":-47544681.175150946,\"infiltration\":109572447.42921971,\"sleeves\":0,\"stock\":0,\"total\":6208850572.902535,\"work\":0,\"servers\":-13027822572.707218,\"other\":-634000000,\"augmentations\":-2962079302.8154593}},\"playtimeSinceLastAug\":90329600,\"playtimeSinceLastBitnode\":270563800,\"lastAugReset\":1686831785990,\"lastNodeReset\":1686651551615,\"purchasedServers\":[],\"scriptProdSinceLastAug\":206464,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[[1,3]]},\"exploits\":[\"Unclickable\",\"TimeCompression\",\"UndocumentedFunctionCall\",\"PrototypeTampering\",\"Bypass\",\"RealityAlteration\",\"INeedARainbow\",\"YoureNotMeantToAccessThis\",\"EditSaveFile\",\"N00dles\"],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1685939030492},{\"ID\":\"WORKOUT\",\"unlockedOn\":1685941010477},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1685946050497},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1685946110490},{\"ID\":\"UNCLICKABLE\",\"unlockedOn\":1685949299474},{\"ID\":\"TIMECOMPRESSION\",\"unlockedOn\":1685949916406},{\"ID\":\"UNDOCUMENTEDFUNCTIONCALL\",\"unlockedOn\":1685950396403},{\"ID\":\"PROTOTYPETAMPERING\",\"unlockedOn\":1685950756393},{\"ID\":\"BYPASS\",\"unlockedOn\":1685950996402},{\"ID\":\"REALITYALTERATION\",\"unlockedOn\":1685951176405},{\"ID\":\"RAINBOW\",\"unlockedOn\":1685952556406},{\"ID\":\"TRAVEL\",\"unlockedOn\":1685952736396},{\"ID\":\"DEVMENU\",\"unlockedOn\":1685953096403},{\"ID\":\"EDITSAVEFILE\",\"unlockedOn\":1685954477040},{\"ID\":\"UNACHIEVABLE\",\"unlockedOn\":1685954890060},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1685955655709},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1685957395699},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1685958475694},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1685964295703},{\"ID\":\"NITESEC\",\"unlockedOn\":1686008689171},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1686023013505},{\"ID\":\"TOR\",\"unlockedOn\":1686030651518},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1686031627541},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1686031627549},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1686033885056},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1686084963238},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1686089173549},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1686118837190},{\"ID\":\"DONATION\",\"unlockedOn\":1686196813394},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1686210222414},{\"ID\":\"SF1.1\",\"unlockedOn\":1686271479023},{\"ID\":\"N00DLES\",\"unlockedOn\":1686389195807},{\"ID\":\"FAST_BN\",\"unlockedOn\":1686405508802},{\"ID\":\"CORPORATION\",\"unlockedOn\":1686625850126},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1686907638877}],\"terminalCommandHistory\":[\"c CSEC \",\"backdoor\",\"st\",\"home\",\"st\",\"c iron-gym \",\"c max-hardware \",\"c phantasy \",\"c max-hardware \",\"c silver-helix \",\"c avmnite-02h \",\"analyze\",\"backdoor\",\"home\",\"buy -l\",\"buy relaySMTP.exe \",\"rd\",\"ps\",\"kill 3\",\"run scripts/weaken-all.js n00dles\",\"rd\",\"ps\",\"buy -l\",\"st\",\"c hong-fang-tea \",\"c CSEC \",\"c avmnite-02h \",\"c CSEC \",\"c omega-net \",\"c crush-fitness \",\"c I.I.I.I \",\"backdoor\",\"c avmnite-02h \",\"c catalyst \",\"c avmnite-02h \",\"c zb-institute \",\"c millenium-fitness \",\"c snap-fitness \",\"c unitalife \",\"c defcomm \",\"c infocomm \",\"c run4theh111z \",\"analyze\",\"home\",\"ps\",\"kill 2\",\"run scripts/corporations/tea.js \",\"ps\",\"kill 23\",\"run scripts/corporations/tea.js \"],\"lastUpdate\":1686922115483,\"lastSave\":1686922078283,\"totalPlaytime\":983745800,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":false,\"cyclesWorked\":39434,\"factionWorkType\":\"hacking\",\"factionName\":\"The Black Hand\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"6700aba73601e\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"69.8.1.4\",\"isConnectedTo\":true,\"maxRam\":2048,\"messages\":[\"hackers-starting-handbook.lit\",\"corporation-management-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    ns.tprint('Hello Remote API!');\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdGVtcGxhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUE7QUFDaEMsQ0FBQyJ9\",\"filename\":\"template.js\",\"server\":\"home\"}}],[\"scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HOSTS } from 'scripts/utils/constants';\\nexport async function main(ns) {\\n    const serverName = ns.args[0] ?? HOSTS.MAX_HARDWARE;\\n    ns.printf('Hacking %s...', serverName);\\n    const minSecurity = ns.getServerMinSecurityLevel(serverName);\\n    const maxMoney = ns.getServerMaxMoney(serverName);\\n    const targetSecurity = Math.max(1.3 * minSecurity, minSecurity + 5);\\n    const targetMoney = (0.75 * maxMoney);\\n    while (true) {\\n        const curSecurity = ns.getServerSecurityLevel(serverName);\\n        const curMoney = ns.getServerMoneyAvailable(serverName);\\n        if (curSecurity > targetSecurity) {\\n            ns.printf('Lowering difficulty (current: %.3f, target: %.3f)', curSecurity, targetSecurity);\\n            await ns.weaken(serverName);\\n        }\\n        else if (curMoney < targetMoney) {\\n            ns.printf('Increasing available money (current: %s, target: %s)', ns.formatNumber(curMoney), ns.formatNumber(targetMoney));\\n            await ns.grow(serverName);\\n        }\\n        else {\\n            await ns.hack(serverName);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBRS9DLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxVQUFVLEdBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVksSUFBSSxLQUFLLENBQUMsWUFBWSxDQUFBO0lBRS9ELEVBQUUsQ0FBQyxNQUFNLENBQUMsZUFBZSxFQUFFLFVBQVUsQ0FBQyxDQUFBO0lBRXRDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUM1RCxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLENBQUE7SUFFakQsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsV0FBVyxFQUFFLFdBQVcsR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUNuRSxNQUFNLFdBQVcsR0FBRyxDQUFDLElBQUksR0FBRyxRQUFRLENBQVcsQ0FBQTtJQUUvQyxPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUN6RCxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsdUJBQXVCLENBQUMsVUFBVSxDQUFDLENBQUE7UUFFdkQsSUFBSSxXQUFXLEdBQUcsY0FBYyxFQUFFO1lBQ2hDLEVBQUUsQ0FBQyxNQUFNLENBQ1AsbURBQW1ELEVBQ25ELFdBQVcsRUFDWCxjQUFjLENBQ2YsQ0FBQTtZQUVELE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtTQUM1QjthQUFNLElBQUksUUFBUSxHQUFHLFdBQVcsRUFBRTtZQUNqQyxFQUFFLENBQUMsTUFBTSxDQUNQLHNEQUFzRCxFQUN0RCxFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxFQUN6QixFQUFFLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUM3QixDQUFBO1lBRUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1NBQzFCO2FBQU07WUFDTCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUE7U0FDMUI7S0FDRjtBQUNILENBQUMifQ==\",\"filename\":\"scripts/hack.js\",\"server\":\"home\"}}],[\"scripts/Server/index.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export class Server {\\n    ns;\\n    name;\\n    minDifficulty;\\n    maxMoney;\\n    constructor(ns, name) {\\n        this.ns = ns;\\n        this.name = name;\\n        this.minDifficulty = ns.getServerMinSecurityLevel(name);\\n        this.maxMoney = ns.getServerMaxMoney(name);\\n    }\\n    getDifficulty() {\\n        return this.ns.getServerSecurityLevel(this.name);\\n    }\\n    getMoney() {\\n        return this.ns.getServerMoneyAvailable(this.name);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9TZXJ2ZXIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxPQUFPLE1BQU07SUFDVCxFQUFFLENBQUk7SUFFZCxJQUFJLENBQVE7SUFDWixhQUFhLENBQVE7SUFDckIsUUFBUSxDQUFRO0lBRWhCLFlBQVksRUFBTSxFQUFFLElBQVk7UUFDOUIsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUE7UUFDWixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQTtRQUNoQixJQUFJLENBQUMsYUFBYSxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUN2RCxJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUM1QyxDQUFDO0lBRUQsYUFBYTtRQUNYLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDbEQsQ0FBQztJQUVELFFBQVE7UUFDTixPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ25ELENBQUM7Q0FDRiJ9\",\"filename\":\"scripts/Server/index.js\",\"server\":\"home\"}}],[\"scripts/nuke.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { FILES, HOSTS } from 'scripts/utils/constants';\\nexport const nuke = (ns, serverName) => {\\n    ns.fileExists(FILES.BRUTE_SSH, HOSTS.HOME) && ns.brutessh(serverName);\\n    ns.fileExists(FILES.FTP_CRACK, HOSTS.HOME) && ns.ftpcrack(serverName);\\n    ns.fileExists(FILES.RELAY_SMTP, HOSTS.HOME) && ns.relaysmtp(serverName);\\n    ns.fileExists(FILES.HTTP_WORM, HOSTS.HOME) && ns.httpworm(serverName);\\n    ns.fileExists(FILES.SQL_INJECT, HOSTS.HOME) && ns.sqlinject(serverName);\\n    ns.nuke(serverName);\\n    if (!ns.hasRootAccess(serverName)) {\\n        ns.tprintf('Failed to nuke %s, aborting.', serverName);\\n        ns.exit();\\n    }\\n};\\nexport async function main(ns) {\\n    if (ns.args.length === 0) {\\n        ns.tprint('Missing server name');\\n        ns.exit();\\n    }\\n    const serverName = ns.args[0];\\n    nuke(ns, serverName);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVrZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL251a2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQTtBQUV0RCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxFQUFNLEVBQUUsVUFBa0IsRUFBRSxFQUFFO0lBQ2pELEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUNyRSxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDckUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQ3ZFLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUNyRSxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUE7SUFFdkUsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUVuQixJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsRUFBRTtRQUNqQyxFQUFFLENBQUMsT0FBTyxDQUFDLDhCQUE4QixFQUFFLFVBQVUsQ0FBQyxDQUFBO1FBQ3RELEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtLQUNWO0FBQ0gsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUN4QixFQUFFLENBQUMsTUFBTSxDQUFDLHFCQUFxQixDQUFDLENBQUE7UUFDaEMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFBO0tBQ1Y7SUFFRCxNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBRXZDLElBQUksQ0FBQyxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUE7QUFDdEIsQ0FBQyJ9\",\"filename\":\"scripts/nuke.js\",\"server\":\"home\"}}],[\"scripts/exploits/unclickable.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main() {\\n    const doc = eval('document');\\n    const el = doc.getElementById('unclickable');\\n    el.style.display = 'block';\\n    el.style.visibility = 'visible';\\n    el.style.height = '20px';\\n    el.style.zIndex = '100';\\n    el.style.backgroundColor = 'red';\\n    el.onmouseup = () => {\\n        el.style.display = 'none';\\n        el.style.visibility = 'hidden';\\n        console.log('mouseup');\\n    };\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5jbGlja2FibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9leHBsb2l0cy91bmNsaWNrYWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUk7SUFDeEIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQzVCLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFFLENBQUE7SUFFN0MsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFBO0lBQzFCLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQTtJQUMvQixFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUE7SUFDeEIsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFBO0lBQ3ZCLEVBQUUsQ0FBQyxLQUFLLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQTtJQUVoQyxFQUFFLENBQUMsU0FBUyxHQUFHLEdBQUcsRUFBRTtRQUNsQixFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUE7UUFDekIsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsUUFBUSxDQUFBO1FBQzlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUE7SUFDeEIsQ0FBQyxDQUFBO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/exploits/unclickable.js\",\"server\":\"home\"}}],[\"scripts/exploits/time-compression.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main() {\\n    const oldNow = performance.now;\\n    performance.now = () => 42;\\n    setTimeout(() => {\\n        performance.now = oldNow;\\n    }, 2000);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1jb21wcmVzc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2V4cGxvaXRzL3RpbWUtY29tcHJlc3Npb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJO0lBQ3hCLE1BQU0sTUFBTSxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUE7SUFDOUIsV0FBVyxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUE7SUFDMUIsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLFdBQVcsQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFBO0lBQzFCLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQTtBQUNWLENBQUMifQ==\",\"filename\":\"scripts/exploits/time-compression.js\",\"server\":\"home\"}}],[\"scripts/exploits/tampering.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main() {\\n    const old = Number.prototype.toExponential;\\n    Number.prototype.toExponential = () => 'a';\\n    setTimeout(() => {\\n        Number.prototype.toExponential = old;\\n    }, 16 * 60 * 1000);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFtcGVyaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhwbG9pdHMvdGFtcGVyaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSTtJQUN4QixNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQTtJQUMxQyxNQUFNLENBQUMsU0FBUyxDQUFDLGFBQWEsR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUE7SUFFMUMsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLE1BQU0sQ0FBQyxTQUFTLENBQUMsYUFBYSxHQUFHLEdBQUcsQ0FBQTtJQUN0QyxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQTtBQUNwQixDQUFDIn0=\",\"filename\":\"scripts/exploits/tampering.js\",\"server\":\"home\"}}],[\"scripts/exploits/exploit.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// @ts-nocheck\\nexport async function main(ns) {\\n    ns.exploit();\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwbG9pdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2V4cGxvaXRzL2V4cGxvaXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYztBQUlkLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFBO0FBQ2QsQ0FBQyJ9\",\"filename\":\"scripts/exploits/exploit.js\",\"server\":\"home\"}}],[\"scripts/exploits/bypass.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// @ts-nocheck\\nexport async function main(ns) {\\n    const doc = eval('document');\\n    ns.bypass(doc);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnlwYXNzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhwbG9pdHMvYnlwYXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWM7QUFJZCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUM1QixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQ2hCLENBQUMifQ==\",\"filename\":\"scripts/exploits/bypass.js\",\"server\":\"home\"}}],[\"scripts/exploits/alter-reality.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// @ts-nocheck\\nexport async function main(ns) {\\n    ns.alterReality();\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWx0ZXItcmVhbGl0eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2V4cGxvaXRzL2FsdGVyLXJlYWxpdHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYztBQVdkLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFBO0FBQ25CLENBQUMifQ==\",\"filename\":\"scripts/exploits/alter-reality.js\",\"server\":\"home\"}}],[\"scripts/exploits/rainbow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// @ts-nocheck\\nexport async function main(ns) {\\n    ns.rainbow('noodles');\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFpbmJvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2V4cGxvaXRzL3JhaW5ib3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYztBQUlkLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQTtBQUN2QixDQUFDIn0=\",\"filename\":\"scripts/exploits/rainbow.js\",\"server\":\"home\"}}],[\"scripts/misc/heartbreak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// @ts-nocheck\\nexport async function main(ns) {\\n    ns.tprint(ns.heart.break());\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhcnRicmVhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL21pc2MvaGVhcnRicmVhay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxjQUFjO0FBSWQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQTtBQUM3QixDQUFDIn0=\",\"filename\":\"scripts/misc/heartbreak.js\",\"server\":\"home\"}}],[\"scripts/buy-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getPurchasedServerName = (id) => `s${id}`;\\nexport async function main(ns) {\\n    const INITIAL_EXP = 8;\\n    for (let e = INITIAL_EXP; e <= 20; e++) {\\n        const ram = Math.pow(2, e);\\n        for (let i = 0; i < ns.getPurchasedServerLimit(); i++) {\\n            ns.print(`Waiting for server ${i}...`);\\n            const hostname = getPurchasedServerName(i);\\n            if (ns.serverExists(hostname) && ns.getServerMaxRam(hostname) >= ram) {\\n                ns.print('Server exists and has enough ram. Skipping...');\\n                continue;\\n            }\\n            const cost = ns.serverExists(hostname)\\n                ? ns.getPurchasedServerUpgradeCost(hostname, ram)\\n                : ns.getPurchasedServerCost(ram);\\n            while (ns.getServerMoneyAvailable('home') < cost) {\\n                await ns.sleep(1000);\\n            }\\n            if (ns.serverExists(hostname)) {\\n                ns.upgradePurchasedServer(hostname, ram);\\n            }\\n            else {\\n                ns.purchaseServer(hostname, ram);\\n            }\\n            ns.toast(`Purchased server ${i}`);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV5LXNlcnZlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9idXktc2VydmVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxDQUFDLEVBQVUsRUFBRSxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQTtBQUU5RCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sV0FBVyxHQUFHLENBQUMsQ0FBQTtJQUVyQixLQUFLLElBQUksQ0FBQyxHQUFHLFdBQVcsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3RDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBRTFCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsdUJBQXVCLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNyRCxFQUFFLENBQUMsS0FBSyxDQUFDLHNCQUFzQixDQUFDLEtBQUssQ0FBQyxDQUFBO1lBQ3RDLE1BQU0sUUFBUSxHQUFHLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxDQUFBO1lBRTFDLElBQUksRUFBRSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsRUFBRTtnQkFDcEUsRUFBRSxDQUFDLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQyxDQUFBO2dCQUN6RCxTQUFRO2FBQ1Q7WUFFRCxNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQztnQkFDcEMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDO2dCQUNqRCxDQUFDLENBQUMsRUFBRSxDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBRWxDLE9BQU8sRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksRUFBRTtnQkFDaEQsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO2FBQ3JCO1lBRUQsSUFBSSxFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxFQUFFO2dCQUM3QixFQUFFLENBQUMsc0JBQXNCLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFBO2FBQ3pDO2lCQUFNO2dCQUNMLEVBQUUsQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFBO2FBQ2pDO1lBRUQsRUFBRSxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLENBQUMsQ0FBQTtTQUNsQztLQUNGO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/buy-servers.js\",\"server\":\"home\"}}],[\"scripts/nuke-all.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { FILES, HOSTS } from 'scripts/utils/constants';\\nimport { nuke } from 'scripts/nuke';\\nimport { getPurchasedServerName } from 'scripts/buy-servers';\\nimport { getServersByPort } from 'scripts/utils/servers';\\nconst PROGRAMS_LIST = Object.values(FILES);\\nexport async function main(ns) {\\n    const hackTarget = ns.args[0];\\n    for (let i = 0; i < ns.getPurchasedServerLimit(); i++) {\\n        const host = getPurchasedServerName(i);\\n        ns.serverExists(host) && nuke(ns, host, hackTarget);\\n    }\\n    const servers = getServersByPort(ns);\\n    const getRemServersCount = (lists) => lists.reduce((sum, list) => sum + list.length, 0);\\n    while (getRemServersCount(servers) > 0) {\\n        const programCount = PROGRAMS_LIST.reduce((cnt, file) => cnt + (ns.fileExists(file, HOSTS.HOME) ? 1 : 0), 0);\\n        for (let i = 0; i <= programCount; i++) {\\n            if (servers[i].length > 0 &&\\n                ns.getHackingLevel() >= servers[i][0].reqHack) {\\n                nuke(ns, servers[i][0].host, hackTarget);\\n                servers[i] = servers[i].slice(1);\\n            }\\n        }\\n        await ns.sleep(1000);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVrZS1hbGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9udWtlLWFsbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBQ3RELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUE7QUFDbkMsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0scUJBQXFCLENBQUE7QUFDNUQsT0FBTyxFQUFFLGdCQUFnQixFQUFlLE1BQU0sdUJBQXVCLENBQUE7QUFFckUsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUUxQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sVUFBVSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFdkMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3JELE1BQU0sSUFBSSxHQUFHLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3RDLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUE7S0FDcEQ7SUFFRCxNQUFNLE9BQU8sR0FBRyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUVwQyxNQUFNLGtCQUFrQixHQUFHLENBQUMsS0FBaUIsRUFBRSxFQUFFLENBQy9DLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUVuRCxPQUFPLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUN0QyxNQUFNLFlBQVksR0FBRyxhQUFhLENBQUMsTUFBTSxDQUN2QyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDOUQsQ0FBQyxDQUNGLENBQUE7UUFFRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksWUFBWSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3RDLElBQ0UsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDO2dCQUNyQixFQUFFLENBQUMsZUFBZSxFQUFFLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFDN0M7Z0JBQ0EsSUFBSSxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFBO2dCQUN4QyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTthQUNqQztTQUNGO1FBRUQsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3JCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/nuke-all.js\",\"server\":\"home\"}}],[\"scripts/utils/constants.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const FILES = {\\n    BRUTE_SSH: 'BruteSSH.exe',\\n    FTP_CRACK: 'FTPCrack.exe',\\n    RELAY_SMTP: 'relaySMTP.exe',\\n    HTTP_WORM: 'HTTPWorm.exe',\\n    SQL_INJECT: 'SQLInject.exe',\\n};\\nexport const SCRIPTS = {\\n    HACK: 'scripts/hack-v4.js',\\n    CONSTANTS: 'scripts/utils/constants.js',\\n    SIMPLE_HACK: 'scripts/simple-hack.js',\\n    SIMPLE_WEAKEN: 'scripts/simple-weaken.js',\\n    SIMPLE_GROW: 'scripts/simple-grow.js',\\n    TIMER: 'scripts/ui/timer.js',\\n    UTILS_TIME: 'scripts/utils/time.js',\\n};\\nexport const HOSTS = {\\n    HOME: 'home',\\n    JOESGUNS: 'joesguns',\\n    MAX_HARDWARE: 'max-hardware',\\n};\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvdXRpbHMvY29uc3RhbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRztJQUNuQixTQUFTLEVBQUUsY0FBYztJQUN6QixTQUFTLEVBQUUsY0FBYztJQUN6QixVQUFVLEVBQUUsZUFBZTtJQUMzQixTQUFTLEVBQUUsY0FBYztJQUN6QixVQUFVLEVBQUUsZUFBZTtDQUNuQixDQUFBO0FBRVYsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHO0lBQ3JCLElBQUksRUFBRSxvQkFBb0I7SUFDMUIsU0FBUyxFQUFFLDRCQUE0QjtJQUN2QyxXQUFXLEVBQUUsd0JBQXdCO0lBQ3JDLGFBQWEsRUFBRSwwQkFBMEI7SUFDekMsV0FBVyxFQUFFLHdCQUF3QjtJQUNyQyxLQUFLLEVBQUUscUJBQXFCO0lBQzVCLFVBQVUsRUFBRSx1QkFBdUI7Q0FDM0IsQ0FBQTtBQUVWLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRztJQUNuQixJQUFJLEVBQUUsTUFBTTtJQUNaLFFBQVEsRUFBRSxVQUFVO0lBQ3BCLFlBQVksRUFBRSxjQUFjO0NBQzdCLENBQUEifQ==\",\"filename\":\"scripts/utils/constants.js\",\"server\":\"home\"}}],[\"scripts/utils/servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HOSTS } from 'scripts/utils/constants';\\nexport const getServersByPort = (ns) => {\\n    const serversByPort = [[], [], [], [], [], []];\\n    const seen = new Set();\\n    const dfs = (host, prv) => {\\n        const server = {\\n            parent: prv,\\n            host,\\n            ports: ns.getServerNumPortsRequired(host),\\n            reqHack: ns.getServerRequiredHackingLevel(host),\\n            maxMoney: ns.getServerMaxMoney(host),\\n            minSecurity: ns.getServerMinSecurityLevel(host),\\n        };\\n        serversByPort[server.ports].push(server);\\n        seen.add(host);\\n        for (const nxt of ns.scan(host)) {\\n            if (!seen.has(nxt)) {\\n                dfs(nxt, host);\\n            }\\n        }\\n    };\\n    dfs(HOSTS.HOME, null);\\n    for (let i = 0; i < 6; i++) {\\n        serversByPort[i].sort((sa, sb) => sa.reqHack - sb.reqHack);\\n    }\\n    return serversByPort;\\n};\\nexport const getAllServers = (ns) => getServersByPort(ns).flat();\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL3V0aWxzL3NlcnZlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBVy9DLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsRUFBTSxFQUFjLEVBQUU7SUFDckQsTUFBTSxhQUFhLEdBQWUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBQzFELE1BQU0sSUFBSSxHQUFHLElBQUksR0FBRyxFQUFVLENBQUE7SUFFOUIsTUFBTSxHQUFHLEdBQUcsQ0FBQyxJQUFZLEVBQUUsR0FBa0IsRUFBRSxFQUFFO1FBQy9DLE1BQU0sTUFBTSxHQUFHO1lBQ2IsTUFBTSxFQUFFLEdBQUc7WUFDWCxJQUFJO1lBQ0osS0FBSyxFQUFFLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUM7WUFDekMsT0FBTyxFQUFFLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQyxJQUFJLENBQUM7WUFDL0MsUUFBUSxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUM7WUFDcEMsV0FBVyxFQUFFLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUM7U0FDaEQsQ0FBQTtRQUVELGFBQWEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ3hDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7UUFFZCxLQUFLLE1BQU0sR0FBRyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDL0IsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ2xCLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUE7YUFDZjtTQUNGO0lBQ0gsQ0FBQyxDQUFBO0lBRUQsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUE7SUFFckIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUMxQixhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUE7S0FDM0Q7SUFFRCxPQUFPLGFBQWEsQ0FBQTtBQUN0QixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxFQUFNLEVBQVksRUFBRSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFBIn0=\",\"filename\":\"scripts/utils/servers.js\",\"server\":\"home\"}}],[\"scripts/hack-candidates.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from 'scripts/utils/servers';\\nexport async function main(ns) {\\n    const candidates = getAllServers(ns)\\n        .filter((s) => ns.hasRootAccess(s.host))\\n        .sort((sa, sb) => sb.maxMoney - sa.maxMoney)\\n        .slice(0, 30);\\n    candidates.forEach((s) => ns.tprint(`${s.host}:\\\\n\\\\tMax money = $${ns.formatNumber(s.maxMoney)}\\\\n\\\\tMin security = ${s.minSecurity}\\\\n\\\\tReq hack lvl = ${s.reqHack}`));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay1jYW5kaWRhdGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NjcmlwdHMvaGFjay1jYW5kaWRhdGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQTtBQUVyRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sVUFBVSxHQUFHLGFBQWEsQ0FBQyxFQUFFLENBQUM7U0FDakMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN2QyxJQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUM7U0FDM0MsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUVmLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUN2QixFQUFFLENBQUMsTUFBTSxDQUNQLEdBQUcsQ0FBQyxDQUFDLElBQUkscUJBQXFCLEVBQUUsQ0FBQyxZQUFZLENBQzNDLENBQUMsQ0FBQyxRQUFRLENBQ1gsc0JBQXNCLENBQUMsQ0FBQyxXQUFXLHNCQUFzQixDQUFDLENBQUMsT0FBTyxFQUFFLENBQ3RFLENBQ0YsQ0FBQTtBQUNILENBQUMifQ==\",\"filename\":\"scripts/hack-candidates.js\",\"server\":\"home\"}}],[\"scripts/server-tree.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from 'scripts/utils/servers';\\nimport { HOSTS } from 'scripts/utils/constants';\\nexport async function main(ns) {\\n    const servers = getAllServers(ns);\\n    const printTree = (root, level = 0) => {\\n        ns.tprint(Array(level).join('    ') + root);\\n        for (const server of servers) {\\n            if (server.parent === root) {\\n                printTree(server.host, level + 1);\\n            }\\n        }\\n    };\\n    printTree(HOSTS.HOME);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXRyZWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zZXJ2ZXItdHJlZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sdUJBQXVCLENBQUE7QUFDckQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBRS9DLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxPQUFPLEdBQUcsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBRWpDLE1BQU0sU0FBUyxHQUFHLENBQUMsSUFBWSxFQUFFLEtBQUssR0FBRyxDQUFDLEVBQUUsRUFBRTtRQUM1QyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUE7UUFDM0MsS0FBSyxNQUFNLE1BQU0sSUFBSSxPQUFPLEVBQUU7WUFDNUIsSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLElBQUksRUFBRTtnQkFDMUIsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFBO2FBQ2xDO1NBQ0Y7SUFDSCxDQUFDLENBQUE7SUFFRCxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO0FBQ3ZCLENBQUMifQ==\",\"filename\":\"scripts/server-tree.js\",\"server\":\"home\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"home\"}}],[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"home\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"home\"}}],[\"scripts/hack-v2.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\n * An improved version of the hack script.\\n * This script runs weaken scripts immediately after invoking hack and grow\\n * scripts. This makes sure these three scripts always run with low server\\n * security, increasing the number of invocations overall.\\n * For best results, this script should be run at the same time on all servers.\\n */\\nimport { HOSTS, SCRIPTS } from 'scripts/utils/constants';\\nconst OFFSET = 1000;\\nexport async function main(ns) {\\n    const host = ns.getHostname();\\n    const target = ns.args[0] ?? HOSTS.JOESGUNS;\\n    if (!target) {\\n        ns.print('Missing target argument');\\n        ns.exit();\\n    }\\n    const getHostAvailableRam = () => ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\n    const hackRam = ns.getScriptRam(SCRIPTS.SIMPLE_HACK);\\n    const growRam = ns.getScriptRam(SCRIPTS.SIMPLE_GROW);\\n    const weakenRam = ns.getScriptRam(SCRIPTS.SIMPLE_WEAKEN);\\n    if (getHostAvailableRam() < 2 * hackRam) {\\n        ns.print(`Host ${host} does not have enough RAM for this script, aborting.`);\\n        ns.exit();\\n    }\\n    const minSecurity = ns.getServerMinSecurityLevel(target);\\n    const maxMoney = ns.getServerMaxMoney(target);\\n    const targetSecurity = Math.max(1.3 * minSecurity, minSecurity + 5);\\n    const targetMoney = (0.75 * maxMoney);\\n    while (true) {\\n        const curSecurity = ns.getServerSecurityLevel(target);\\n        const curMoney = ns.getServerMoneyAvailable(target);\\n        const availableRam = getHostAvailableRam();\\n        if (curSecurity > targetSecurity) {\\n            ns.printf('Lowering difficulty (current: %.3f, target: %.3f)', curSecurity, targetSecurity);\\n            const weakenThreads = Math.floor(availableRam / weakenRam);\\n            const weakenTime = ns.getWeakenTime(target);\\n            ns.exec(SCRIPTS.SIMPLE_WEAKEN, host, weakenThreads, target);\\n            await ns.sleep(weakenTime + OFFSET);\\n        }\\n        else if (curMoney < targetMoney) {\\n            ns.printf('Increasing available money (current: %s, target: %s)', ns.formatNumber(curMoney), ns.formatNumber(targetMoney));\\n            const growThreads = Math.floor(availableRam / 2 / growRam);\\n            const growTime = ns.getGrowTime(target);\\n            const weakenThreads = Math.floor((availableRam - growThreads * growRam) / weakenRam);\\n            const weakenTime = ns.getWeakenTime(target);\\n            ns.exec(SCRIPTS.SIMPLE_GROW, host, growThreads, target);\\n            await ns.sleep(Math.max(0, growTime - weakenTime));\\n            ns.exec(SCRIPTS.SIMPLE_WEAKEN, host, weakenThreads, target);\\n            await ns.sleep(weakenTime + OFFSET);\\n        }\\n        else {\\n            const hackThreads = Math.floor(availableRam / 2 / hackRam);\\n            const hackTime = ns.getHackTime(target);\\n            const weakenThreads = Math.floor((availableRam - hackThreads * hackRam) / weakenRam);\\n            const weakenTime = ns.getWeakenTime(target);\\n            ns.exec(SCRIPTS.SIMPLE_HACK, host, hackThreads, target);\\n            await ns.sleep(Math.max(0, hackTime - weakenTime));\\n            ns.exec(SCRIPTS.SIMPLE_WEAKEN, host, weakenThreads, target);\\n            await ns.sleep(weakenTime + OFFSET);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay12Mi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL2hhY2stdjIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBSUgsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQTtBQUV4RCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUE7QUFFbkIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUE7SUFDN0IsTUFBTSxNQUFNLEdBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVksSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFBO0lBRXZELElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDWCxFQUFFLENBQUMsS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUE7UUFDbkMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFBO0tBQ1Y7SUFFRCxNQUFNLG1CQUFtQixHQUFHLEdBQUcsRUFBRSxDQUMvQixFQUFFLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUV0RCxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUNwRCxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUNwRCxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQTtJQUV4RCxJQUFJLG1CQUFtQixFQUFFLEdBQUcsQ0FBQyxHQUFHLE9BQU8sRUFBRTtRQUN2QyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsSUFBSSxzREFBc0QsQ0FBQyxDQUFBO1FBQzVFLEVBQUUs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\",\"filename\":\"scripts/hack-v2.js\",\"server\":\"home\"}}],[\"scripts/hack-v3.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\n * Same as hack-v2, but this also implements a sync barrier so that all hack-v3\\n * scripts remain in sync, even if they are executed at different times.\\n */\\nimport { HOSTS, SCRIPTS } from 'scripts/utils/constants';\\nimport { createTimer } from 'scripts/ui/timer';\\nconst REGISTRATION_TIME = 5000;\\nconst OFFSET = 1000;\\nlet busy = false;\\nlet registrationOpen = false;\\nconst participants = new Set();\\nconst register = async (ns, id) => {\\n    while (busy) {\\n        ns.print('Waiting for barrier');\\n        await ns.sleep(1000);\\n    }\\n    let isManager = false;\\n    if (!registrationOpen) {\\n        isManager = true;\\n        registrationOpen = true;\\n        setTimeout(() => {\\n            busy = true;\\n            registrationOpen = false;\\n            // console.log(`Participants: ${[...participants.values()].join(', ')}`)\\n        }, REGISTRATION_TIME);\\n    }\\n    participants.add(id);\\n    return isManager;\\n};\\nconst finish = (id) => {\\n    participants.delete(id);\\n    if (participants.size === 0) {\\n        busy = false;\\n    }\\n};\\nexport async function main(ns) {\\n    const host = ns.getHostname();\\n    const target = ns.args[0] ?? HOSTS.JOESGUNS;\\n    if (!target) {\\n        ns.print('Missing target argument');\\n        ns.exit();\\n    }\\n    const getHostAvailableRam = () => ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\n    const hackRam = ns.getScriptRam(SCRIPTS.SIMPLE_HACK);\\n    const growRam = ns.getScriptRam(SCRIPTS.SIMPLE_GROW);\\n    const weakenRam = ns.getScriptRam(SCRIPTS.SIMPLE_WEAKEN);\\n    if (getHostAvailableRam() < 2 * hackRam) {\\n        ns.print(`Host ${host} does not have enough RAM for this script, aborting.`);\\n        ns.exit();\\n    }\\n    ns.atExit(() => {\\n        if (participants.has(host)) {\\n            finish(host);\\n        }\\n    });\\n    const minSecurity = ns.getServerMinSecurityLevel(target);\\n    const maxMoney = ns.getServerMaxMoney(target);\\n    const targetSecurity = Math.max(1.3 * minSecurity, minSecurity + 5);\\n    const targetMoney = (0.75 * maxMoney);\\n    while (true) {\\n        const isManager = await register(ns, host);\\n        const curSecurity = ns.getServerSecurityLevel(target);\\n        const curMoney = ns.getServerMoneyAvailable(target);\\n        const availableRam = getHostAvailableRam();\\n        if (curSecurity > targetSecurity) {\\n            ns.printf('Lowering difficulty (current: %.3f, target: %.3f)', curSecurity, targetSecurity);\\n            const weakenThreads = Math.floor(availableRam / weakenRam);\\n            const weakenTime = ns.getWeakenTime(target);\\n            ns.exec(SCRIPTS.SIMPLE_WEAKEN, host, weakenThreads, target);\\n            isManager && createTimer(`Weaken ${target}`, weakenTime);\\n            await ns.sleep(weakenTime + OFFSET);\\n        }\\n        else if (curMoney < targetMoney) {\\n            ns.printf('Increasing available money (current: %s, target: %s)', ns.formatNumber(curMoney), ns.formatNumber(targetMoney));\\n            const growThreads = Math.floor(availableRam / 2 / growRam);\\n            const growTime = ns.getGrowTime(target);\\n            const weakenThreads = Math.floor((availableRam - growThreads * growRam) / weakenRam);\\n            const weakenTime = ns.getWeakenTime(target);\\n            ns.exec(SCRIPTS.SIMPLE_GROW, host, growThreads, target);\\n            isManager && createTimer(`Grow ${target}`, growTime);\\n            await ns.sleep(Math.max(0, growTime - weakenTime));\\n            ns.exec(SCRIPTS.SIMPLE_WEAKEN, host, weakenThreads, target);\\n            isManager && createTimer(`Weaken ${target}`, weakenTime);\\n            await ns.sleep(weakenTime + OFFSET);\\n        }\\n        else {\\n            const hackThreads = Math.floor(availableRam / 2 / hackRam);\\n            const hackTime = ns.getHackTime(target);\\n            const weakenThreads = Math.floor((availableRam - hackThreads * hackRam) / weakenRam);\\n            const weakenTime = ns.getWeakenTime(target);\\n            ns.exec(SCRIPTS.SIMPLE_HACK, host, hackThreads, target);\\n            isManager && createTimer(`Hack ${target}`, hackTime);\\n            await ns.sleep(Math.max(0, hackTime - weakenTime));\\n            ns.exec(SCRIPTS.SIMPLE_WEAKEN, host, weakenThreads, target);\\n            isManager && createTimer(`Weaken ${target}`, weakenTime);\\n            await ns.sleep(weakenTime + OFFSET);\\n        }\\n        finish(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay12My5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL2hhY2stdjMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBSUgsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQTtBQUN4RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFFOUMsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUE7QUFDOUIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFBO0FBRW5CLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQTtBQUNoQixJQUFJLGdCQUFnQixHQUFHLEtBQUssQ0FBQTtBQUM1QixNQUFNLFlBQVksR0FBRyxJQUFJLEdBQUcsRUFBVSxDQUFBO0FBRXRDLE1BQU0sUUFBUSxHQUFHLEtBQUssRUFBRSxFQUFNLEVBQUUsRUFBVSxFQUFFLEVBQUU7SUFDNUMsT0FBTyxJQUFJLEVBQUU7UUFDWCxFQUFFLENBQUMsS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUE7UUFDL0IsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3JCO0lBRUQsSUFBSSxTQUFTLEdBQUcsS0FBSyxDQUFBO0lBRXJCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtRQUNyQixTQUFTLEdBQUcsSUFBSSxDQUFBO1FBQ2hCLGdCQUFnQixHQUFHLElBQUksQ0FBQTtRQUN2QixVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2QsSUFBSSxHQUFHLElBQUksQ0FBQTtZQUNYLGdCQUFnQixHQUFHLEtBQUssQ0FBQTtZQUN4Qix3RUFBd0U7UUFDMUUsQ0FBQyxFQUFFLGlCQUFpQixDQUFDLENBQUE7S0FDdEI7SUFFRCxZQUFZLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ3BCLE9BQU8sU0FBUyxDQUFBO0FBQ2xCLENBQUMsQ0FBQTtBQUVELE1BQU0sTUFBTSxHQUFH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\",\"filename\":\"scripts/hack-v3.js\",\"server\":\"home\"}}],[\"scripts/test.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"let foo = 0;\\nexport async function main(ns) {\\n    ns.tprint(foo);\\n    foo += 1;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3Rlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFBO0FBRVgsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ2QsR0FBRyxJQUFJLENBQUMsQ0FBQTtBQUNWLENBQUMifQ==\",\"filename\":\"scripts/test.js\",\"server\":\"home\"}}],[\"contracts/unique-paths.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\nconst grid = [\\n    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,\\n    0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\\n];\\nconst n = 8;\\nconst m = 6;\\nconst solve = () => {\\n    const check = (r, c) => grid[r * m + c];\\n    const dp = [...new Array(n)].map(() => new Array(m).fill(0));\\n    dp[0][0] = 1;\\n    for (let r = 0; r < n; r++) {\\n        for (let c = r === 0 ? 1 : 0; c < m; c++) {\\n            if (check(r, c) === 1) {\\n                continue;\\n            }\\n            dp[r][c] = (r === 0 ? 0 : dp[r - 1][c]) + (c === 0 ? 0 : dp[r][c - 1]);\\n        }\\n    }\\n    console.log(dp);\\n    console.log(dp[n - 1][m - 1]);\\n};\\nsolve();\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pcXVlLXBhdGhzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbnRyYWN0cy91bmlxdWUtcGF0aHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU0sSUFBSSxHQUFHO0lBQ1gsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7SUFDNUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztDQUNqRSxDQUFBO0FBRUQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQ1gsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBRVgsTUFBTSxLQUFLLEdBQUcsR0FBRyxFQUFFO0lBQ2pCLE1BQU0sS0FBSyxHQUFHLENBQUMsQ0FBUyxFQUFFLENBQVMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7SUFFdkQsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBRTVELEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDWixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzFCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN4QyxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUNyQixTQUFRO2FBQ1Q7WUFDRCxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO1NBQ3ZFO0tBQ0Y7SUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ2YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQy9CLENBQUMsQ0FBQTtBQUVELEtBQUssRUFBRSxDQUFBIn0=\",\"filename\":\"contracts/unique-paths.js\",\"server\":\"home\"}}],[\"contracts/subarray-max-sum.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = [\\n    -9, 8, -10, 9, 2, -9, -7, -5, 6, 9, 3, 2, 1, -1, 2, -9, 8, 5, -6, -6, 3, -3,\\n    6, 7, -1, 5, -7, -1,\\n];\\nexport const solve = (arr) => {\\n    let best = arr[0];\\n    let sum = 0;\\n    for (const x of arr) {\\n        sum += x;\\n        if (sum > best) {\\n            best = sum;\\n        }\\n        if (sum < 0) {\\n            sum = 0;\\n        }\\n    }\\n    console.log(best);\\n};\\nsolve(input);\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ViYXJyYXktbWF4LXN1bS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb250cmFjdHMvc3ViYXJyYXktbWF4LXN1bS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLEtBQUssR0FBRztJQUNaLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMzRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7Q0FDcEIsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLEdBQWEsRUFBRSxFQUFFO0lBQ3JDLElBQUksSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUNqQixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUE7SUFFWCxLQUFLLE1BQU0sQ0FBQyxJQUFJLEdBQUcsRUFBRTtRQUNuQixHQUFHLElBQUksQ0FBQyxDQUFBO1FBRVIsSUFBSSxHQUFHLEdBQUcsSUFBSSxFQUFFO1lBQ2QsSUFBSSxHQUFHLEdBQUcsQ0FBQTtTQUNYO1FBRUQsSUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUFFO1lBQ1gsR0FBRyxHQUFHLENBQUMsQ0FBQTtTQUNSO0tBQ0Y7SUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFBO0FBQ25CLENBQUMsQ0FBQTtBQUVELEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQSJ9\",\"filename\":\"contracts/subarray-max-sum.js\",\"server\":\"home\"}}],[\"scripts/contract-finder.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from 'scripts/utils/servers';\\nimport { solve } from 'scripts/contracts/index';\\nexport const findContracts = (ns) => {\\n    const servers = getAllServers(ns);\\n    const allContracts = [];\\n    for (const server of servers) {\\n        const contracts = ns.ls(server.host, '.cct');\\n        for (const filename of contracts) {\\n            allContracts.push({\\n                host: server.host,\\n                filename,\\n            });\\n        }\\n    }\\n    return allContracts;\\n};\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    while (true) {\\n        ns.print('Looking for contracts...');\\n        const contracts = findContracts(ns);\\n        for (const contract of contracts) {\\n            ns.print(`Attempting to solve ${contract.filename} at ${contract.host}...`);\\n            solve(ns, contract.host, contract.filename);\\n        }\\n        await ns.sleep(15000);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJhY3QtZmluZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NjcmlwdHMvY29udHJhY3QtZmluZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQTtBQUNyRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0seUJBQXlCLENBQUE7QUFPL0MsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQUMsRUFBTSxFQUFFLEVBQUU7SUFDdEMsTUFBTSxPQUFPLEdBQUcsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBRWpDLE1BQU0sWUFBWSxHQUFlLEVBQUUsQ0FBQTtJQUVuQyxLQUFLLE1BQU0sTUFBTSxJQUFJLE9BQU8sRUFBRTtRQUM1QixNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUE7UUFFNUMsS0FBSyxNQUFNLFFBQVEsSUFBSSxTQUFTLEVBQUU7WUFDaEMsWUFBWSxDQUFDLElBQUksQ0FBQztnQkFDaEIsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJO2dCQUNqQixRQUFRO2FBQ1QsQ0FBQyxDQUFBO1NBQ0g7S0FDRjtJQUVELE9BQU8sWUFBWSxDQUFBO0FBQ3JCLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUVwQixPQUFPLElBQUksRUFBRTtRQUNYLEVBQUUsQ0FBQyxLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQTtRQUVwQyxNQUFNLFNBQVMsR0FBRyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUE7UUFFbkMsS0FBSyxNQUFNLFFBQVEsSUFBSSxTQUFTLEVBQUU7WUFDaEMsRUFBRSxDQUFDLEtBQUssQ0FDTix1QkFBdUIsUUFBUSxDQUFDLFFBQVEsT0FBTyxRQUFRLENBQUMsSUFBSSxLQUFLLENBQ2xFLENBQUE7WUFFRCxLQUFLLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1NBQzVDO1FBRUQsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/contract-finder.js\",\"server\":\"home\"}}],[\"scripts/contracts/subarray-max-sum.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = [\\n    -9, 8, -10, 9, 2, -9, -7, -5, 6, 9, 3, 2, 1, -1, 2, -9, 8, 5, -6, -6, 3, -3,\\n    6, 7, -1, 5, -7, -1,\\n];\\nexport const solve = (arr) => {\\n    let best = arr[0];\\n    let sum = 0;\\n    for (const x of arr) {\\n        sum += x;\\n        if (sum > best) {\\n            best = sum;\\n        }\\n        if (sum < 0) {\\n            sum = 0;\\n        }\\n    }\\n    console.log(best);\\n};\\nsolve(input);\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ViYXJyYXktbWF4LXN1bS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvbnRyYWN0cy9zdWJhcnJheS1tYXgtc3VtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sS0FBSyxHQUFHO0lBQ1osQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzNFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUNwQixDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLENBQUMsR0FBYSxFQUFFLEVBQUU7SUFDckMsSUFBSSxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ2pCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQTtJQUVYLEtBQUssTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFO1FBQ25CLEdBQUcsSUFBSSxDQUFDLENBQUE7UUFFUixJQUFJLEdBQUcsR0FBRyxJQUFJLEVBQUU7WUFDZCxJQUFJLEdBQUcsR0FBRyxDQUFBO1NBQ1g7UUFFRCxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUU7WUFDWCxHQUFHLEdBQUcsQ0FBQyxDQUFBO1NBQ1I7S0FDRjtJQUVELE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDbkIsQ0FBQyxDQUFBO0FBRUQsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBIn0=\",\"filename\":\"scripts/contracts/subarray-max-sum.js\",\"server\":\"home\"}}],[\"scripts/contracts/unique-paths.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\nconst grid = [\\n    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,\\n    0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\\n];\\nconst n = 8;\\nconst m = 6;\\nconst solve = () => {\\n    const check = (r, c) => grid[r * m + c];\\n    const dp = [...new Array(n)].map(() => new Array(m).fill(0));\\n    dp[0][0] = 1;\\n    for (let r = 0; r < n; r++) {\\n        for (let c = r === 0 ? 1 : 0; c < m; c++) {\\n            if (check(r, c) === 1) {\\n                continue;\\n            }\\n            dp[r][c] = (r === 0 ? 0 : dp[r - 1][c]) + (c === 0 ? 0 : dp[r][c - 1]);\\n        }\\n    }\\n    console.log(dp);\\n    console.log(dp[n - 1][m - 1]);\\n};\\nsolve();\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pcXVlLXBhdGhzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29udHJhY3RzL3VuaXF1ZS1wYXRocy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxJQUFJLEdBQUc7SUFDWCxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztJQUM1RSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO0NBQ2pFLENBQUE7QUFFRCxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7QUFDWCxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7QUFFWCxNQUFNLEtBQUssR0FBRyxHQUFHLEVBQUU7SUFDakIsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFTLEVBQUUsQ0FBUyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUV2RCxNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUcsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFFNUQsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNaLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDMUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3hDLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ3JCLFNBQVE7YUFDVDtZQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FDdkU7S0FDRjtJQUVELE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDZixPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDL0IsQ0FBQyxDQUFBO0FBRUQsS0FBSyxFQUFFLENBQUEifQ==\",\"filename\":\"scripts/contracts/unique-paths.js\",\"server\":\"home\"}}],[\"exploits/alter-reality.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// @ts-nocheck\\nexport async function main(ns) {\\n    ns.alterReality();\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWx0ZXItcmVhbGl0eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leHBsb2l0cy9hbHRlci1yZWFsaXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWM7QUFXZCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQTtBQUNuQixDQUFDIn0=\",\"filename\":\"exploits/alter-reality.js\",\"server\":\"home\"}}],[\"exploits/bypass.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// @ts-nocheck\\nexport async function main(ns) {\\n    const doc = eval('document');\\n    ns.bypass(doc);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnlwYXNzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2V4cGxvaXRzL2J5cGFzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxjQUFjO0FBSWQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDNUIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQTtBQUNoQixDQUFDIn0=\",\"filename\":\"exploits/bypass.js\",\"server\":\"home\"}}],[\"exploits/exploit.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// @ts-nocheck\\nexport async function main(ns) {\\n    ns.exploit();\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwbG9pdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leHBsb2l0cy9leHBsb2l0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWM7QUFJZCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtBQUNkLENBQUMifQ==\",\"filename\":\"exploits/exploit.js\",\"server\":\"home\"}}],[\"exploits/rainbow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// @ts-nocheck\\nexport async function main(ns) {\\n    ns.rainbow('noodles');\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFpbmJvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leHBsb2l0cy9yYWluYm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWM7QUFJZCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUE7QUFDdkIsQ0FBQyJ9\",\"filename\":\"exploits/rainbow.js\",\"server\":\"home\"}}],[\"exploits/tampering.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main() {\\n    const old = Number.prototype.toExponential;\\n    Number.prototype.toExponential = () => 'a';\\n    setTimeout(() => {\\n        Number.prototype.toExponential = old;\\n    }, 16 * 60 * 1000);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFtcGVyaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2V4cGxvaXRzL3RhbXBlcmluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUk7SUFDeEIsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUE7SUFDMUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxhQUFhLEdBQUcsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFBO0lBRTFDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxNQUFNLENBQUMsU0FBUyxDQUFDLGFBQWEsR0FBRyxHQUFHLENBQUE7SUFDdEMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUE7QUFDcEIsQ0FBQyJ9\",\"filename\":\"exploits/tampering.js\",\"server\":\"home\"}}],[\"exploits/time-compression.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main() {\\n    const oldNow = performance.now;\\n    performance.now = () => 42;\\n    setTimeout(() => {\\n        performance.now = oldNow;\\n    }, 2000);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1jb21wcmVzc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leHBsb2l0cy90aW1lLWNvbXByZXNzaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSTtJQUN4QixNQUFNLE1BQU0sR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFBO0lBQzlCLFdBQVcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFBO0lBQzFCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxXQUFXLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQTtJQUMxQixDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUE7QUFDVixDQUFDIn0=\",\"filename\":\"exploits/time-compression.js\",\"server\":\"home\"}}],[\"exploits/unclickable.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main() {\\n    const doc = eval('document');\\n    const el = doc.getElementById('unclickable');\\n    el.style.display = 'block';\\n    el.style.visibility = 'visible';\\n    el.style.height = '20px';\\n    el.style.zIndex = '100';\\n    el.style.backgroundColor = 'red';\\n    el.onmouseup = () => {\\n        el.style.display = 'none';\\n        el.style.visibility = 'hidden';\\n        console.log('mouseup');\\n    };\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5jbGlja2FibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZXhwbG9pdHMvdW5jbGlja2FibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJO0lBQ3hCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUM1QixNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBRSxDQUFBO0lBRTdDLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQTtJQUMxQixFQUFFLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUE7SUFDL0IsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFBO0lBQ3hCLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQTtJQUN2QixFQUFFLENBQUMsS0FBSyxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUE7SUFFaEMsRUFBRSxDQUFDLFNBQVMsR0FBRyxHQUFHLEVBQUU7UUFDbEIsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFBO1FBQ3pCLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLFFBQVEsQ0FBQTtRQUM5QixPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBQ3hCLENBQUMsQ0FBQTtBQUNILENBQUMifQ==\",\"filename\":\"exploits/unclickable.js\",\"server\":\"home\"}}],[\"scripts/scp-all.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HOSTS } from 'scripts/utils/constants';\\nexport async function main(ns) {\\n    const dest = ns.args[0] ?? ns.getHostname();\\n    if (!dest) {\\n        ns.tprint('Missing destination argument');\\n        ns.exit();\\n    }\\n    const files = ns.ls(HOSTS.HOME).filter((f) => f.endsWith('.js'));\\n    ns.scp(files, dest, HOSTS.HOME);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NwLWFsbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NjcC1hbGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBRS9DLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUE7SUFFdkQsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsOEJBQThCLENBQUMsQ0FBQTtRQUN6QyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO0lBRWhFLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDakMsQ0FBQyJ9\",\"filename\":\"scripts/scp-all.js\",\"server\":\"home\"}}],[\"scripts/contracts/stock-trader.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = [2, [16, 188, 133, 38, 163, 94, 43, 43, 135, 17, 107, 39, 78, 199, 84, 78, 158, 72, 158, 71, 6, 123, 145, 55, 87, 127, 32, 29, 26, 164, 142, 141, 166]];\\nexport const solve = (input) => {\\n    const [k, arr] = input;\\n    const n = arr.length;\\n    const dp = [...Array(k + 1)].map(() => Array(n).fill(0));\\n    for (let kk = 1; kk <= k; kk++) {\\n        for (let i = 1; i < n; i++) {\\n            dp[kk][i] = Math.max(dp[kk][i - 1], dp[kk - 1][i]);\\n            for (let j = i - 1; j >= 0; j--) {\\n                if (arr[i] > arr[j]) {\\n                    dp[kk][i] = Math.max(dp[kk][i], dp[kk - 1][j] + arr[i] - arr[j]);\\n                }\\n            }\\n        }\\n    }\\n    return dp[k][n - 1];\\n};\\nexport const solvers = {\\n    'Algorithmic Stock Trader IV': solve,\\n    'Algorithmic Stock Trader III': (input) => solve([2, input]),\\n    'Algorithmic Stock Trader II': (input) => solve([input.length, input]),\\n    'Algorithmic Stock Trader I': (input) => solve([1, input]),\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvY2stdHJhZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29udHJhY3RzL3N0b2NrLXRyYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxNQUFNLEtBQUssR0FBVSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQTtBQUU1SyxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxLQUFZLEVBQUUsRUFBRTtJQUNwQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQTtJQUN0QixNQUFNLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFBO0lBRXBCLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUV4RCxLQUFLLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFO1FBQzlCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDMUIsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDbEQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQy9CLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtvQkFDbkIsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO2lCQUNqRTthQUNGO1NBQ0Y7S0FDRjtJQUVELE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtBQUNyQixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUc7SUFDckIsNkJBQTZCLEVBQUUsS0FBSztJQUNwQyw4QkFBOEIsRUFBRSxDQUFDLEtBQWUsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3RFLDZCQUE2QixFQUFFLENBQUMsS0FBZSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2hGLDRCQUE0QixFQUFFLENBQUMsS0FBZSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDckUsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUN6QixDQUFDIn0=\",\"filename\":\"scripts/contracts/stock-trader.js\",\"server\":\"home\"}}],[\"scripts/contracts/ways-to-sum.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = {\\n    n: 115,\\n    vals: [1, 2, 4, 5, 8, 9, 10, 11, 13, 14, 16],\\n};\\nexport const solve = (input) => {\\n    const { n, vals } = input;\\n    const dp = Array(n + 1).fill(0);\\n    dp[0] = 1;\\n    for (const val of vals) {\\n        for (let i = val; i <= n; i++) {\\n            dp[i] += dp[i - val];\\n        }\\n    }\\n    return dp[n];\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\nconsole.log(solve(input));\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2F5cy10by1zdW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9jb250cmFjdHMvd2F5cy10by1zdW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBT0EsTUFBTSxLQUFLLEdBQUc7SUFDWixDQUFDLEVBQUUsR0FBRztJQUNOLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUM7Q0FDN0MsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLEtBQVksRUFBRSxFQUFFO0lBQ3BDLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFBO0lBRXpCLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQy9CLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7SUFFVCxLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksRUFBRTtRQUN0QixLQUFLLElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzdCLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFBO1NBQ3JCO0tBQ0Y7SUFFRCxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUNkLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUN6QixDQUFDO0FBRUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQSJ9\",\"filename\":\"scripts/contracts/ways-to-sum.js\",\"server\":\"home\"}}],[\"scripts/contracts/index.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as proper2ColoringOfAGraph from 'scripts/contracts/proper-2-coloring-of-a-graph';\\nimport * as algorithmicStockTrader from 'scripts/contracts/algorithmic-stock-trader';\\nimport * as rleCompression from 'scripts/contracts/rle-compression';\\nimport * as lzCompression from 'scripts/contracts/lz-compression';\\nimport * as findAllValidMathExpressions from 'scripts/contracts/find-all-valid-math-expressions';\\nimport * as totalWaysToSum from 'scripts/contracts/total-ways-to-sum';\\nimport * as findLargestPrimeFactor from 'scripts/contracts/find-largest-prime-factor';\\nimport * as generateIPAddresses from 'scripts/contracts/generate-ip-addresses';\\nimport * as uniquePathsInAGrid from 'scripts/contracts/unique-paths-in-a-grid';\\nimport * as subarrayWithMaximumSum from 'scripts/contracts/subarray-with-maximum-sum';\\nimport * as viginereCipher from 'scripts/contracts/vigenere-cipher';\\nimport * as hammingCodes from 'scripts/contracts/hamming-codes';\\nimport * as arrayJumpingGame from 'scripts/contracts/array-jumping-game';\\nimport * as caesarCipher from 'scripts/contracts/caesar-cipher';\\nimport * as spiralizeMatrix from 'scripts/contracts/spiralize-matrix';\\nimport * as mergeOverlappingIntervals from 'scripts/contracts/merge-overlapping-intervals';\\nimport * as shortestPathInAGrid from 'scripts/contracts/shortest-path-in-a-grid';\\nimport * as sanitizeParenthesisInExpression from 'scripts/contracts/sanitize-parenthesis-in-expression';\\nimport * as minimumPathSumInATriangle from 'scripts/contracts/minimum-path-sum-in-a-triangle';\\nconst solvers = {\\n    ...proper2ColoringOfAGraph.solvers,\\n    ...algorithmicStockTrader.solvers,\\n    ...rleCompression.solvers,\\n    ...lzCompression.solvers,\\n    ...findAllValidMathExpressions.solvers,\\n    ...totalWaysToSum.solvers,\\n    ...findLargestPrimeFactor.solvers,\\n    ...generateIPAddresses.solvers,\\n    ...uniquePathsInAGrid.solvers,\\n    ...subarrayWithMaximumSum.solvers,\\n    ...viginereCipher.solvers,\\n    ...hammingCodes.solvers,\\n    ...arrayJumpingGame.solvers,\\n    ...caesarCipher.solvers,\\n    ...spiralizeMatrix.solvers,\\n    ...mergeOverlappingIntervals.solvers,\\n    ...shortestPathInAGrid.solvers,\\n    ...sanitizeParenthesisInExpression.solvers,\\n    ...minimumPathSumInATriangle.solvers,\\n};\\nexport const solve = (ns, host, filename) => {\\n    const name = ns.codingcontract.getContractType(filename, host);\\n    const data = ns.codingcontract.getData(filename, host);\\n    const solver = solvers[name];\\n    if (!solver) {\\n        ns.toast(`Solver for contract \\\"${name}\\\" not implemented.`, 'warning', 5000);\\n        return;\\n    }\\n    const reward = ns.codingcontract.attempt(solver(data), filename, host);\\n    if (reward) {\\n        ns.toast(`Correctly solved contract. Reward: ${reward}`, 'success', 5000);\\n    }\\n    else {\\n        ns.toast('Failed to solve contract.', 'error', 5000);\\n        ns.tprint(`Failed to solve ${filename} at ${host}`);\\n        ns.exit();\\n    }\\n};\\nexport async function main(ns) {\\n    const [host, filename] = ns.args;\\n    if (!host || !filename) {\\n        ns.tprint('Missing host or filename argument');\\n        ns.exit();\\n    }\\n    solve(ns, host, filename);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9jb250cmFjdHMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxLQUFLLHVCQUF1QixNQUFNLGdEQUFnRCxDQUFBO0FBQ3pGLE9BQU8sS0FBSyxzQkFBc0IsTUFBTSw0Q0FBNEMsQ0FBQTtBQUNwRixPQUFPLEtBQUssY0FBYyxNQUFNLG1DQUFtQyxDQUFBO0FBQ25FLE9BQU8sS0FBSyxhQUFhLE1BQU0sa0NBQWtDLENBQUE7QUFDakUsT0FBTyxLQUFLLDJCQUEyQixNQUFNLG1EQUFtRCxDQUFBO0FBQ2hHLE9BQU8sS0FBSyxjQUFjLE1BQU0scUNBQXFDLENBQUE7QUFDckUsT0FBTyxLQUFLLHNCQUFzQixNQUFNLDZDQUE2QyxDQUFBO0FBQ3JGLE9BQU8sS0FBSyxtQkFBbUIsTUFBTSx5Q0FBeUMsQ0FBQTtBQUM5RSxPQUFPLEtBQUssa0JBQWtCLE1BQU0sMENBQTBDLENBQUE7QUFDOUUsT0FBTyxLQUFLLHNCQUFzQixNQUFNLDZDQUE2QyxDQUFBO0FBQ3JGLE9BQU8sS0FBSyxjQUFjLE1BQU0sbUNBQW1DLENBQUE7QUFDbkUsT0FBTyxLQUFLLFlBQVksTUFBTSxpQ0FBaUMsQ0FBQTtBQUMvRCxPQUFPLEtBQUssZ0JBQWdCLE1BQU0sc0NBQXNDLENBQUE7QUFDeEUsT0FBTyxLQUFLLFlBQVksTUFBTSxpQ0FBaUMsQ0FBQTtBQUMvRCxPQUFPLEtBQUssZUFBZSxNQUFNLG9DQUFvQyxDQUFBO0FBQ3JFLE9BQU8sS0FBSyx5QkFBeUIsTUFBTSwrQ0FBK0MsQ0FBQTtBQUMxRixPQUFPLEtBQUssbUJBQW1CLE1BQU0sMkNBQTJDLENBQUE7QUFDaEYsT0FBTyxLQUFLLCtCQUErQixNQUFNLHNEQUFzRCxDQUFBO0FBQ3ZHLE9BQU8sS0FBSyx5QkFBeUIsTUFBTSxrREFBa0QsQ0FBQTtBQUU3RixNQUFNLE9BQU8sR0FBNEM7SUFDdkQsR0FB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\",\"filename\":\"scripts/contracts/index.js\",\"server\":\"home\"}}],[\"scripts/ui/timer.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatTime } from 'scripts/utils/time';\\nconst CONTAINER_ID = 'custom-ui-container';\\nconst init = () => {\\n    const doc = eval('document');\\n    if (doc.getElementById(CONTAINER_ID)) {\\n        return;\\n    }\\n    const container = doc.createElement('div');\\n    container.id = CONTAINER_ID;\\n    container.style.position = 'fixed';\\n    container.style.bottom = '2rem';\\n    container.style.right = '0';\\n    container.style.display = 'flex';\\n    container.style.flexDirection = 'column';\\n    container.style.alignItems = 'end';\\n    container.style.fontFamily =\\n        '\\\"Lucida Console\\\", \\\"Lucida Sans Unicode\\\", \\\"Fira Mono\\\", Consolas, \\\"Courier New\\\", Courier, monospace, \\\"Times New Roman\\\"';\\n    container.style.zIndex = '100';\\n    container.style.color = '#0c0';\\n    doc.body.append(container);\\n};\\nexport const createTimer = (label, time) => {\\n    const doc = eval('document');\\n    init();\\n    const now = performance.now();\\n    const target = now + time;\\n    const el = doc.createElement('div');\\n    el.style.padding = '1rem 0.5rem';\\n    el.style.borderStyle = 'solid';\\n    el.style.borderColor = 'rgb(128, 128, 128)';\\n    el.style.borderWidth = '1px';\\n    const container = doc.getElementById(CONTAINER_ID);\\n    const refresh = () => {\\n        const remTime = target - performance.now();\\n        if (remTime < 0) {\\n            container?.removeChild(el);\\n            return;\\n        }\\n        el.innerText = `${label}: ${formatTime(remTime)}`;\\n        setTimeout(refresh, 100);\\n    };\\n    refresh();\\n    container?.append(el);\\n};\\nexport async function main() {\\n    init();\\n    createTimer('Test', 30000);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy91aS90aW1lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sb0JBQW9CLENBQUE7QUFFL0MsTUFBTSxZQUFZLEdBQUcscUJBQXFCLENBQUE7QUFFMUMsTUFBTSxJQUFJLEdBQUcsR0FBRyxFQUFFO0lBQ2hCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQWEsQ0FBQTtJQUV4QyxJQUFJLEdBQUcsQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLEVBQUU7UUFDcEMsT0FBTTtLQUNQO0lBRUQsTUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUMxQyxTQUFTLENBQUMsRUFBRSxHQUFHLFlBQVksQ0FBQTtJQUMzQixTQUFTLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUE7SUFDbEMsU0FBUyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFBO0lBQy9CLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQTtJQUMzQixTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUE7SUFDaEMsU0FBUyxDQUFDLEtBQUssQ0FBQyxhQUFhLEdBQUcsUUFBUSxDQUFBO0lBQ3hDLFNBQVMsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQTtJQUNsQyxTQUFTLENBQUMsS0FBSyxDQUFDLFVBQVU7UUFDeEIsc0hBQXNILENBQUE7SUFDeEgsU0FBUyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFBO0lBQzlCLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQTtJQUU5QixHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQTtBQUM1QixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsQ0FBQyxLQUFhLEVBQUUsSUFBWSxFQUFFLEVBQUU7SUFDekQsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBYSxDQUFBO0lBRXhDLElBQUksRUFBRSxDQUFBO0lBRU4sTUFBTSxHQUFHLEdBQUcsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFBO0lBQzdCLE1BQU0sTUFBTSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUE7SUFFekIsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUNuQyxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxhQUFhLENBQUE7SUFDaEMsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFBO0lBQzlCLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFHLG9CQUFvQixDQUFBO0lBQzNDLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQTtJQUU1QixNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFBO0lBRWxELE1BQU0sT0FBTyxHQUFHLEdBQUcsRUFBRTtRQUNuQixNQUFNLE9BQU8sR0FBRyxNQUFNLEdBQUcsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFBO1FBRTFDLElBQUksT0FBTyxHQUFHLENBQUMsRUFBRTtZQUNmLFNBQVMsRUFBRSxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUE7WUFDMUIsT0FBTTtTQUNQO1FBRUQsRUFBRSxDQUFDLFNBQVMsR0FBRyxHQUFHLEtBQUssS0FBSyxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQTtRQUNqRCxVQUFVLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFBO0lBQzFCLENBQUMsQ0FBQTtJQUVELE9BQU8sRUFBRSxDQUFBO0lBRVQsU0FBUyxFQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQTtBQUN2QixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUk7SUFDeEIsSUFBSSxFQUFFLENBQUE7SUFFTixXQUFXLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFBO0FBQzVCLENBQUMifQ==\",\"filename\":\"scripts/ui/timer.js\",\"server\":\"home\"}}],[\"scripts/hack-v4.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\n * Improves v3 implementing a HGW strategy and a UI with server stats\\n */\\nimport { SCRIPTS } from 'scripts/utils/constants';\\nimport { formatTime } from 'scripts/utils/time';\\nconst REGISTRATION_TIME_MS = 5000;\\nconst OFFSET_MS = 1000;\\nclass Barrier {\\n    static status = {};\\n    static init(barrierId) {\\n        if (!this.status[barrierId]) {\\n            this.status[barrierId] = {\\n                busy: false,\\n                registering: false,\\n                participants: new Set(),\\n                members: new Set(),\\n            };\\n        }\\n    }\\n    static join(id, barrierId) {\\n        this.init(barrierId);\\n        const status = this.status[barrierId];\\n        status.members.add(id);\\n    }\\n    static leave(ns, id, barrierId, ui) {\\n        this.init(barrierId);\\n        const status = this.status[barrierId];\\n        status.members.delete(id);\\n        if (status.members.size === 0) {\\n            ui.destroy();\\n        }\\n        if (status.participants.has(id)) {\\n            this.finish(ns, id, barrierId);\\n        }\\n    }\\n    static async register(ns, id, barrierId) {\\n        this.init(barrierId);\\n        const status = this.status[barrierId];\\n        while (status.busy) {\\n            ns.print('Waiting for barrier');\\n            await ns.sleep(1000);\\n        }\\n        let isManager = false;\\n        if (!status.registering) {\\n            status.registering = true;\\n            isManager = true;\\n            setTimeout(() => {\\n                status.busy = true;\\n                status.registering = false;\\n            }, REGISTRATION_TIME_MS);\\n        }\\n        status.participants.add(id);\\n        return isManager;\\n    }\\n    static finish(ns, id, barrierId) {\\n        const status = this.status[barrierId];\\n        if (!status) {\\n            ns.print('Warning: Trying to finish in barrier that does not exist, which is a no-op.');\\n            return;\\n        }\\n        if (!status.participants.has(id)) {\\n            ns.print('Warning: Trying to finish an element that is not in the barrier, which is a no-op.');\\n            return;\\n        }\\n        status.participants.delete(id);\\n        if (status.participants.size === 0) {\\n            status.busy = false;\\n        }\\n    }\\n}\\nclass UI {\\n    id;\\n    containerId;\\n    securityId;\\n    moneyId;\\n    timersId;\\n    minSecurity;\\n    maxMoney;\\n    ns;\\n    constructor(ns, id, stats) {\\n        this.ns = ns;\\n        this.id = id;\\n        this.containerId = `hack-status-${id}`;\\n        this.securityId = this.containerId + '--security';\\n        this.moneyId = this.containerId + '--money';\\n        this.timersId = this.containerId + '--timers';\\n        this.minSecurity = stats.minSecurity;\\n        this.maxMoney = stats.maxMoney;\\n        this.init();\\n    }\\n    destroy() {\\n        const doc = eval('document');\\n        const container = doc.getElementById(this.containerId);\\n        if (container) {\\n            doc.body.removeChild(container);\\n        }\\n    }\\n    init() {\\n        const doc = eval('document');\\n        if (doc.getElementById(this.containerId)) {\\n            return;\\n        }\\n        const container = doc.createElement('div');\\n        container.id = this.containerId;\\n        container.style.position = 'fixed';\\n        container.style.bottom = '2rem';\\n        container.style.right = '0';\\n        container.style.display = 'flex';\\n        container.style.flexDirection = 'column';\\n        container.style.fontFamily =\\n            '\\\"Lucida Console\\\", \\\"Lucida Sans Unicode\\\", \\\"Fira Mono\\\", Consolas, \\\"Courier New\\\", Courier, monospace, \\\"Times New Roman\\\"';\\n        container.style.zIndex = '100';\\n        container.style.color = '#0c0';\\n        container.style.borderStyle = 'solid';\\n        container.style.borderColor = 'rgb(128, 128, 128)';\\n        container.style.borderWidth = '1px';\\n        container.style.padding = '0.5rem';\\n        const title = doc.createElement('div');\\n        title.style.padding = '0.5rem';\\n        title.style.alignSelf = 'center';\\n        title.innerText = 'Hack v4';\\n        title.style.fontWeight = 'bold';\\n        container.append(title);\\n        const target = doc.createElement('div');\\n        target.innerText = `Target: ${this.id}`;\\n        container.append(target);\\n        const security = doc.createElement('div');\\n        security.id = this.securityId;\\n        security.innerText = 'Security: 0 (min: 0)';\\n        container.append(security);\\n        const money = doc.createElement('div');\\n        money.id = this.moneyId;\\n        money.innerText = 'Money: 0 (max: 0)';\\n        container.append(money);\\n        const timers = doc.createElement('div');\\n        timers.id = this.timersId;\\n        timers.style.marginTop = '1rem';\\n        container.append(timers);\\n        doc.body.append(container);\\n    }\\n    setSecurity(security) {\\n        const doc = eval('document');\\n        const el = doc.getElementById(this.securityId);\\n        if (el) {\\n            el.innerText = `Security: ${security.toFixed(3)} (min: ${this.minSecurity})`;\\n        }\\n    }\\n    setMoney(money) {\\n        const doc = eval('document');\\n        const el = doc.getElementById(this.moneyId);\\n        if (el) {\\n            el.innerText = `Money: ${this.ns.formatNumber(money)} (max: ${this.ns.formatNumber(this.maxMoney)})`;\\n        }\\n    }\\n    addTimer(label, time) {\\n        const doc = eval('document');\\n        const now = performance.now();\\n        const target = now + time;\\n        const el = doc.createElement('div');\\n        const container = doc.getElementById(this.timersId);\\n        const refresh = () => {\\n            const remTime = target - performance.now();\\n            if (remTime < 0) {\\n                container?.removeChild(el);\\n                return;\\n            }\\n            el.innerText = `${label}: ${formatTime(remTime)}`;\\n            setTimeout(refresh, 200);\\n        };\\n        refresh();\\n        container?.append(el);\\n    }\\n}\\nexport async function main(ns) {\\n    const host = ns.getHostname();\\n    const target = ns.args[0];\\n    if (!target) {\\n        ns.print('Missing target argument');\\n        ns.exit();\\n    }\\n    const getHostAvailableRam = () => ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\n    const hackRam = ns.getScriptRam(SCRIPTS.SIMPLE_HACK);\\n    const growRam = ns.getScriptRam(SCRIPTS.SIMPLE_GROW);\\n    const weakenRam = ns.getScriptRam(SCRIPTS.SIMPLE_WEAKEN);\\n    if (getHostAvailableRam() < 4 * hackRam) {\\n        ns.print(`Host ${host} does not have enough RAM for this script, aborting.`);\\n        ns.exit();\\n    }\\n    ns.atExit(() => {\\n        Barrier.leave(ns, host, target, ui);\\n    });\\n    Barrier.join(host, target);\\n    const minSecurity = ns.getServerMinSecurityLevel(target);\\n    const maxMoney = ns.getServerMaxMoney(target);\\n    const ui = new UI(ns, target, { minSecurity, maxMoney });\\n    while (true) {\\n        const isManager = await Barrier.register(ns, host, target);\\n        const curSecurity = ns.getServerSecurityLevel(target);\\n        const curMoney = ns.getServerMoneyAvailable(target);\\n        const availableRam = getHostAvailableRam();\\n        isManager && ui.setSecurity(curSecurity);\\n        isManager && ui.setMoney(curMoney);\\n        const events = [];\\n        if (curSecurity > minSecurity) {\\n            const weakenThreads = Math.floor(availableRam / weakenRam);\\n            const weakenTime = ns.getWeakenTime(target);\\n            if (isManager) {\\n                ui.addTimer('Weaken', weakenTime);\\n            }\\n            events.push({\\n                type: 'script-start',\\n                script: 'weaken',\\n                threads: weakenThreads,\\n                t: 0,\\n            });\\n            events.push({\\n                type: 'script-end',\\n                script: 'weaken',\\n                t: weakenTime,\\n            });\\n        }\\n        else if (curMoney < maxMoney) {\\n            const growThreads = Math.floor(availableRam / 2 / growRam);\\n            const growTime = ns.getGrowTime(target);\\n            const weakenThreads = Math.floor((availableRam - growThreads * growRam) / weakenRam);\\n            const weakenTime = ns.getWeakenTime(target);\\n            const weakenDelay = Math.max(0, growTime - weakenTime + OFFSET_MS);\\n            if (isManager) {\\n                ui.addTimer('Grow', growTime);\\n                ui.addTimer('Weaken', weakenDelay + weakenTime);\\n            }\\n            events.push({\\n                type: 'script-start',\\n                script: 'grow',\\n                threads: growThreads,\\n                t: 0,\\n            });\\n            events.push({\\n                type: 'script-end',\\n                script: 'grow',\\n                t: growTime,\\n            });\\n            events.push({\\n                type: 'script-start',\\n                script: 'weaken',\\n                threads: weakenThreads,\\n                t: weakenDelay,\\n            });\\n            events.push({\\n                type: 'script-end',\\n                script: 'weaken',\\n                t: weakenDelay + weakenTime,\\n            });\\n        }\\n        else {\\n            const hackThreads = Math.floor(availableRam / 4 / hackRam);\\n            const hackTime = ns.getHackTime(target);\\n            const growThreads = Math.floor(availableRam / 4 / growRam);\\n            const growTime = ns.getGrowTime(target);\\n            const weakenThreads = Math.floor((availableRam - hackThreads * hackRam - growThreads * growRam) /\\n                weakenRam);\\n            const weakenTime = ns.getWeakenTime(target);\\n            const growDelay = Math.max(0, hackTime - growTime + OFFSET_MS);\\n            const weakenDelay = Math.max(0, growDelay + growTime - weakenTime + OFFSET_MS);\\n            if (isManager) {\\n                ui.addTimer('Hack', hackTime);\\n                ui.addTimer('Grow', growDelay + growTime);\\n                ui.addTimer('Weaken', weakenDelay + weakenTime);\\n            }\\n            events.push({\\n                type: 'script-start',\\n                script: 'hack',\\n                threads: hackThreads,\\n                t: 0,\\n            });\\n            events.push({\\n                type: 'script-end',\\n                script: 'hack',\\n                t: hackTime,\\n            });\\n            events.push({\\n                type: 'script-start',\\n                script: 'grow',\\n                threads: growThreads,\\n                t: growDelay,\\n            });\\n            events.push({\\n                type: 'script-end',\\n                script: 'grow',\\n                t: growDelay + growTime,\\n            });\\n            events.push({\\n                type: 'script-start',\\n                script: 'weaken',\\n                threads: weakenThreads,\\n                t: weakenDelay,\\n            });\\n            events.push({\\n                type: 'script-end',\\n                script: 'weaken',\\n                t: weakenDelay + weakenTime,\\n            });\\n        }\\n        events.sort((a, b) => a.t - b.t);\\n        let elapsedTime = 0;\\n        for (const event of events) {\\n            await ns.sleep(event.t - elapsedTime);\\n            elapsedTime = event.t;\\n            if (event.type === 'script-start') {\\n                const script = event.script === 'grow'\\n                    ? SCRIPTS.SIMPLE_GROW\\n                    : event.script === 'hack'\\n                        ? SCRIPTS.SIMPLE_HACK\\n                        : SCRIPTS.SIMPLE_WEAKEN;\\n                ns.exec(script, host, event.threads, target);\\n            }\\n            else {\\n                if (event.script === 'grow' || event.script === 'hack') {\\n                    ui.setMoney(ns.getServerMoneyAvailable(target));\\n                }\\n                ui.setSecurity(ns.getServerSecurityLevel(target));\\n            }\\n        }\\n        while (ns.scriptRunning(SCRIPTS.SIMPLE_GROW, host) ||\\n            ns.scriptRunning(SCRIPTS.SIMPLE_HACK, host) ||\\n            ns.scriptRunning(SCRIPTS.SIMPLE_WEAKEN, host)) {\\n            await ns.sleep(500);\\n        }\\n        Barrier.finish(ns, host, target);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay12NC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL2hhY2stdjQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0dBRUc7QUFJSCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0seUJBQXlCLENBQUE7QUFDakQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG9CQUFvQixDQUFBO0FBRS9DLE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxDQUFBO0FBQ2pDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQTtBQXdCdEIsTUFBTSxPQUFPO0lBQ1gsTUFBTSxDQUFDLE1BQU0sR0FBa0MsRUFBRSxDQUFBO0lBRWpELE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBaUI7UUFDM0IsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDM0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRztnQkFDdkIsSUFBSSxFQUFFLEtBQUs7Z0JBQ1gsV0FBVyxFQUFFLEtBQUs7Z0JBQ2xCLFlBQVksRUFBRSxJQUFJLEdBQUcsRUFBRTtnQkFDdkIsT0FBTyxFQUFFLElBQUksR0FBRyxFQUFFO2FBQ25CLENBQUE7U0FDRjtJQUNILENBQUM7SUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQVUsRUFBRSxTQUFpQjtRQUN2QyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQ3BCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUE7UUFDckMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDeEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBTSxFQUFFLEVBQVUsRUFBRSxTQUFpQixFQUFFLEVBQU07UUFDeEQsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUNwQixNQUFNLE1B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\",\"filename\":\"scripts/hack-v4.js\",\"server\":\"home\"}}],[\"scripts/utils/time.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const formatTime = (timeMs) => {\\n    const seconds = Math.floor(timeMs / 1000);\\n    const minutes = Math.floor(seconds / 60);\\n    const remSeconds = seconds - minutes * 60;\\n    return `${minutes.toString().padStart(2, '0')}:${remSeconds\\n        .toString()\\n        .padStart(2, '0')}`;\\n};\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL3V0aWxzL3RpbWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsTUFBYyxFQUFFLEVBQUU7SUFDM0MsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLENBQUE7SUFDekMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDLENBQUE7SUFDeEMsTUFBTSxVQUFVLEdBQUcsT0FBTyxHQUFHLE9BQU8sR0FBRyxFQUFFLENBQUE7SUFDekMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLFVBQVU7U0FDeEQsUUFBUSxFQUFFO1NBQ1YsUUFBUSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFBO0FBQ3ZCLENBQUMsQ0FBQSJ9\",\"filename\":\"scripts/utils/time.js\",\"server\":\"home\"}}],[\"scripts/contracts/proper-2-coloring-of-a-graph.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = [\\n    4,\\n    [\\n        [0, 2],\\n        [0, 3],\\n        [1, 2],\\n        [1, 3],\\n    ],\\n];\\nconst solve = (arr) => {\\n    const [n, edges] = arr;\\n    const ans = Array(n).fill(-1);\\n    const adj = [...Array(n)].map(() => []);\\n    for (const [u, v] of edges) {\\n        adj[u].push(v);\\n        adj[v].push(u);\\n    }\\n    const dfs = (v, c = 0) => {\\n        ans[v] = c;\\n        for (const w of adj[v]) {\\n            if (ans[w] === c) {\\n                return false;\\n            }\\n            else if (ans[w] === -1) {\\n                if (!dfs(w, 1 - c)) {\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    };\\n    for (let v = 0; v < n; v++) {\\n        if (ans[v] === -1) {\\n            if (!dfs(v)) {\\n                return [];\\n            }\\n        }\\n    }\\n    return ans;\\n};\\nexport const solvers = {\\n    'Proper 2-Coloring of a Graph': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcGVyLTItY29sb3Jpbmctb2YtYS1ncmFwaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvbnRyYWN0cy9wcm9wZXItMi1jb2xvcmluZy1vZi1hLWdyYXBoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE1BQU0sS0FBSyxHQUFVO0lBQ25CLENBQUM7SUFDRDtRQUNFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNOLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNOLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNOLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNQO0NBQ0YsQ0FBQTtBQUVELE1BQU0sS0FBSyxHQUFHLENBQUMsR0FBVSxFQUFFLEVBQUU7SUFDM0IsTUFBTSxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUE7SUFDdEIsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQzdCLE1BQU0sR0FBRyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBYyxDQUFDLENBQUE7SUFFbkQsS0FBSyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEtBQUssRUFBRTtRQUMxQixHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUNmO0lBRUQsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFTLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFO1FBQy9CLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDVixLQUFLLE1BQU0sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUN0QixJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ2hCLE9BQU8sS0FBSyxDQUFBO2FBQ2I7aUJBQU0sSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7Z0JBQ3hCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtvQkFDbEIsT0FBTyxLQUFLLENBQUE7aUJBQ2I7YUFDRjtTQUNGO1FBQ0QsT0FBTyxJQUFJLENBQUE7SUFDYixDQUFDLENBQUE7SUFFRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzFCLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ1gsT0FBTyxFQUFFLENBQUE7YUFDVjtTQUNGO0tBQ0Y7SUFFRCxPQUFPLEdBQUcsQ0FBQTtBQUNaLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRztJQUNyQiw4QkFBOEIsRUFBRSxLQUFLO0NBQ3RDLENBQUE7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7QUFDekIsQ0FBQyJ9\",\"filename\":\"scripts/contracts/proper-2-coloring-of-a-graph.js\",\"server\":\"home\"}}],[\"scripts/contracts/algorithmic-stock-trader.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = [\\n    2,\\n    [\\n        16, 188, 133, 38, 163, 94, 43, 43, 135, 17, 107, 39, 78, 199, 84, 78, 158,\\n        72, 158, 71, 6, 123, 145, 55, 87, 127, 32, 29, 26, 164, 142, 141, 166,\\n    ],\\n];\\nexport const solve = (input) => {\\n    const [k, arr] = input;\\n    const n = arr.length;\\n    const dp = [...Array(k + 1)].map(() => Array(n).fill(0));\\n    for (let kk = 1; kk <= k; kk++) {\\n        for (let i = 1; i < n; i++) {\\n            dp[kk][i] = Math.max(dp[kk][i - 1], dp[kk - 1][i]);\\n            for (let j = i - 1; j >= 0; j--) {\\n                if (arr[i] > arr[j]) {\\n                    dp[kk][i] = Math.max(dp[kk][i], dp[kk - 1][j] + arr[i] - arr[j]);\\n                }\\n            }\\n        }\\n    }\\n    return dp[k][n - 1];\\n};\\nexport const solvers = {\\n    'Algorithmic Stock Trader IV': solve,\\n    'Algorithmic Stock Trader III': (input) => solve([2, input]),\\n    'Algorithmic Stock Trader II': (input) => solve([input.length, input]),\\n    'Algorithmic Stock Trader I': (input) => solve([1, input]),\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxnb3JpdGhtaWMtc3RvY2stdHJhZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29udHJhY3RzL2FsZ29yaXRobWljLXN0b2NrLXRyYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxNQUFNLEtBQUssR0FBVTtJQUNuQixDQUFDO0lBQ0Q7UUFDRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRztRQUN6RSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHO0tBQ3RFO0NBQ0YsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLEtBQVksRUFBRSxFQUFFO0lBQ3BDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFBO0lBQ3RCLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUE7SUFFcEIsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBRXhELEtBQUssSUFBSSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUU7UUFDOUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMxQixFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUNsRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDL0IsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFO29CQUNuQixFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7aUJBQ2pFO2FBQ0Y7U0FDRjtLQUNGO0lBRUQsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0FBQ3JCLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRztJQUNyQiw2QkFBNkIsRUFBRSxLQUFLO0lBQ3BDLDhCQUE4QixFQUFFLENBQUMsS0FBZSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDdEUsNkJBQTZCLEVBQUUsQ0FBQyxLQUFlLEVBQUUsRUFBRSxDQUNqRCxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzlCLDRCQUE0QixFQUFFLENBQUMsS0FBZSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDckUsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUN6QixDQUFDIn0=\",\"filename\":\"scripts/contracts/algorithmic-stock-trader.js\",\"server\":\"home\"}}],[\"scripts/contracts/rle-compression.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = 'zzzzzzzzzzzzzzzzzzz';\\nexport const solve = (input) => {\\n    let lastChar = '';\\n    let lastCnt = 0;\\n    const ans = [];\\n    for (const c of input) {\\n        if (c !== lastChar || lastCnt === 9) {\\n            if (lastCnt > 0) {\\n                ans.push(lastCnt);\\n                ans.push(lastChar);\\n            }\\n            lastCnt = 0;\\n            lastChar = c;\\n        }\\n        lastCnt++;\\n    }\\n    ans.push(lastCnt);\\n    ans.push(lastChar);\\n    return ans.join('');\\n};\\nexport const solvers = {\\n    'Compression I: RLE Compression': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmxlLWNvbXByZXNzaW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29udHJhY3RzL3JsZS1jb21wcmVzc2lvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxNQUFNLEtBQUssR0FBVSxxQkFBcUIsQ0FBQTtBQUUxQyxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxLQUFZLEVBQUUsRUFBRTtJQUNwQyxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUE7SUFDakIsSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFBO0lBRWYsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFBO0lBRWQsS0FBSyxNQUFNLENBQUMsSUFBSSxLQUFLLEVBQUU7UUFDckIsSUFBSSxDQUFDLEtBQUssUUFBUSxJQUFJLE9BQU8sS0FBSyxDQUFDLEVBQUU7WUFDbkMsSUFBSSxPQUFPLEdBQUcsQ0FBQyxFQUFFO2dCQUNmLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7Z0JBQ2pCLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUE7YUFDbkI7WUFDRCxPQUFPLEdBQUcsQ0FBQyxDQUFBO1lBQ1gsUUFBUSxHQUFHLENBQUMsQ0FBQTtTQUNiO1FBQ0QsT0FBTyxFQUFFLENBQUE7S0FDVjtJQUVELEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDakIsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUNsQixPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7QUFDckIsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHO0lBQ3JCLGdDQUFnQyxFQUFFLEtBQUs7Q0FDeEMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUN6QixDQUFDIn0=\",\"filename\":\"scripts/contracts/rle-compression.js\",\"server\":\"home\"}}],[\"scripts/contracts/lz-compression.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = 'XbaaaaaaaatuiW1vLatu0kLatuLatuLatu3QErNGNGNMuzZ03G7Ko1gfs7fut0eLgfuitOY7mM';\\nconst decompress = (input) => {\\n    const ans = [];\\n    let cur = 0;\\n    for (let k = 0; cur < input.length; k ^= 1) {\\n        const n = parseInt(input[cur++]);\\n        if (n === 0) {\\n            continue;\\n        }\\n        if (k === 0) {\\n            for (let i = 0; i < n; i++) {\\n                ans.push(input[cur++]);\\n            }\\n        }\\n        else {\\n            const m = parseInt(input[cur++]);\\n            for (let i = 0; i < n; i++) {\\n                ans.push(ans[ans.length - m]);\\n            }\\n        }\\n    }\\n    return ans.join('');\\n};\\nconst compress = (input) => {\\n    const n = input.length;\\n    const dp = [...Array(2)].map(() => Array(n).fill(Infinity));\\n    const op = [...Array(2)].map(() => Array(n).fill(''));\\n    dp[0][n] = dp[1][n] = 0;\\n    for (let i = n - 1; i >= 0; i--) {\\n        // 0\\n        for (let j = 1; j <= 9 && i + j <= n; j++) {\\n            const val = 1 + j + dp[1][i + j];\\n            if (val < dp[0][i]) {\\n                dp[0][i] = val;\\n                op[0][i] = `${j}`;\\n            }\\n        }\\n        // 1\\n        for (let j = 1; j <= 9 && i - j >= 0; j++) {\\n            for (let k = 1; k <= 9 && i + k <= n; k++) {\\n                if (input[i + k - 1] === input[i - j + k - 1]) {\\n                    const val = 2 + dp[0][i + k];\\n                    if (val < dp[1][i]) {\\n                        dp[1][i] = val;\\n                        op[1][i] = `${k}${j}`;\\n                    }\\n                }\\n                else {\\n                    break;\\n                }\\n            }\\n        }\\n        // consider 0\\n        if (dp[0][i] < dp[1][i]) {\\n            dp[1][i] = 1 + dp[0][i];\\n            op[1][i] = '0';\\n        }\\n        else if (dp[1][i] < dp[0][i]) {\\n            dp[0][i] = 1 + dp[1][i];\\n            op[0][i] = '0';\\n        }\\n    }\\n    const ans = [];\\n    let curN = 0;\\n    let curT = 0;\\n    while (curN < n) {\\n        if (curT === 0) {\\n            ans.push(op[curT][curN]);\\n            const cnt = parseInt(op[curT][curN]);\\n            for (let i = 0; i < cnt; i++) {\\n                ans.push(input[curN + i]);\\n            }\\n            curN += cnt;\\n        }\\n        else {\\n            ans.push(op[curT][curN]);\\n            curN += parseInt(op[curT][curN][0]);\\n        }\\n        curT ^= 1;\\n    }\\n    return ans.join('');\\n};\\nexport const solvers = {\\n    'Compression II: LZ Decompression': decompress,\\n    'Compression III: LZ Compression': compress,\\n};\\nexport async function main(ns) {\\n    ns.tprint(input);\\n    ns.tprint(compress(input));\\n    ns.tprint(decompress(compress(input)));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHotY29tcHJlc3Npb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9jb250cmFjdHMvbHotY29tcHJlc3Npb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsTUFBTSxLQUFLLEdBQ1QsNEVBQTRFLENBQUE7QUFFOUUsTUFBTSxVQUFVLEdBQUcsQ0FBQyxLQUFZLEVBQUUsRUFBRTtJQUNsQyxNQUFNLEdBQUcsR0FBYSxFQUFFLENBQUE7SUFDeEIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFBO0lBRVgsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUMxQyxNQUFNLENBQUMsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUVoQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDWCxTQUFRO1NBQ1Q7UUFFRCxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDWCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUMxQixHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUE7YUFDdkI7U0FDRjthQUFNO1lBQ0wsTUFBTSxDQUFDLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUE7WUFFaEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDMUIsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO2FBQzlCO1NBQ0Y7S0FDRjtJQUVELE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtBQUNyQixDQUFDLENBQUE7QUFFRCxNQUFNLFFBQVEsR0FBRyxDQUFDLEtBQVksRUFBRSxFQUFFO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUE7SUFDdEIsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUE7SUFDM0QsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFFckQsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7SUFFdkIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDL0IsSUFBSTtRQUNKLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDekMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO1lBRWhDLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDbEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FB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\",\"filename\":\"scripts/contracts/lz-compression.js\",\"server\":\"home\"}}],[\"scripts/contracts/find-all-valid-math-expressions.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = ['5872910', -70];\\nconst solve = (input) => {\\n    const [s, target] = input;\\n    const exp = [];\\n    for (const c of s) {\\n        exp.push('');\\n        exp.push(c);\\n    }\\n    const ans = [];\\n    const doit = (i) => {\\n        if (i === s.length) {\\n            const res = exp.join('');\\n            if (eval(res) === target) {\\n                ans.push(res);\\n            }\\n            return;\\n        }\\n        let ops = ['', '+', '-', '*'];\\n        if (i > 0 && s[i - 1] === '0') {\\n            ops = ops.filter((x) => x !== '');\\n        }\\n        if (i === 0) {\\n            ops = [''];\\n        }\\n        ops.forEach((op) => {\\n            exp[2 * i] = op;\\n            doit(i + 1);\\n        });\\n    };\\n    doit(0);\\n    return ans;\\n};\\nexport const solvers = {\\n    'Find All Valid Math Expressions': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmluZC1hbGwtdmFsaWQtbWF0aC1leHByZXNzaW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvbnRyYWN0cy9maW5kLWFsbC12YWxpZC1tYXRoLWV4cHJlc3Npb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE1BQU0sS0FBSyxHQUFVLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUE7QUFFckMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxLQUFZLEVBQUUsRUFBRTtJQUM3QixNQUFNLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQTtJQUV6QixNQUFNLEdBQUcsR0FBYSxFQUFFLENBQUE7SUFDeEIsS0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDakIsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUNaLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDWjtJQUVELE1BQU0sR0FBRyxHQUFhLEVBQUUsQ0FBQTtJQUV4QixNQUFNLElBQUksR0FBRyxDQUFDLENBQVMsRUFBRSxFQUFFO1FBQ3pCLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLEVBQUU7WUFDbEIsTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtZQUN4QixJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxNQUFNLEVBQUU7Z0JBQ3hCLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7YUFDZDtZQUVELE9BQU07U0FDUDtRQUVELElBQUksR0FBRyxHQUFHLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUE7UUFFN0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFO1lBQzdCLEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUE7U0FDbEM7UUFFRCxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDWCxHQUFHLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQTtTQUNYO1FBRUQsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFO1lBQ2pCLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFBO1lBQ2YsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtRQUNiLENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQyxDQUFBO0lBRUQsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ1AsT0FBTyxHQUFHLENBQUE7QUFDWixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUc7SUFDckIsaUNBQWlDLEVBQUUsS0FBSztDQUN6QyxDQUFBO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO0FBQ3pCLENBQUMifQ==\",\"filename\":\"scripts/contracts/find-all-valid-math-expressions.js\",\"server\":\"home\"}}],[\"scripts/contracts/total-ways-to-sum.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = [5, [1, 2]];\\nexport const solve = (input) => {\\n    const [n, arr] = input;\\n    const dp = Array(n + 1).fill(0);\\n    dp[0] = 1;\\n    for (const x of arr) {\\n        for (let i = x; i <= n; i++) {\\n            dp[i] += dp[i - x];\\n        }\\n    }\\n    return dp[n];\\n};\\nexport const solvers = {\\n    'Total Ways to Sum': (input) => solve([input, [...Array(input - 1)].map((_, idx) => idx + 1)]),\\n    'Total Ways to Sum II': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG90YWwtd2F5cy10by1zdW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9jb250cmFjdHMvdG90YWwtd2F5cy10by1zdW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxLQUFLLEdBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUVoQyxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxLQUFZLEVBQUUsRUFBRTtJQUNwQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQTtJQUV0QixNQUFNLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUMvQixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBRVQsS0FBSyxNQUFNLENBQUMsSUFBSSxHQUFHLEVBQUU7UUFDbkIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMzQixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtTQUNuQjtLQUNGO0lBRUQsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDZCxDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUc7SUFDckIsbUJBQW1CLEVBQUUsQ0FBQyxLQUFhLEVBQUUsRUFBRSxDQUNyQyxLQUFLLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRSxzQkFBc0IsRUFBRSxLQUFLO0NBQzlCLENBQUE7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7QUFDekIsQ0FBQyJ9\",\"filename\":\"scripts/contracts/total-ways-to-sum.js\",\"server\":\"home\"}}],[\"scripts/contracts/find-largest-prime-factor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = 13;\\nexport const solve = (input) => {\\n    let ans = 1;\\n    let cur = 2;\\n    while (cur <= input) {\\n        while (input % cur === 0) {\\n            ans = cur;\\n            input = Math.round(input / cur);\\n        }\\n        cur++;\\n    }\\n    return ans;\\n};\\nexport const solvers = {\\n    'Find Largest Prime Factor': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmluZC1sYXJnZXN0LXByaW1lLWZhY3Rvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvbnRyYWN0cy9maW5kLWxhcmdlc3QtcHJpbWUtZmFjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sS0FBSyxHQUFVLEVBQUUsQ0FBQTtBQUl2QixNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxLQUFZLEVBQUUsRUFBRTtJQUNwQyxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUE7SUFDWCxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUE7SUFFWCxPQUFPLEdBQUcsSUFBSSxLQUFLLEVBQUU7UUFDbkIsT0FBTyxLQUFLLEdBQUcsR0FBRyxLQUFLLENBQUMsRUFBRTtZQUN4QixHQUFHLEdBQUcsR0FBRyxDQUFBO1lBQ1QsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxDQUFBO1NBQ2hDO1FBQ0QsR0FBRyxFQUFFLENBQUE7S0FDTjtJQUVELE9BQU8sR0FBRyxDQUFBO0FBQ1osQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHO0lBQ3JCLDJCQUEyQixFQUFFLEtBQUs7Q0FDbkMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUN6QixDQUFDIn0=\",\"filename\":\"scripts/contracts/find-largest-prime-factor.js\",\"server\":\"home\"}}],[\"scripts/contracts/generate-ip-addresses.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = '22017614796';\\nexport const solve = (input) => {\\n    const ip = [];\\n    const ans = [];\\n    for (const c of input) {\\n        ip.push(c);\\n        ip.push('');\\n    }\\n    ip.pop();\\n    const rec = (i, cnt, last) => {\\n        if (cnt > 3 || i - last > 3) {\\n            return;\\n        }\\n        if (i === input.length - 1) {\\n            if (cnt === 3 && parseInt(input.substring(last + 1, i + 1)) < 256) {\\n                ans.push(ip.join(''));\\n            }\\n            return;\\n        }\\n        if (input[i] !== '0') {\\n            ip[2 * i + 1] = '';\\n            rec(i + 1, cnt, last);\\n        }\\n        if (parseInt(input.substring(last + 1, i + 1)) < 256) {\\n            ip[2 * i + 1] = '.';\\n            rec(i + 1, cnt + 1, i);\\n        }\\n    };\\n    rec(0, 0, -1);\\n    return ans;\\n};\\nexport const solvers = {\\n    'Generate IP Addresses': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGUtaXAtYWRkcmVzc2VzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29udHJhY3RzL2dlbmVyYXRlLWlwLWFkZHJlc3Nlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLEtBQUssR0FBVSxhQUFhLENBQUE7QUFJbEMsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLENBQUMsS0FBWSxFQUFFLEVBQUU7SUFDcEMsTUFBTSxFQUFFLEdBQWEsRUFBRSxDQUFBO0lBQ3ZCLE1BQU0sR0FBRyxHQUFhLEVBQUUsQ0FBQTtJQUV4QixLQUFLLE1BQU0sQ0FBQyxJQUFJLEtBQUssRUFBRTtRQUNyQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ1YsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtLQUNaO0lBRUQsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFBO0lBRVIsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFTLEVBQUUsR0FBVyxFQUFFLElBQVksRUFBRSxFQUFFO1FBQ25ELElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsRUFBRTtZQUMzQixPQUFNO1NBQ1A7UUFFRCxJQUFJLENBQUMsS0FBSyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUMxQixJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEVBQUU7Z0JBQ2pFLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO2FBQ3RCO1lBQ0QsT0FBTTtTQUNQO1FBRUQsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFO1lBQ3BCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtZQUNsQixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUE7U0FDdEI7UUFFRCxJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxFQUFFO1lBQ3BELEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQTtZQUNuQixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO1NBQ3ZCO0lBQ0gsQ0FBQyxDQUFBO0lBRUQsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUViLE9BQU8sR0FBRyxDQUFBO0FBQ1osQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHO0lBQ3JCLHVCQUF1QixFQUFFLEtBQUs7Q0FDL0IsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUN6QixDQUFDIn0=\",\"filename\":\"scripts/contracts/generate-ip-addresses.js\",\"server\":\"home\"}}],[\"scripts/contracts/unique-paths-in-a-grid.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = [\\n    [0, 0, 0],\\n    [0, 1, 0],\\n    [0, 0, 0],\\n];\\nexport const solve = (input) => {\\n    const n = input.length;\\n    const m = input[0].length;\\n    const dp = [...new Array(n)].map(() => new Array(m).fill(0));\\n    dp[0][0] = 1;\\n    for (let r = 0; r < n; r++) {\\n        for (let c = r === 0 ? 1 : 0; c < m; c++) {\\n            if (input[r][c] === 1) {\\n                continue;\\n            }\\n            dp[r][c] = (r === 0 ? 0 : dp[r - 1][c]) + (c === 0 ? 0 : dp[r][c - 1]);\\n        }\\n    }\\n    return dp[n - 1][m - 1];\\n};\\nexport const solvers = {\\n    'Unique Paths in a Grid I': ([n, m]) => solve([...Array(n)].map(() => Array(m).fill(0))),\\n    'Unique Paths in a Grid II': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pcXVlLXBhdGhzLWluLWEtZ3JpZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvbnRyYWN0cy91bmlxdWUtcGF0aHMtaW4tYS1ncmlkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE1BQU0sS0FBSyxHQUFVO0lBQ25CLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDVCxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ1QsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUNWLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxLQUFZLEVBQUUsRUFBRTtJQUNwQyxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFBO0lBQ3RCLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUE7SUFFekIsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBRTVELEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDWixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzFCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN4QyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ3JCLFNBQVE7YUFDVDtZQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FDdkU7S0FDRjtJQUVELE9BQU8sRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7QUFDekIsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHO0lBQ3JCLDBCQUEwQixFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFXLEVBQUUsRUFBRSxDQUMvQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEQsMkJBQTJCLEVBQUUsS0FBSztDQUNuQyxDQUFBO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO0FBQ3pCLENBQUMifQ==\",\"filename\":\"scripts/contracts/unique-paths-in-a-grid.js\",\"server\":\"home\"}}],[\"scripts/contracts/subarray-with-maximum-sum.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = [\\n    -9, 8, -10, 9, 2, -9, -7, -5, 6, 9, 3, 2, 1, -1, 2, -9, 8, 5, -6, -6, 3, -3,\\n    6, 7, -1, 5, -7, -1,\\n];\\nconst solve = (input) => {\\n    let best = input[0];\\n    let sum = 0;\\n    for (const x of input) {\\n        sum += x;\\n        if (sum > best) {\\n            best = sum;\\n        }\\n        if (sum < 0) {\\n            sum = 0;\\n        }\\n    }\\n    return best;\\n};\\nexport const solvers = {\\n    'Subarray with Maximum Sum': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ViYXJyYXktd2l0aC1tYXhpbXVtLXN1bS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvbnRyYWN0cy9zdWJhcnJheS13aXRoLW1heGltdW0tc3VtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE1BQU0sS0FBSyxHQUFVO0lBQ25CLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMzRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7Q0FDcEIsQ0FBQTtBQUVELE1BQU0sS0FBSyxHQUFHLENBQUMsS0FBWSxFQUFFLEVBQUU7SUFDN0IsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ25CLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQTtJQUVYLEtBQUssTUFBTSxDQUFDLElBQUksS0FBSyxFQUFFO1FBQ3JCLEdBQUcsSUFBSSxDQUFDLENBQUE7UUFFUixJQUFJLEdBQUcsR0FBRyxJQUFJLEVBQUU7WUFDZCxJQUFJLEdBQUcsR0FBRyxDQUFBO1NBQ1g7UUFFRCxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUU7WUFDWCxHQUFHLEdBQUcsQ0FBQyxDQUFBO1NBQ1I7S0FDRjtJQUVELE9BQU8sSUFBSSxDQUFBO0FBQ2IsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHO0lBQ3JCLDJCQUEyQixFQUFFLEtBQUs7Q0FDbkMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUN6QixDQUFDIn0=\",\"filename\":\"scripts/contracts/subarray-with-maximum-sum.js\",\"server\":\"home\"}}],[\"scripts/contracts/vigenere-cipher.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = ['DASHBOAD', 'LINUX'];\\nconst solve = (input) => {\\n    const getLetter = (a, b) => {\\n        const base = 'A'.charCodeAt(0);\\n        const ba = a.charCodeAt(0) - base;\\n        const bb = b.charCodeAt(0) - base;\\n        return String.fromCharCode(((ba + bb) % 26) + base);\\n    };\\n    const [s, k] = input;\\n    const ans = [];\\n    for (let i = 0; i < s.length; i++) {\\n        ans.push(getLetter(s[i], k[i % k.length]));\\n    }\\n    return ans.join('');\\n};\\nexport const solvers = {\\n    'Encryption II: Vigenère Cipher': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlnZW5lcmUtY2lwaGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29udHJhY3RzL3ZpZ2VuZXJlLWNpcGhlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxNQUFNLEtBQUssR0FBVSxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQTtBQUUxQyxNQUFNLEtBQUssR0FBRyxDQUFDLEtBQVksRUFBRSxFQUFFO0lBQzdCLE1BQU0sU0FBUyxHQUFHLENBQUMsQ0FBUyxFQUFFLENBQVMsRUFBRSxFQUFFO1FBQ3pDLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDOUIsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUE7UUFDakMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUE7UUFDakMsT0FBTyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUE7SUFDckQsQ0FBQyxDQUFBO0lBRUQsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUE7SUFFcEIsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFBO0lBRWQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDakMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUMzQztJQUVELE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtBQUNyQixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUc7SUFDckIsZ0NBQWdDLEVBQUUsS0FBSztDQUN4QyxDQUFBO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO0FBQ3pCLENBQUMifQ==\",\"filename\":\"scripts/contracts/vigenere-cipher.js\",\"server\":\"home\"}}],[\"scripts/contracts/hamming-codes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const isPow2 = (n) => (n & -n) === n;\\nexport const encode = (input) => {\\n    const bin = input.toString(2);\\n    const ans = [];\\n    let cur = 0;\\n    let largestPow = -2;\\n    for (let i = 0; cur < bin.length; i++) {\\n        if (isPow2(i)) {\\n            ans.push(0);\\n            largestPow++;\\n        }\\n        else {\\n            ans.push(parseInt(bin.charAt(cur++)));\\n        }\\n    }\\n    for (let i = largestPow; i >= 0; i--) {\\n        for (let j = 0; j < ans.length; j++) {\\n            if (j & (1 << i)) {\\n                ans[1 << i] ^= ans[j];\\n            }\\n        }\\n    }\\n    for (let j = 0; j < ans.length; j++) {\\n        ans[0] ^= ans[j];\\n    }\\n    return ans.join('');\\n};\\nexport const decode = (input) => {\\n    const s = input.split('').map((x) => x.charCodeAt(0) - '0'.charCodeAt(0));\\n    let err = 0;\\n    for (let i = 0; i < input.length; i++) {\\n        if (s[i] === 1) {\\n            err ^= i;\\n        }\\n    }\\n    s[err] ^= 1;\\n    const ans = [];\\n    for (let i = 0; i < input.length; i++) {\\n        if (!isPow2(i)) {\\n            ans.push(s[i]);\\n        }\\n    }\\n    return parseInt(ans.join(''), 2);\\n};\\nexport const solvers = {\\n    'HammingCodes: Integer to Encoded Binary': encode,\\n    'HammingCodes: Encoded Binary to Integer': decode,\\n};\\nexport async function main(ns) {\\n    ns.tprint(decode('10110000'));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFtbWluZy1jb2Rlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvbnRyYWN0cy9oYW1taW5nLWNvZGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUU1QyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxLQUFhLEVBQUUsRUFBRTtJQUN0QyxNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQzdCLE1BQU0sR0FBRyxHQUFhLEVBQUUsQ0FBQTtJQUV4QixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUE7SUFFWCxJQUFJLFVBQVUsR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUVuQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNyQyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNiLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDWCxVQUFVLEVBQUUsQ0FBQTtTQUNiO2FBQU07WUFDTCxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO1NBQ3RDO0tBQ0Y7SUFFRCxLQUFLLElBQUksQ0FBQyxHQUFHLFVBQVUsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3BDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ25DLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFO2dCQUNoQixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTthQUN0QjtTQUNGO0tBQ0Y7SUFFRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNuQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQ2pCO0lBRUQsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0FBQ3JCLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxDQUFDLEtBQWEsRUFBRSxFQUFFO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUN6RSxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUE7SUFFWCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNyQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDZCxHQUFHLElBQUksQ0FBQyxDQUFBO1NBQ1Q7S0FDRjtJQUVELENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7SUFFWCxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUE7SUFDZCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNyQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ2QsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUNmO0tBQ0Y7SUFFRCxPQUFPLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQ2xDLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRztJQUNyQix5Q0FBeUMsRUFBRSxNQUFNO0lBQ2pELHlDQUF5QyxFQUFFLE1BQU07Q0FDbEQsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQTtBQUMvQixDQUFDIn0=\",\"filename\":\"scripts/contracts/hamming-codes.js\",\"server\":\"home\"}}],[\"scripts/contracts/array-jumping-game.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const solve = (input) => {\\n    const n = input.length;\\n    const dp = input.map(() => Infinity);\\n    dp[n - 1] = 0;\\n    for (let i = n - 2; i >= 0; i--) {\\n        for (let j = 1; j <= input[i] && i + j < n; j++) {\\n            dp[i] = Math.min(dp[i], 1 + dp[i + j]);\\n        }\\n    }\\n    return dp[0] === Infinity ? 0 : dp[0];\\n};\\nexport const solvers = {\\n    'Array Jumping Game': (input) => (solve(input) ? 1 : 0),\\n    'Array Jumping Game II': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve([1, 2, 0]));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJyYXktanVtcGluZy1nYW1lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29udHJhY3RzL2FycmF5LWp1bXBpbmctZ2FtZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxLQUFlLEVBQUUsRUFBRTtJQUN2QyxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFBO0lBQ3RCLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUE7SUFFcEMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7SUFFYixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUMvQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQy9DLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO1NBQ3ZDO0tBQ0Y7SUFFRCxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ3ZDLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRztJQUNyQixvQkFBb0IsRUFBRSxDQUFDLEtBQWUsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2pFLHVCQUF1QixFQUFFLEtBQUs7Q0FDL0IsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUM3QixDQUFDIn0=\",\"filename\":\"scripts/contracts/array-jumping-game.js\",\"server\":\"home\"}}],[\"scripts/contracts/caesar-cipher.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const solve = (input) => {\\n    const shift = input[1] % 26;\\n    const solveWord = (w) => w\\n        .split('')\\n        .map((c) => String.fromCharCode(((c.charCodeAt(0) - 'A'.charCodeAt(0) - shift + 2 * 26) % 26) +\\n        'A'.charCodeAt(0)))\\n        .join('');\\n    return input[0].split(' ').map(solveWord).join(' ');\\n};\\nexport const solvers = {\\n    'Encryption I: Caesar Cipher': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(['DE A', 3]));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Flc2FyLWNpcGhlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvbnRyYWN0cy9jYWVzYXItY2lwaGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLEtBQXVCLEVBQUUsRUFBRTtJQUMvQyxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFBO0lBRTNCLE1BQU0sU0FBUyxHQUFHLENBQUMsQ0FBUyxFQUFFLEVBQUUsQ0FDOUIsQ0FBQztTQUNFLEtBQUssQ0FBQyxFQUFFLENBQUM7U0FDVCxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUNULE1BQU0sQ0FBQyxZQUFZLENBQ2pCLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDM0QsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FDcEIsQ0FDRjtTQUNBLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUViLE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQ3JELENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRztJQUNyQiw2QkFBNkIsRUFBRSxLQUFLO0NBQ3JDLENBQUE7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUMvQixDQUFDIn0=\",\"filename\":\"scripts/contracts/caesar-cipher.js\",\"server\":\"home\"}}],[\"scripts/contracts/spiralize-matrix.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const solve = (input) => {\\n    const rotate = (mat) => {\\n        const n = mat.length;\\n        if (n === 0) {\\n            return [];\\n        }\\n        const m = mat[0].length;\\n        const res = [...Array(m)].map(() => []);\\n        for (let c = 0; c < m; c++) {\\n            for (let r = 0; r < n; r++) {\\n                res[c].push(mat[r].pop());\\n            }\\n        }\\n        return res;\\n    };\\n    let ans = [];\\n    while (input.length > 0) {\\n        ans = ans.concat(input[0]);\\n        input = rotate(input.slice(1));\\n    }\\n    return ans;\\n};\\nexport const solvers = {\\n    'Spiralize Matrix': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve([\\n        [1, 2, 3, 4],\\n        [5, 6, 7, 8],\\n        [9, 10, 11, 12],\\n    ]));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BpcmFsaXplLW1hdHJpeC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvbnRyYWN0cy9zcGlyYWxpemUtbWF0cml4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLEtBQWlCLEVBQUUsRUFBRTtJQUN6QyxNQUFNLE1BQU0sR0FBRyxDQUFDLEdBQWUsRUFBRSxFQUFFO1FBQ2pDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUE7UUFFcEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ1gsT0FBTyxFQUFFLENBQUE7U0FDVjtRQUVELE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUE7UUFFdkIsTUFBTSxHQUFHLEdBQWUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUVuRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzFCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQzFCLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRyxDQUFDLENBQUE7YUFDM0I7U0FDRjtRQUVELE9BQU8sR0FBRyxDQUFBO0lBQ1osQ0FBQyxDQUFBO0lBRUQsSUFBSSxHQUFHLEdBQWEsRUFBRSxDQUFBO0lBRXRCLE9BQU8sS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDdkIsR0FBRyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDMUIsS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDL0I7SUFFRCxPQUFPLEdBQUcsQ0FBQTtBQUNaLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRztJQUNyQixrQkFBa0IsRUFBRSxLQUFLO0NBQzFCLENBQUE7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxNQUFNLENBQ1AsS0FBSyxDQUFDO1FBQ0osQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDWixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNaLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDO0tBQ2hCLENBQUMsQ0FDSCxDQUFBO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/contracts/spiralize-matrix.js\",\"server\":\"home\"}}],[\"scripts/contracts/merge-overlapping-intervals.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const solve = (input) => {\\n    if (input.length === 0) {\\n        return [];\\n    }\\n    input.sort(([a], [b]) => a - b);\\n    const ans = [];\\n    let [curL, curR] = input[0];\\n    for (const [l, r] of input) {\\n        if (l > curR) {\\n            ans.push([curL, curR]);\\n            curL = l;\\n        }\\n        curR = Math.max(curR, r);\\n    }\\n    ans.push([curL, curR]);\\n    return ans;\\n};\\nexport const solvers = {\\n    'Merge Overlapping Intervals': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve([\\n        [4, 8],\\n        [9, 12],\\n        [15, 18],\\n        [7, 16],\\n        [4, 11],\\n        [23, 30],\\n        [13, 21],\\n        [25, 35],\\n        [10, 11],\\n        [23, 32],\\n        [5, 10],\\n        [16, 26],\\n        [13, 19],\\n        [10, 20],\\n        [7, 9],\\n        [21, 22],\\n        [25, 33],\\n        [25, 26],\\n    ]));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVyZ2Utb3ZlcmxhcHBpbmctaW50ZXJ2YWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29udHJhY3RzL21lcmdlLW92ZXJsYXBwaW5nLWludGVydmFscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxLQUFpQixFQUFFLEVBQUU7SUFDekMsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUN0QixPQUFPLEVBQUUsQ0FBQTtLQUNWO0lBRUQsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0lBRS9CLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQTtJQUVkLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBRTNCLEtBQUssTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxLQUFLLEVBQUU7UUFDMUIsSUFBSSxDQUFDLEdBQUcsSUFBSSxFQUFFO1lBQ1osR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFBO1lBQ3RCLElBQUksR0FBRyxDQUFDLENBQUE7U0FDVDtRQUVELElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQTtLQUN6QjtJQUVELEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQTtJQUN0QixPQUFPLEdBQUcsQ0FBQTtBQUNaLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRztJQUNyQiw2QkFBNkIsRUFBRSxLQUFLO0NBQ3JDLENBQUE7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxNQUFNLENBQ1AsS0FBSyxDQUFDO1FBQ0osQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ04sQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ1AsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ1AsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ1AsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ1AsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ04sQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO0tBQ1QsQ0FBQyxDQUNILENBQUE7QUFDSCxDQUFDIn0=\",\"filename\":\"scripts/contracts/merge-overlapping-intervals.js\",\"server\":\"home\"}}],[\"scripts/contracts/shortest-path-in-a-grid.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const solve = (input) => {\\n    const dirs = [\\n        [1, 0, 'U'],\\n        [-1, 0, 'D'],\\n        [0, 1, 'L'],\\n        [0, -1, 'R'],\\n    ];\\n    const n = input.length;\\n    const m = input[0].length;\\n    if (input[0][0] === 1 || input[n - 1][m - 1] === 1) {\\n        return '';\\n    }\\n    const d = input.map((a) => a.map(() => Infinity));\\n    const op = input.map((a) => a.map(() => ''));\\n    const prv = input.map((a) => a.map(() => []));\\n    d[n - 1][m - 1] = 0;\\n    let q = [[n - 1, m - 1]];\\n    while (q.length > 0) {\\n        const [r, c] = q[0];\\n        q = q.slice(1);\\n        for (const [dr, dc, dir] of dirs) {\\n            const nr = r + dr;\\n            const nc = c + dc;\\n            if (nr < 0 ||\\n                nc < 0 ||\\n                nr >= n ||\\n                nc >= m ||\\n                d[nr][nc] !== Infinity ||\\n                input[nr][nc] === 1) {\\n                continue;\\n            }\\n            d[nr][nc] = d[r][c] + 1;\\n            op[nr][nc] = dir;\\n            prv[nr][nc] = [r, c];\\n            q.push([nr, nc]);\\n        }\\n    }\\n    if (d[0][0] === Infinity) {\\n        return '';\\n    }\\n    const ans = [];\\n    let cr = 0;\\n    let cc = 0;\\n    while (cr !== n - 1 || cc !== m - 1) {\\n        ans.push(op[cr][cc]);\\n        const [nr, nc] = prv[cr][cc];\\n        cr = nr;\\n        cc = nc;\\n    }\\n    return ans.join('');\\n};\\nexport const solvers = {\\n    'Shortest Path in a Grid': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve([\\n        [0, 1, 0, 0, 0],\\n        [0, 0, 0, 1, 0],\\n    ]));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvcnRlc3QtcGF0aC1pbi1hLWdyaWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9jb250cmFjdHMvc2hvcnRlc3QtcGF0aC1pbi1hLWdyaWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLENBQUMsS0FBaUIsRUFBRSxFQUFFO0lBQ3pDLE1BQU0sSUFBSSxHQUFHO1FBQ1gsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQztRQUNYLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQztRQUNaLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUM7UUFDWCxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUM7S0FDSixDQUFBO0lBRVYsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQTtJQUN0QixNQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFBO0lBRXpCLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDbEQsT0FBTyxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQTtJQUNqRCxNQUFNLEVBQUUsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFD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\",\"filename\":\"scripts/contracts/shortest-path-in-a-grid.js\",\"server\":\"home\"}}],[\"scripts/contracts/sanitize-parenthesis-in-expression.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const solve = (input) => {\\n    const n = input.length;\\n    const expr = input.split('');\\n    const ans = new Set();\\n    let minCnt = 0;\\n    let s = 0;\\n    for (const c of input) {\\n        if (c === '(') {\\n            s++;\\n        }\\n        else if (c === ')') {\\n            if (s === 0) {\\n                minCnt++;\\n            }\\n            else {\\n                s--;\\n            }\\n        }\\n    }\\n    minCnt += s;\\n    const rec = (i, s, cnt) => {\\n        if (s < 0 || cnt > minCnt) {\\n            return;\\n        }\\n        if (i === n) {\\n            if (s === 0) {\\n                ans.add(expr.join(''));\\n            }\\n            return;\\n        }\\n        switch (input[i]) {\\n            case '(':\\n                expr[i] = input[i];\\n                rec(i + 1, s + 1, cnt);\\n                expr[i] = '';\\n                rec(i + 1, s, cnt + 1);\\n                break;\\n            case ')':\\n                expr[i] = input[i];\\n                rec(i + 1, s - 1, cnt);\\n                expr[i] = '';\\n                rec(i + 1, s, cnt + 1);\\n                break;\\n            default:\\n                expr[i] = input[i];\\n                rec(i + 1, s, cnt);\\n                break;\\n        }\\n    };\\n    rec(0, 0, 0);\\n    return [...ans];\\n};\\nexport const solvers = {\\n    'Sanitize Parentheses in Expression': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(')('));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuaXRpemUtcGFyZW50aGVzaXMtaW4tZXhwcmVzc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvbnRyYWN0cy9zYW5pdGl6ZS1wYXJlbnRoZXNpcy1pbi1leHByZXNzaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLEtBQWEsRUFBRSxFQUFFO0lBQ3JDLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUE7SUFDdEIsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUM1QixNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsRUFBVSxDQUFBO0lBRTdCLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQTtJQUNkLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUVULEtBQUssTUFBTSxDQUFDLElBQUksS0FBSyxFQUFFO1FBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRTtZQUNiLENBQUMsRUFBRSxDQUFBO1NBQ0o7YUFBTSxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUU7WUFDcEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUNYLE1BQU0sRUFBRSxDQUFBO2FBQ1Q7aUJBQU07Z0JBQ0wsQ0FBQyxFQUFFLENBQUE7YUFDSjtTQUNGO0tBQ0Y7SUFFRCxNQUFNLElBQUksQ0FBQyxDQUFBO0lBRVgsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFTLEVBQUUsQ0FBUyxFQUFFLEdBQVcsRUFBRSxFQUFFO1FBQ2hELElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLEdBQUcsTUFBTSxFQUFFO1lBQ3pCLE9BQU07U0FDUDtRQUVELElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNYLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDWCxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTthQUN2QjtZQUNELE9BQU07U0FDUDtRQUVELFFBQVEsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ2hCLEtBQUssR0FBRztnQkFDTixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO2dCQUNsQixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFBO2dCQUN0QixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFBO2dCQUNaLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUE7Z0JBQ3RCLE1BQUs7WUFFUCxLQUFLLEdBQUc7Z0JBQ04sSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtnQkFDbEIsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQTtnQkFDdEIsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtnQkFDWixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFBO2dCQUN0QixNQUFLO1lBRVA7Z0JBQ0UsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtnQkFDbEIsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFBO2dCQUNsQixNQUFLO1NBQ1I7SUFDSCxDQUFDLENBQUE7SUFFRCxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUVaLE9BQU8sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFBO0FBQ2pCLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRztJQUNyQixvQ0FBb0MsRUFBRSxLQUFLO0NBQzVDLENBQUE7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7QUFDeEIsQ0FBQyJ9\",\"filename\":\"scripts/contracts/sanitize-parenthesis-in-expression.js\",\"server\":\"home\"}}],[\"scripts/weaken-all.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { FILES, HOSTS, SCRIPTS } from 'scripts/utils/constants';\\nimport { getPurchasedServerName } from 'scripts/buy-servers';\\nimport { getServersByPort } from 'scripts/utils/servers';\\nimport { LOOP_FLAG } from 'scripts/simple-weaken';\\nimport { nuke } from 'scripts/nuke';\\nconst PROGRAMS_LIST = Object.values(FILES);\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const FILES_TO_COPY = [SCRIPTS.SIMPLE_WEAKEN];\\n    const getAvailableRam = (host) => ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\n    const weakRam = ns.getScriptRam(SCRIPTS.SIMPLE_WEAKEN);\\n    const runScript = (host) => {\\n        ns.scp(FILES_TO_COPY, host, HOSTS.HOME);\\n        const threads = Math.floor(getAvailableRam(host) / weakRam);\\n        if (threads > 0) {\\n            ns.exec(SCRIPTS.SIMPLE_WEAKEN, host, threads, target, LOOP_FLAG);\\n        }\\n    };\\n    for (let i = 0; i < ns.getPurchasedServerLimit(); i++) {\\n        const host = getPurchasedServerName(i);\\n        if (ns.serverExists(host)) {\\n            runScript(host);\\n        }\\n    }\\n    const servers = getServersByPort(ns);\\n    const getRemServersCount = (lists) => lists.reduce((sum, list) => sum + list.length, 0);\\n    while (getRemServersCount(servers) > 0) {\\n        const programCount = PROGRAMS_LIST.reduce((cnt, file) => cnt + (ns.fileExists(file, HOSTS.HOME) ? 1 : 0), 0);\\n        for (let i = 0; i <= programCount; i++) {\\n            if (servers[i].length > 0 &&\\n                ns.getHackingLevel() >= servers[i][0].reqHack) {\\n                nuke(ns, servers[i][0].host);\\n                runScript(servers[i][0].host);\\n                servers[i] = servers[i].slice(1);\\n            }\\n        }\\n        await ns.sleep(1000);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLWFsbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3dlYWtlbi1hbGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLE1BQU0seUJBQXlCLENBQUE7QUFDL0QsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0scUJBQXFCLENBQUE7QUFDNUQsT0FBTyxFQUFFLGdCQUFnQixFQUFlLE1BQU0sdUJBQXVCLENBQUE7QUFDckUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHVCQUF1QixDQUFBO0FBQ2pELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUE7QUFFbkMsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUUxQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFbkMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUE7SUFFN0MsTUFBTSxlQUFlLEdBQUcsQ0FBQyxJQUFZLEVBQUUsRUFBRSxDQUN2QyxFQUFFLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUV0RCxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQTtJQUV0RCxNQUFNLFNBQVMsR0FBRyxDQUFDLElBQVksRUFBRSxFQUFFO1FBQ2pDLEVBQUUsQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDdkMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUE7UUFDM0QsSUFBSSxPQUFPLEdBQUcsQ0FBQyxFQUFFO1lBQ2YsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFBO1NBQ2pFO0lBQ0gsQ0FBQyxDQUFBO0lBRUQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3JELE1BQU0sSUFBSSxHQUFHLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3RDLElBQUksRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN6QixTQUFTLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDaEI7S0FDRjtJQUVELE1BQU0sT0FBTyxHQUFHLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBRXBDLE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxLQUFpQixFQUFFLEVBQUUsQ0FDL0MsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBRW5ELE9BQU8sa0JBQWtCLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ3RDLE1BQU0sWUFBWSxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQ3ZDLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUM5RCxDQUFDLENBQ0YsQ0FBQTtRQUVELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxZQUFZLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDdEMsSUFDRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUM7Z0JBQ3JCLEVBQUUsQ0FBQyxlQUFlLEVBQUUsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUM3QztnQkFDQSxJQUFJLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtnQkFDNUIsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtnQkFDN0IsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7YUFDakM7U0FDRjtRQUVELE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtLQUNyQjtBQUNILENBQUMifQ==\",\"filename\":\"scripts/weaken-all.js\",\"server\":\"home\"}}],[\"scripts/loop-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    while (true) {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9vcC13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9sb29wLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/loop-weaken.js\",\"server\":\"home\"}}],[\"scripts/contracts/minimum-path-sum-in-a-triangle.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const solve = (input) => {\\n    const n = input.length;\\n    const dp = input.map((row) => row.map(() => Infinity));\\n    dp[n - 1] = input[n - 1];\\n    for (let row = n - 2; row >= 0; row--) {\\n        for (let col = 0; col <= row; col++) {\\n            [col, col + 1]\\n                .filter((x) => x <= row + 1)\\n                .forEach((c) => (dp[row][col] = Math.min(dp[row][col], dp[row + 1][c] + input[row][col])));\\n        }\\n    }\\n    return dp[0][0];\\n};\\nexport const solvers = {\\n    'Minimum Path Sum in a Triangle': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve([[2], [3, 4], [6, 5, 7], [4, 1, 8, 3]]));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWluaW11bS1wYXRoLXN1bS1pbi1hLXRyaWFuZ2xlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29udHJhY3RzL21pbmltdW0tcGF0aC1zdW0taW4tYS10cmlhbmdsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLEtBQUssR0FBRyxDQUFDLEtBQWlCLEVBQUUsRUFBRTtJQUNsQyxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFBO0lBRXRCLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQTtJQUN0RCxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7SUFFeEIsS0FBSyxJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUU7UUFDckMsS0FBSyxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUNuQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDO2lCQUNYLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUM7aUJBQzNCLE9BQU8sQ0FDTixDQUFDLENBQUMsRUFBRSxFQUFFLENBQ0osQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FDdEIsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUNaLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUNqQyxDQUFDLENBQ0wsQ0FBQTtTQUNKO0tBQ0Y7SUFFRCxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUNqQixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUc7SUFDckIsZ0NBQWdDLEVBQUUsS0FBSztDQUN4QyxDQUFBO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDMUQsQ0FBQyJ9\",\"filename\":\"scripts/contracts/minimum-path-sum-in-a-triangle.js\",\"server\":\"home\"}}],[\"scripts/hack-all.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\n * v5 of the hacking script\\n * This version implements a single main script that manages the execution of\\n * hack/grow/weaken scripts in every server and also tries to optimize the\\n * ratio of hack/grow/weaken threads.\\n */\\nimport { UI } from 'scripts/hack-ui';\\nimport { getAllServers } from 'scripts/utils/servers';\\nimport { FILES, HOSTS, SCRIPTS } from 'scripts/utils/constants';\\nconst OFFSET_MS = 500;\\nconst SCRIPT_FINISH_WAIT_TIME_MS = 100;\\nconst HOME_RESERVED_RAM_GB = 6;\\nconst nukeServers = (ns, activeServers) => {\\n    const PORT_PROGRAMS = [\\n        {\\n            filename: FILES.BRUTE_SSH,\\n            cmd: ns.brutessh,\\n        },\\n        {\\n            filename: FILES.FTP_CRACK,\\n            cmd: ns.ftpcrack,\\n        },\\n        {\\n            filename: FILES.RELAY_SMTP,\\n            cmd: ns.relaysmtp,\\n        },\\n        {\\n            filename: FILES.HTTP_WORM,\\n            cmd: ns.httpworm,\\n        },\\n        {\\n            filename: FILES.SQL_INJECT,\\n            cmd: ns.sqlinject,\\n        },\\n    ];\\n    const FILES_TO_COPY = [\\n        SCRIPTS.SIMPLE_GROW,\\n        SCRIPTS.SIMPLE_HACK,\\n        SCRIPTS.SIMPLE_WEAKEN,\\n    ];\\n    const curPrograms = PORT_PROGRAMS.filter(({ filename }) => ns.fileExists(filename, HOSTS.HOME));\\n    const remainingServers = getAllServers(ns).filter((server) => !activeServers.some((s) => s.host === server.host));\\n    const newServers = [];\\n    for (const server of remainingServers) {\\n        if (!ns.hasRootAccess(server.host)) {\\n            if (ns.getServerRequiredHackingLevel(server.host) < ns.getHackingLevel() &&\\n                ns.getServerNumPortsRequired(server.host) <= curPrograms.length) {\\n                curPrograms.forEach((prog) => prog.cmd(server.host));\\n                ns.nuke(server.host);\\n            }\\n        }\\n        if (ns.hasRootAccess(server.host)) {\\n            newServers.push(server);\\n            ns.scp(FILES_TO_COPY, server.host, HOSTS.HOME);\\n        }\\n    }\\n    if (newServers.length > 0) {\\n        ns.toast(`New servers available for hacking: ${newServers\\n            .map((s) => s.host)\\n            .join(', ')}`);\\n    }\\n    return newServers;\\n};\\nconst countServerThreads = (ns, server) => {\\n    const scriptRam = Math.max(ns.getScriptRam(SCRIPTS.SIMPLE_GROW, server), ns.getScriptRam(SCRIPTS.SIMPLE_HACK, server), ns.getScriptRam(SCRIPTS.SIMPLE_WEAKEN, server));\\n    let availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n    if (server === HOSTS.HOME) {\\n        availableRam = Math.max(0, availableRam - HOME_RESERVED_RAM_GB);\\n    }\\n    return Math.floor(availableRam / scriptRam);\\n};\\nconst countThreads = (ns, servers) => servers.reduce((acc, server) => acc + countServerThreads(ns, server.host), 0);\\nconst getThreadsForGrow = (totalThreads) => {\\n    // TODO: Implement logic when Formulas API is available\\n    const growThreads = Math.floor((11 * totalThreads) / 12);\\n    const weakenThreads = totalThreads - growThreads;\\n    return { growThreads, weakenThreads };\\n};\\nconst getThreadsForHack = (totalThreads) => {\\n    // TODO: Implement logic when Formulas API is available\\n    const hackThreads = Math.floor((1 * totalThreads) / 36);\\n    const growThreads = Math.floor((32 * totalThreads) / 36);\\n    const weakenThreads = totalThreads - hackThreads - growThreads;\\n    return {\\n        hackThreads,\\n        growThreads,\\n        weakenThreads,\\n    };\\n};\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    const target = ns.args[0];\\n    if (!target) {\\n        ns.tprint('Missing target argument');\\n        ns.exit();\\n    }\\n    const activeServers = [];\\n    const minSecurity = ns.getServerMinSecurityLevel(target);\\n    const maxMoney = ns.getServerMaxMoney(target);\\n    const ui = new UI(ns, target, { minSecurity, maxMoney }, 'Hack v5');\\n    ns.atExit(() => {\\n        ui.destroy();\\n    });\\n    while (true) {\\n        ns.print('Looking for new servers...');\\n        const newServers = nukeServers(ns, activeServers);\\n        activeServers.push(...newServers);\\n        if (newServers.length > 0) {\\n            ns.print(`Found ${newServers.length} new servers: ${newServers\\n                .map((s) => s.host)\\n                .join(', ')}`);\\n        }\\n        else {\\n            ns.print('No new servers found');\\n        }\\n        const totalThreads = countThreads(ns, activeServers);\\n        const curSecurity = ns.getServerSecurityLevel(target);\\n        const curMoney = ns.getServerMoneyAvailable(target);\\n        ui.setSecurity(curSecurity);\\n        ui.setMoney(curMoney);\\n        if (totalThreads === 0) {\\n            // Happens when hack-all.js is killed while hacking scripts are running\\n            ns.print('No threads available. Waiting...');\\n            ns.sleep(1000);\\n            continue;\\n        }\\n        const events = [];\\n        const pushEvent = (script, threads, startT, endT) => {\\n            events.push({\\n                type: 'script-start',\\n                script,\\n                threads,\\n                t: startT,\\n            });\\n            events.push({\\n                type: 'script-end',\\n                script,\\n                t: endT,\\n            });\\n        };\\n        if (curSecurity > minSecurity) {\\n            const weakenTime = ns.getWeakenTime(target);\\n            ui.addTimer(`Weaken (${totalThreads})`, weakenTime);\\n            pushEvent('weaken', totalThreads, 0, weakenTime);\\n        }\\n        else if (curMoney < maxMoney) {\\n            const { growThreads, weakenThreads } = getThreadsForGrow(totalThreads);\\n            const growTime = ns.getGrowTime(target);\\n            const weakenTime = ns.getWeakenTime(target);\\n            const weakenDelay = Math.max(0, growTime - weakenTime + OFFSET_MS);\\n            ui.addTimer(`Grow (${growThreads})`, growTime);\\n            ui.addTimer(`Weaken (${weakenThreads})`, weakenDelay + weakenTime);\\n            pushEvent('grow', growThreads, 0, growTime);\\n            pushEvent('weaken', weakenThreads, weakenDelay, weakenDelay + weakenTime);\\n        }\\n        else {\\n            const { hackThreads, growThreads, weakenThreads } = getThreadsForHack(totalThreads);\\n            const hackTime = ns.getHackTime(target);\\n            const growTime = ns.getGrowTime(target);\\n            const weakenTime = ns.getWeakenTime(target);\\n            const growDelay = Math.max(0, hackTime - growTime + OFFSET_MS);\\n            const weakenDelay = Math.max(0, growDelay + growTime - weakenTime + OFFSET_MS);\\n            ui.addTimer(`Hack (${hackThreads})`, hackTime);\\n            ui.addTimer(`Grow (${growThreads})`, growDelay + growTime);\\n            ui.addTimer(`Weaken (${weakenThreads})`, weakenDelay + weakenTime);\\n            pushEvent('hack', hackThreads, 0, hackTime);\\n            pushEvent('grow', growThreads, growDelay, growDelay + growTime);\\n            pushEvent('weaken', weakenThreads, weakenDelay, weakenDelay + weakenTime);\\n        }\\n        events.sort((a, b) => a.t - b.t);\\n        let elapsedTime = 0;\\n        for (const event of events) {\\n            await ns.sleep(event.t - elapsedTime);\\n            elapsedTime = event.t;\\n            const script = event.script === 'grow'\\n                ? SCRIPTS.SIMPLE_GROW\\n                : event.script === 'hack'\\n                    ? SCRIPTS.SIMPLE_HACK\\n                    : SCRIPTS.SIMPLE_WEAKEN;\\n            if (event.type === 'script-start') {\\n                let threadCnt = 0;\\n                for (const server of activeServers) {\\n                    const availableThreads = countServerThreads(ns, server.host);\\n                    const nThreads = Math.min(availableThreads, event.threads - threadCnt);\\n                    nThreads > 0 && ns.exec(script, server.host, nThreads, target);\\n                    threadCnt += nThreads;\\n                }\\n                ns.print(`Started ${script} with ${threadCnt} threads (expected: ${event.threads})`);\\n            }\\n            else {\\n                // Wait for all scripts to finish\\n                for (const server of activeServers) {\\n                    if (ns.isRunning(script, server.host, target)) {\\n                        await ns.sleep(SCRIPT_FINISH_WAIT_TIME_MS);\\n                        elapsedTime += SCRIPT_FINISH_WAIT_TIME_MS;\\n                    }\\n                }\\n                if (event.script === 'grow' || event.script === 'hack') {\\n                    ui.setMoney(ns.getServerMoneyAvailable(target));\\n                }\\n                ui.setSecurity(ns.getServerSecurityLevel(target));\\n                ns.print(`Finished running ${script}`);\\n            }\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay1hbGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9oYWNrLWFsbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7R0FLRztBQUlILE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQTtBQUNwQyxPQUFPLEVBQUUsYUFBYSxFQUFVLE1BQU0sdUJBQXVCLENBQUE7QUFDN0QsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLE1BQU0seUJBQXlCLENBQUE7QUFpQi9ELE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQTtBQUNyQixNQUFNLDBCQUEwQixHQUFHLEdBQUcsQ0FBQTtBQUN0QyxNQUFNLG9CQUFvQixHQUFHLENBQUMsQ0FBQTtBQUU5QixNQUFNLFdBQVcsR0FBRyxDQUFDLEVBQU0sRUFBRSxhQUF1QixFQUFFLEVBQUU7SUFDdEQsTUFBTSxhQUFhLEdBQUc7UUFDcEI7WUFDRSxRQUFRLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDekIsR0FBRyxFQUFFLEVBQUUsQ0FBQyxRQUFRO1NBQ2pCO1FBQ0Q7WUFDRSxRQUFRLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDekIsR0FBRyxFQUFFLEVBQUUsQ0FBQyxRQUFRO1NBQ2pCO1FBQ0Q7WUFDRSxRQUFRLEVBQUUsS0FBSyxDQUFDLFVBQVU7WUFDMUIsR0FBRyxFQUFFLEVBQUUsQ0FBQyxTQUFTO1NBQ2xCO1FBQ0Q7WUFDRSxRQUFRLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDekIsR0FBRyxFQUFFLEVBQUUsQ0FBQyxRQUFRO1NBQ2pCO1FBQ0Q7WUFDRSxRQUFRLEVBQUUsS0FBSyxDQUFDLFVBQVU7WUFDMUIsR0FBRyxFQUFFLEVBQUUsQ0FBQyxTQUFTO1NBQ2xCO0tBQ0YsQ0FBQTtJQUVELE1BQU0sYUFBYSxHQUFHO1FBQ3BCLE9BQU8sQ0FBQyxXQUFXO1FBQ25CLE9BQU8sQ0FBQyxXQUFXO1FBQ25CLE9BQU8sQ0FBQyxh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\",\"filename\":\"scripts/hack-all.js\",\"server\":\"home\"}}],[\"scripts/hack-ui.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatTime } from 'scripts/utils/time';\\nexport class UI {\\n    id;\\n    containerId;\\n    securityId;\\n    moneyId;\\n    timersId;\\n    minSecurity;\\n    maxMoney;\\n    ns;\\n    title;\\n    constructor(ns, id, stats, title) {\\n        this.ns = ns;\\n        this.id = id;\\n        this.containerId = `hack-status-${id}`;\\n        this.securityId = this.containerId + '--security';\\n        this.moneyId = this.containerId + '--money';\\n        this.timersId = this.containerId + '--timers';\\n        this.minSecurity = stats.minSecurity;\\n        this.maxMoney = stats.maxMoney;\\n        this.title = title;\\n        this.init();\\n    }\\n    destroy() {\\n        const doc = eval('document');\\n        const container = doc.getElementById(this.containerId);\\n        if (container) {\\n            doc.body.removeChild(container);\\n        }\\n    }\\n    init() {\\n        const doc = eval('document');\\n        if (doc.getElementById(this.containerId)) {\\n            return;\\n        }\\n        // TODO: Make this draggable\\n        const container = doc.createElement('div');\\n        container.id = this.containerId;\\n        container.style.position = 'fixed';\\n        container.style.bottom = '2rem';\\n        container.style.right = '0';\\n        container.style.display = 'flex';\\n        container.style.flexDirection = 'column';\\n        container.style.fontFamily =\\n            '\\\"Lucida Console\\\", \\\"Lucida Sans Unicode\\\", \\\"Fira Mono\\\", Consolas, \\\"Courier New\\\", Courier, monospace, \\\"Times New Roman\\\"';\\n        container.style.zIndex = '100';\\n        container.style.color = '#0c0';\\n        container.style.borderStyle = 'solid';\\n        container.style.borderColor = 'rgb(128, 128, 128)';\\n        container.style.borderWidth = '1px';\\n        container.style.padding = '0.5rem';\\n        const title = doc.createElement('div');\\n        title.style.padding = '0.5rem';\\n        title.style.alignSelf = 'center';\\n        title.innerText = this.title;\\n        title.style.fontWeight = 'bold';\\n        container.append(title);\\n        const target = doc.createElement('div');\\n        target.innerText = `Target: ${this.id}`;\\n        container.append(target);\\n        const security = doc.createElement('div');\\n        security.id = this.securityId;\\n        security.innerText = `Security: 0 (min: ${this.minSecurity})`;\\n        container.append(security);\\n        const money = doc.createElement('div');\\n        money.id = this.moneyId;\\n        money.innerText = `Money: 0 (max: ${this.maxMoney})`;\\n        container.append(money);\\n        const timers = doc.createElement('div');\\n        timers.id = this.timersId;\\n        timers.style.marginTop = '1rem';\\n        container.append(timers);\\n        doc.body.append(container);\\n    }\\n    setSecurity(security) {\\n        const doc = eval('document');\\n        const el = doc.getElementById(this.securityId);\\n        if (el) {\\n            el.innerText = `Security: ${security.toFixed(3)} (min: ${this.minSecurity})`;\\n        }\\n    }\\n    setMoney(money) {\\n        const doc = eval('document');\\n        const el = doc.getElementById(this.moneyId);\\n        if (el) {\\n            el.innerText = `Money: ${this.ns.formatNumber(money)} (max: ${this.ns.formatNumber(this.maxMoney)})`;\\n        }\\n    }\\n    addTimer(label, time) {\\n        const doc = eval('document');\\n        const now = performance.now();\\n        const target = now + time;\\n        const el = doc.createElement('div');\\n        const container = doc.getElementById(this.timersId);\\n        const refresh = () => {\\n            const remTime = target - performance.now();\\n            if (remTime < 0) {\\n                container?.removeChild(el);\\n                return;\\n            }\\n            el.innerText = `${label}: ${formatTime(remTime)}`;\\n            setTimeout(refresh, 200);\\n        };\\n        refresh();\\n        container?.append(el);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay11aS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL2hhY2stdWkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG9CQUFvQixDQUFBO0FBRS9DLE1BQU0sT0FBTyxFQUFFO0lBQ2IsRUFBRSxDQUFRO0lBQ1YsV0FBVyxDQUFRO0lBQ25CLFVBQVUsQ0FBUTtJQUNsQixPQUFPLENBQVE7SUFDZixRQUFRLENBQVE7SUFDaEIsV0FBVyxDQUFRO0lBQ25CLFFBQVEsQ0FBUTtJQUNoQixFQUFFLENBQUk7SUFDTixLQUFLLENBQVE7SUFFYixZQUNFLEVBQU0sRUFDTixFQUFVLEVBQ1YsS0FBZ0QsRUFDaEQsS0FBYTtRQUViLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFBO1FBQ1osSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUE7UUFDWixJQUFJLENBQUMsV0FBVyxHQUFHLGVBQWUsRUFBRSxFQUFFLENBQUE7UUFDdEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsV0FBVyxHQUFHLFlBQVksQ0FBQTtRQUNqRCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLEdBQUcsU0FBUyxDQUFBO1FBQzNDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUE7UUFDN0MsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFBO1FBQ3BDLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQTtRQUM5QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQTtRQUVsQixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUE7SUFDYixDQUFDO0lBRUQsT0FBTztRQUNMLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQWEsQ0FBQTtRQUN4QyxNQUFNLFNBQVMsR0FBRyxHQUFHLENB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\",\"filename\":\"scripts/hack-ui.js\",\"server\":\"home\"}}],[\"scripts/hack-tracker.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay10cmFja2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NjcmlwdHMvaGFjay10cmFja2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIifQ==\",\"filename\":\"scripts/hack-tracker.js\",\"server\":\"home\"}}],[\"scripts/corporations/tea.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CITIES } from 'scripts/corporations/constants';\\nconst DIVISION_NAME = 'Nepplants';\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    while (true) {\\n        CITIES.forEach((city) => {\\n            const { avgEnergy, avgMorale } = ns.corporation.getOffice(DIVISION_NAME, city);\\n            if (avgEnergy < 99) {\\n                ns.corporation.buyTea(DIVISION_NAME, city);\\n                ns.print(`Buying tea for ${DIVISION_NAME} in ${city}`);\\n            }\\n            if (avgMorale < 99) {\\n                const amt = (100 - avgMorale) * 100000;\\n                ns.corporation.throwParty(DIVISION_NAME, city, amt);\\n                ns.print(`Throwing ${amt} party for ${DIVISION_NAME} in ${city}`);\\n            }\\n        });\\n        await ns.sleep(ns.corporation.getBonusTime() > 0 ? 1000 : 10000);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29ycG9yYXRpb25zL3RlYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0NBQWdDLENBQUE7QUFFdkQsTUFBTSxhQUFhLEdBQUcsV0FBVyxDQUFBO0FBRWpDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUVwQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUN0QixNQUFNLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQTtZQUM5RSxJQUFJLFNBQVMsR0FBRyxFQUFFLEVBQUU7Z0JBQ2xCLEVBQUUsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQTtnQkFDMUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsYUFBYSxPQUFPLElBQUksRUFBRSxDQUFDLENBQUE7YUFDdkQ7WUFFRCxJQUFJLFNBQVMsR0FBRyxFQUFFLEVBQUU7Z0JBQ2xCLE1BQU0sR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLFNBQVMsQ0FBQyxHQUFHLE1BQU0sQ0FBQTtnQkFDdEMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQTtnQkFDbkQsRUFBRSxDQUFDLEtBQUssQ0FBQyxZQUFZLEdBQUcsY0FBYyxhQUFhLE9BQU8sSUFBSSxFQUFFLENBQUMsQ0FBQTthQUNsRTtRQUNILENBQUMsQ0FBQyxDQUFBO1FBRUYsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFBO0tBQ2pFO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/corporations/tea.js\",\"server\":\"home\"}}],[\"scripts/corporations/constants.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CITIES = [\\n    'Sector-12',\\n    'Aevum',\\n    'Chongqing',\\n    'New Tokyo',\\n    'Ishima',\\n    'Volhaven',\\n];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29ycG9yYXRpb25zL2NvbnN0YW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQW9CO0lBQ3JDLFdBQVc7SUFDWCxPQUFPO0lBQ1AsV0FBVztJQUNYLFdBQVc7SUFDWCxRQUFRO0lBQ1IsVUFBVTtDQUNYLENBQUEifQ==\",\"filename\":\"scripts/corporations/constants.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"scripts/contract-finder.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":10075.437,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":80223.40999939361,\"ramUsage\":22.4,\"server\":\"home\",\"scriptKey\":\"scripts/contract-finder.js*[]\",\"title\":\"scripts/contract-finder.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"scripts/corporations/tea.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":233.291,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13707.010000014803,\"ramUsage\":1024,\"server\":\"home\",\"scriptKey\":\"scripts/corporations/tea.js*[]\",\"title\":\"scripts/corporations/tea.js \",\"threads\":1,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"99.0.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":7713465104.6,\"moneyMax\":38567325523,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1190,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"2.3.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":8688727620.2,\"moneyMax\":43443638101,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1152,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"93.8.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":5843506839.6,\"moneyMax\":29217534198,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":990,\"serverGrowth\":64,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"97.3.4.7\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":4830626400.400001,\"moneyMax\":24153132002,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":907,\"serverGrowth\":82,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"43.8.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":4516388871.2,\"moneyMax\":22581944356,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1085,\"serverGrowth\":84,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"88.2.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":4641713426.400001,\"moneyMax\":23208567132,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1139,\"serverGrowth\":51,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"35.3.5.7\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\",\"b-and-a\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":3105540952.6000004,\"moneyMax\":15527704763,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1010,\"serverGrowth\":99,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"19.3.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"fulcrumtech\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":4506228865.400001,\"moneyMax\":22531144327,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":986,\"serverGrowth\":80,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"9.2.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":4606913485.400001,\"moneyMax\":23034567427,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1012,\"serverGrowth\":99,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"79.5.8.6\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\",\"4sigma\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":351258617,\"moneyMax\":1756293085,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1223,\"serverGrowth\":84,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"60.5.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":200000,\"moneyMax\":1000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1505,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"91.9.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":208428442,\"moneyMax\":1042142210,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":952,\"serverGrowth\":90,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"91.6.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":166165494.20000002,\"moneyMax\":830827471,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":916,\"serverGrowth\":68,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"89.4.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"defcomm\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":177714481.60000002,\"moneyMax\":888572408,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":928,\"serverGrowth\":73,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"95.3.8.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":132482936,\"moneyMax\":662414680,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":808,\"serverGrowth\":73,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"92.6.6.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":146522198.6,\"moneyMax\":732610993,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":821,\"serverGrowth\":74,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"53.7.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":180390259.60000002,\"moneyMax\":901951298,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":856,\"serverGrowth\":89,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"14.2.6.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":229966656,\"moneyMax\":1149833280,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":835,\"serverGrowth\":84,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"27.5.3.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"taiyang-digital\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":166296940.8,\"moneyMax\":831484704,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":809,\"serverGrowth\":69,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"50.6.6.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":133246370.2,\"moneyMax\":666231851,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":808,\"serverGrowth\":84,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"28.9.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"solaris\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":162212289.20000002,\"moneyMax\":811061446,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":73,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"69.5.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":161427225,\"moneyMax\":807136125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":833,\"serverGrowth\":81,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"71.0.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"millenium-fitness\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":231289236.20000002,\"moneyMax\":1156446181,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":868,\"serverGrowth\":61,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"56.0.2.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"global-pharm\",\"icarus\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":198686795,\"moneyMax\":993433975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":923,\"serverGrowth\":65,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"84.8.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":211731679.8,\"moneyMax\":1058658399,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":787,\"serverGrowth\":73,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"84.8.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"infocomm\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":140802942,\"moneyMax\":704014710,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":778,\"serverGrowth\":71,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"77.6.8.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":155295927.6,\"moneyMax\":776479638,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":766,\"serverGrowth\":74,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"78.5.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aerocorp\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":311071312.2,\"moneyMax\":1555356561,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":896,\"serverGrowth\":65,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"2.9.5.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"alpha-ent\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":304541331.6,\"moneyMax\":1522706658,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":777,\"serverGrowth\":87,\"runningScripts\":[]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"67.3.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zeus-med\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":228529852.60000002,\"moneyMax\":1142649263,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":814,\"serverGrowth\":75,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"34.6.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":294561108.40000004,\"moneyMax\":1472805542,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":817,\"serverGrowth\":72,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"10.5.2.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":208912646.8,\"moneyMax\":1044563234,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":792,\"serverGrowth\":78,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"56.9.8.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":141882875,\"moneyMax\":709414375,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":695,\"serverGrowth\":57,\"runningScripts\":[]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"27.3.9.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":104377771,\"moneyMax\":521888855,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":500,\"serverGrowth\":53,\"runningScripts\":[]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"80.8.7.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":128697030.2,\"moneyMax\":643485151,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":500,\"serverGrowth\":55,\"runningScripts\":[]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"70.1.4.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":76510609.8,\"moneyMax\":382553049,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":433,\"serverGrowth\":44,\"runningScripts\":[]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"26.6.7.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"rothman-uni\"}}]]},\"serversOnNetwork\":[\"crush-fitness\",\"lexo-corp\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":48065464,\"moneyMax\":240327320,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":378,\"serverGrowth\":45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,68904]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":116092.89794306004,\"offlineMoneyMade\":0,\"offlineRunningTime\":10075.448,\"onlineExpGained\":346699.9651748909,\"onlineMoneyMade\":0,\"onlineRunningTime\":29489.61000007222,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":36,\"temporary\":false}}]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"13.8.5.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"avmnite-02h\",\"alpha-ent\",\"aevum-police\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":196687232.8,\"moneyMax\":983436164,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":748,\"serverGrowth\":84,\"runningScripts\":[]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"76.2.3.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":58430180.800000004,\"moneyMax\":292150904,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":434,\"serverGrowth\":58,\"runningScripts\":[]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"40.9.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":87358559,\"moneyMax\":436792795,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":561,\"serverGrowth\":64,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"10.5.0.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":75897041.4,\"moneyMax\":379485207,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":443,\"serverGrowth\":41,\"runningScripts\":[]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"20.9.6.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"the-hub\"}}]]},\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37,\"hackDifficulty\":37,\"minDifficulty\":12,\"moneyAvailable\":39596279,\"moneyMax\":197981395,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":302,\"serverGrowth\":54,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,81486]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":54252.29541965686,\"offlineMoneyMade\":0,\"offlineRunningTime\":10075.448999999999,\"onlineExpGained\":410008.0309160551,\"onlineMoneyMade\":0,\"onlineRunningTime\":74512.20999947672,\"ramUsage\":1.75,\"server\":\"the-hub\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":18,\"temporary\":false}}]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"93.6.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"computek\"}}]]},\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":47882578.800000004,\"moneyMax\":239412894,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":397,\"serverGrowth\":51,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"63.6.2.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"netlink\"}}]]},\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":55000000,\"moneyMax\":275000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":385,\"serverGrowth\":58,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,52704]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":66501.81751447808,\"offlineMoneyMade\":0,\"offlineRunningTime\":10075.448999999999,\"onlineExpGained\":265187.4341776496,\"onlineMoneyMade\":0,\"onlineRunningTime\":22352.410000046257,\"ramUsage\":1.75,\"server\":\"netlink\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":36,\"temporary\":false}}]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"75.5.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"johnson-ortho\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"johnson-ortho\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"johnson-ortho\"}}]]},\"serversOnNetwork\":[\"neo-net\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":15433609.600000001,\"moneyMax\":77168048,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":273,\"serverGrowth\":45,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"18.3.8.3\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"n00dles\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"n00dles\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":70000,\"moneyMax\":70000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,9444]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":5972.45054173459,\"offlineMoneyMade\":0,\"offlineRunningTime\":10075.448999999999,\"onlineExpGained\":47518.78658875142,\"onlineMoneyMade\":0,\"onlineRunningTime\":78384.20999942037,\"ramUsage\":1.75,\"server\":\"n00dles\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":2,\"temporary\":false}}]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"31.8.6.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"foodnstuff\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"foodnstuff\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":400000,\"moneyMax\":2000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,42498]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":26876.446037491653,\"offlineMoneyMade\":0,\"offlineRunningTime\":10075.448999999999,\"onlineExpGained\":213834.5396493925,\"onlineMoneyMade\":0,\"onlineRunningTime\":78383.20999942039,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":9,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"85.5.5.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"sigma-cosmetics\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"sigma-cosmetics\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":460000,\"moneyMax\":2300000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,42498]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":26876.86734603572,\"offlineMoneyMade\":0,\"offlineRunningTime\":10075.449999999999,\"onlineExpGained\":213834.5396493925,\"onlineMoneyMade\":0,\"onlineRunningTime\":78382.2099994204,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":9,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"15.1.2.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"joesguns\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"joesguns\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":500000,\"moneyMax\":2500000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,42498]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":26877.285971842764,\"offlineMoneyMade\":0,\"offlineRunningTime\":10075.449999999999,\"onlineExpGained\":213834.5396493925,\"onlineMoneyMade\":0,\"onlineRunningTime\":78381.20999942042,\"ramUsage\":1.75,\"server\":\"joesguns\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":9,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"7.3.5.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"zer0\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"zer0\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"harakiri-sushi\",\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":1500000,\"moneyMax\":7500000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,84996]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":53753.740025857274,\"offlineMoneyMade\":0,\"offlineRunningTime\":10075.451,\"onlineExpGained\":427669.079298785,\"onlineMoneyMade\":0,\"onlineRunningTime\":78382.2099994204,\"ramUsage\":1.75,\"server\":\"zer0\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":18,\"temporary\":false}}]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"40.1.2.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"nectar-net\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"nectar-net\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":550000,\"moneyMax\":2750000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,42498]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":26877.707277669448,\"offlineMoneyMade\":0,\"offlineRunningTime\":10075.451,\"onlineExpGained\":213834.5396493925,\"onlineMoneyMade\":0,\"onlineRunningTime\":78380.20999942043,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":9,\"temporary\":false}}]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"59.4.2.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"neo-net\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"neo-net\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"zer0\",\"computek\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":1000000,\"moneyMax\":5000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,84996]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":53752.06560071845,\"offlineMoneyMade\":0,\"offlineRunningTime\":10075.451,\"onlineExpGained\":427669.079298785,\"onlineMoneyMade\":0,\"onlineRunningTime\":78384.20999942037,\"ramUsage\":1.75,\"server\":\"neo-net\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":18,\"temporary\":false}}]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"75.3.6.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"silver-helix\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"silver-helix\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"max-hardware\",\"the-hub\",\"netlink\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":9000000,\"moneyMax\":45000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,169992]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":107505.80560049125,\"offlineMoneyMade\":0,\"offlineRunningTime\":10075.451,\"onlineExpGained\":855338.15859757,\"onlineMoneyMade\":0,\"onlineRunningTime\":78383.20999942039,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":36,\"temporary\":false}}]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"37.4.1.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"hong-fang-tea\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"hong-fang-tea\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\",\"nectar-net\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":600000,\"moneyMax\":3000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,42498]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":26878.125929605652,\"offlineMoneyMade\":0,\"offlineRunningTime\":10075.451,\"onlineExpGained\":213834.5396493925,\"onlineMoneyMade\":0,\"onlineRunningTime\":78379.20999942045,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":9,\"temporary\":false}}]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"93.4.4.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"harakiri-sushi\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"harakiri-sushi\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":800000,\"moneyMax\":4000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,42498]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":26878.54995761708,\"offlineMoneyMade\":0,\"offlineRunningTime\":10075.453,\"onlineExpGained\":213834.5396493925,\"onlineMoneyMade\":0,\"onlineRunningTime\":78378.20999942046,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":9,\"temporary\":false}}]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"96.6.3.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"phantasy\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"phantasy\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":4800000,\"moneyMax\":24000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,84996]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":53752.08165944037,\"offlineMoneyMade\":0,\"offlineRunningTime\":10075.454,\"onlineExpGained\":427669.079298785,\"onlineMoneyMade\":0,\"onlineRunningTime\":78384.20999942037,\"ramUsage\":1.75,\"server\":\"phantasy\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":18,\"temporary\":false}}]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"79.3.3.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"max-hardware\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"max-hardware\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"iron-gym\",\"silver-helix\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2000000,\"moneyMax\":10000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,84996]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":53754.593337005535,\"offlineMoneyMade\":0,\"offlineRunningTime\":10075.454,\"onlineExpGained\":427669.079298785,\"onlineMoneyMade\":0,\"onlineRunningTime\":78381.20999942042,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":18,\"temporary\":false}}]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"26.8.3.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"omega-net\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"omega-net\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":29,\"hackDifficulty\":29,\"minDifficulty\":10,\"moneyAvailable\":12892080.200000001,\"moneyMax\":64460401,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":204,\"serverGrowth\":39,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,84996]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":53753.75608506518,\"offlineMoneyMade\":0,\"offlineRunningTime\":10075.454,\"onlineExpGained\":427669.079298785,\"onlineMoneyMade\":0,\"onlineRunningTime\":78382.2099994204,\"ramUsage\":1.75,\"server\":\"omega-net\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":18,\"temporary\":false}}]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"58.2.0.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"crush-fitness\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"crush-fitness\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"crush-fitness\"}}]]},\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":38,\"hackDifficulty\":38,\"minDifficulty\":13,\"moneyAvailable\":10254190.600000001,\"moneyMax\":51270953,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":267,\"serverGrowth\":30,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"36.6.8.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"iron-gym\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"iron-gym\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":4000000,\"moneyMax\":20000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,84996]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":53755.44139861125,\"offlineMoneyMade\":0,\"offlineRunningTime\":10075.456,\"onlineExpGained\":427669.079298785,\"onlineMoneyMade\":0,\"onlineRunningTime\":78380.20999942043,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":18,\"temporary\":false}}]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"7.5.1.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-institute\",\"aerocorp\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":50000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":487,\"serverGrowth\":30,\"runningScripts\":[]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"55.7.4.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":180000000,\"moneyMax\":900000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":966,\"serverGrowth\":60,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"11.3.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"millenium-fitness\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":90000000,\"moneyMax\":450000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":782,\"serverGrowth\":46,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"18.7.6.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":523,\"serverGrowth\":1,\"runningScripts\":[]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"92.5.9.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"I.I.I.I\"}}]]},\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":349,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,240243]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":228827.24606139242,\"offlineMoneyMade\":0,\"offlineRunningTime\":10075.456,\"onlineExpGained\":1208815.7397757918,\"onlineMoneyMade\":0,\"onlineRunningTime\":52200.809999801364,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":73,\"temporary\":false}}]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"90.4.2.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"avmnite-02h\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"avmnite-02h\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\",\"syscore\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":209,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,42498]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":26877.30475607185,\"offlineMoneyMade\":0,\"offlineRunningTime\":10075.457,\"onlineExpGained\":213834.5396493925,\"onlineMoneyMade\":0,\"onlineRunningTime\":78381.20999942042,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":9,\"temporary\":false}}]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"82.4.7.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"fulcrumtech\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":538,\"serverGrowth\":1,\"runningScripts\":[]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"40.4.1.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"CSEC\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"CSEC\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"hong-fang-tea\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":60,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,18888]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":11945.096674196706,\"offlineMoneyMade\":0,\"offlineRunningTime\":10075.457,\"onlineExpGained\":95037.57317750284,\"onlineMoneyMade\":0,\"onlineRunningTime\":78383.20999942039,\"ramUsage\":1.75,\"server\":\"CSEC\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":4,\"temporary\":false}}]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"21.4.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"25.0.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":6000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"0.5.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}}}","CompaniesSave":"{\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":98.4956,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":87635.52602569871}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":94.8228,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":418514.0068370141}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":38.4439,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":65385.07335746128}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":22.7293,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":39317.685548229274}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":98.8427,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":95632.04904564505}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"SoA - phyzical WKS harmonizer\",\"SoA - Might of Ares\",\"SoA - Wisdom of Athena\",\"SoA - Chaos of Dionysus\",\"SoA - Beauty of Aphrodite\",\"SoA - Trickery of Hermes\",\"SoA - Flood of Poseidon\",\"SoA - Hunt of Artemis\",\"SoA - Knowledge of Apollo\"],\"favor\":33.2956,\"isBanned\":false,\"isMember\":true,\"name\":\"Shadows of Anarchy\",\"playerReputation\":64004.746815511164}}}","AliasesSave":"{\"nuke\":\"run scripts/nuke.js\",\"sa\":\"scan-analyze\",\"c\":\"connect\",\"scpa\":\"run scripts/scp-all.js\",\"hc\":\"run scripts/hack-candidates.js\",\"ha\":\"run scripts/hack-all.js\",\"cf\":\"run scripts/contract-finder.js\",\"st\":\"run scripts/server-tree.js\"}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":10,\"ActiveScriptsScriptPageSize\":10,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":12525,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-7,\"y\":0,\"opened\":false},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"32","AllGangsSave":"","LastExportBonus":"1686893903648","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}