{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":541,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0},\"exp\":{\"hacking\":20596971.7818402,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.3986375504489117,\"hacking_speed\":1.4416997624178816,\"hacking_money\":1.9148014083526763,\"hacking_grow\":1.3320357623322967,\"hacking\":1.9978011998104686,\"strength\":1.3320357623322967,\"defense\":1.3320357623322967,\"dexterity\":1.3320357623322967,\"agility\":1.3320357623322967,\"charisma\":1.4385986233188803,\"hacking_exp\":2.422223781566135,\"strength_exp\":1.685025239350355,\"defense_exp\":1.685025239350355,\"dexterity_exp\":1.685025239350355,\"agility_exp\":1.685025239350355,\"charisma_exp\":1.685025239350355,\"company_rep\":1.3320357623322967,\"faction_rep\":1.3320357623322967,\"crime_money\":1.3320357623322967,\"crime_success\":1.3320357623322967,\"hacknet_node_money\":1.3320357623322967,\"hacknet_node_purchase_cost\":0.7507230874147778,\"hacknet_node_ram_cost\":0.7507230874147778,\"hacknet_node_core_cost\":0.7507230874147778,\"hacknet_node_level_cost\":0.7507230874147778,\"work_money\":1.4385986233188803,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":3,\"name\":\"NeuroFlux Governor\"}],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"}],\"city\":\"Sector-12\",\"bitNodeN\":3,\"corporation\":{\"ctor\":\"Corporation\",\"data\":{\"name\":\"Nepcorp\",\"divisions\":{\"ctor\":\"JSONMap\",\"data\":[[\"Nepplants\",{\"ctor\":\"Division\",\"data\":{\"name\":\"Nepplants\",\"type\":\"Agriculture\",\"researchPoints\":339325.77609130123,\"researched\":{\"ctor\":\"JSONSet\",\"data\":[\"Hi-Tech R&D Laboratory\"]},\"requiredMaterials\":{\"Water\":0.5,\"Chemicals\":0.2},\"producedMaterials\":[\"Plants\",\"Food\"],\"products\":{\"ctor\":\"JSONMap\",\"data\":[]},\"makesProducts\":false,\"awareness\":0,\"popularity\":0,\"startingCost\":40000000000,\"realEstateFactor\":0.72,\"researchFactor\":0.5,\"hardwareFactor\":0.2,\"robotFactor\":0.3,\"aiCoreFactor\":0.3,\"advertisingFactor\":0.04,\"productionMult\":580.74514607556,\"lastCycleRevenue\":0,\"lastCycleExpenses\":15317976.308911387,\"thisCycleRevenue\":0,\"thisCycleExpenses\":2427183.8323943787,\"state\":\"START\",\"newInd\":true,\"warehouses\":{\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":41,\"city\":\"Sector-12\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":100704.96485484515,\"quality\":776.8610102634585,\"demand\":70.26269057537219,\"demandRange\":[65,85],\"competition\":48.544155445376326,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":-1900.0000000000005,\"importAmount\":1900,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1471.8657972260974,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":3227.3877068737656,\"demand\":87.1472915266967,\"demandRange\":[70,90],\"competition\":78.01210558886761,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":3800.000000000001,\"productionAmount\":3800.000000000001,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":3553.6903539197083,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":1239180424918116.2,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":3227.3877068737656,\"demand\":48.06025455698979,\"demandRange\":[20,90],\"competition\":55.43491007842036,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":3800.000000000001,\"importAmount\":0,\"exports\":[{\"division\":\"Nepchem\",\"city\":\"Sector-12\",\"amount\":\"760\"},{\"division\":\"Nepsmokes\",\"city\":\"Sector-12\",\"amount\":\"EPROD-760.000000\"}],\"exportedLastCycle\":3800.000000000001,\"marketPrice\":2653.157693615386,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":1415529230680245.8,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":83.36416072601033,\"demandRange\":[80,90],\"competition\":86.50969530855497,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":8365.749518949971,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":7600,\"quality\":16674.956635904215,\"demand\":44.75324797140656,\"demandRange\":[40,70],\"competition\":41.599597871140226,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":-760.0000000000001,\"importAmount\":760,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":7871.402365030963,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":88.01285376620794,\"demandRange\":[80,99],\"competition\":86.65107321302366,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":70962.97254641286,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":85.11265465115856,\"demandRange\":[80,99],\"competition\":91.96285875066131,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":14122.610027527453,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":3000000,\"quality\":1,\"demand\":26.175844266224903,\"demandRange\":[5,99],\"competition\":70.40128386041384,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":73240.8846036424,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":24599.99999999998,\"sizeUsed\":20415.24824274226,\"smartSupplyEnabled\":false,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":9299.4}},\"Aevum\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":41,\"city\":\"Aevum\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":5.031324690207839e-9,\"quality\":1,\"demand\":65.40080433721583,\"demandRange\":[65,85],\"competition\":47.881316013239825,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":1900,\"actualSellAmount\":0,\"productionAmount\":-1899.9999999999995,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1377.2956312333242,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":3230.5881972806237,\"demand\":87.11558784850446,\"demandRange\":[70,90],\"competition\":61.945663474903846,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":3799.999999999999,\"productionAmount\":3799.999999999999,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":4533.364846698069,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":2158246594254590.8,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":3230.5881972806237,\"demand\":64.41091974457252,\"demandRange\":[20,90],\"competition\":49.16709649630047,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":3799.999999999999,\"importAmount\":0,\"exports\":[{\"division\":\"Nepchem\",\"city\":\"Aevum\",\"amount\":\"760\"},{\"division\":\"Nepsmokes\",\"city\":\"Aevum\",\"amount\":\"EPROD-760.000000\"}],\"exportedLastCycle\":3799.999999999999,\"marketPrice\":2666.3981027044347,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":2155503246014133.2,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":82.56469870935294,\"demandRange\":[80,90],\"competition\":78.83940269599769,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":8232.55359271212,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":7600.000000000001,\"quality\":16683.958839060575,\"demand\":42.22288637287563,\"demandRange\":[40,70],\"competition\":57.05441904200326,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":-759.9999999999999,\"importAmount\":760,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":8951.341585606624,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":85.51693537477371,\"demandRange\":[80,99],\"competition\":93.99397719321158,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":74924.05659797174,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":86.16222131231177,\"demandRange\":[80,99],\"competition\":89.38280313965267,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":15633.42916111792,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":3000000,\"quality\":1,\"demand\":87.09340261538198,\"demandRange\":[5,99],\"competition\":27.39649544352901,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":68689.66472192817,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":24599.99999999998,\"sizeUsed\":15380.000000000251,\"smartSupplyEnabled\":false,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":10902.625632231282}},\"Chongqing\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":41,\"city\":\"Chongqing\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":5.409674486145377e-9,\"quality\":1,\"demand\":75.72892910888662,\"demandRange\":[65,85],\"competition\":46.946095839163796,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":1900,\"actualSellAmount\":0,\"productionAmount\":-1900,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1468.3681590540539,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":3208.4765176896926,\"demand\":90,\"demandRange\":[70,90],\"competition\":51.25301437070515,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":3800,\"productionAmount\":3800,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5068.658870651559,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":2880851687674842.5,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":3208.4765176896926,\"demand\":75.42396714059713,\"demandRange\":[20,90],\"competition\":53.92834867465604,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":3800,\"importAmount\":0,\"exports\":[{\"division\":\"Nepchem\",\"city\":\"Chongqing\",\"amount\":\"760\"},{\"division\":\"Nepsmokes\",\"city\":\"Chongqing\",\"amount\":\"EPROD-760.000000\"}],\"exportedLastCycle\":3800,\"marketPrice\":3244.0035593068988,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":2254423392307055.5,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[80,90],\"competition\":68.81288780924483,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":7907.584413518069,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":7600,\"quality\":16682.686988101457,\"demand\":40.57259130067994,\"demandRange\":[40,70],\"competition\":52.97965251885269,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":-760,\"importAmount\":760,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5653.490558676722,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":81.45707209001914,\"demandRange\":[80,99],\"competition\":97.7596853135931,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":68970.8506982062,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":83.34791970400887,\"demandRange\":[80,99],\"competition\":81.19578460410476,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":13176.683705920525,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":3000000,\"quality\":1,\"demand\":47.663114403943375,\"demandRange\":[5,99],\"competition\":44.9805013099181,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":68845.12604370389,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":24599.99999999998,\"sizeUsed\":15380.000000000271,\"smartSupplyEnabled\":false,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":10882.423877558798}},\"New Tokyo\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":41,\"city\":\"New Tokyo\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":5.344190867617726e-9,\"quality\":1,\"demand\":70.35875035503791,\"demandRange\":[65,85],\"competition\":52.59541913732585,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":1900,\"actualSellAmount\":0,\"productionAmount\":-1899.9999999999995,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1527.6015942449062,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":3207.4609355930465,\"demand\":70,\"demandRange\":[70,90],\"competition\":58.958164214133795,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":3799.999999999999,\"productionAmount\":3799.999999999999,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":6691.286117453863,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":1900592845183634.8,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":3207.4609355930465,\"demand\":68.24282699891305,\"demandRange\":[20,90],\"competition\":49.32713834173665,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":3799.999999999999,\"importAmount\":0,\"exports\":[{\"division\":\"Nepchem\",\"city\":\"New Tokyo\",\"amount\":\"760\"},{\"division\":\"Nepsmokes\",\"city\":\"New Tokyo\",\"amount\":\"EPROD-760.000000\"}],\"exportedLastCycle\":3799.999999999999,\"marketPrice\":2496.468760338085,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":2256017885296636,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":85.58431737823103,\"demandRange\":[80,90],\"competition\":78.18212900771883,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":7596.653499647724,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":7600,\"quality\":16656.586447691763,\"demand\":42.44104707013227,\"demandRange\":[40,70],\"competition\":70.02224996248695,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":-760,\"importAmount\":760,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":7241.283454107331,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":85.11736968091083,\"demandRange\":[80,99],\"competition\":83.50056458877403,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":80759.22117773333,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":92.10959007572656,\"demandRange\":[80,99],\"competition\":97.91885969044193,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":15576.38382213665,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":3000000,\"quality\":1,\"demand\":84.86883891269014,\"demandRange\":[5,99],\"competition\":37.14750531393524,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":72716.4034805264,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":24599.99999999998,\"sizeUsed\":15380.000000000267,\"smartSupplyEnabled\":false,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":10870.455934207288}},\"Ishima\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":41,\"city\":\"Ishima\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":5.282345227897167e-9,\"quality\":1,\"demand\":75.6273690001886,\"demandRange\":[65,85],\"competition\":50.28622096884544,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":1900,\"actualSellAmount\":0,\"productionAmount\":-1900,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1492.6851752442371,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":3237.6232385068265,\"demand\":90,\"demandRange\":[70,90],\"competition\":59.58409083660743,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":3800,\"productionAmount\":3800,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":6654.527871804684,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":2374534567435780.5,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":3237.6232385068265,\"demand\":80.50248615966181,\"demandRange\":[20,90],\"competition\":53.00099184562309,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":3800,\"importAmount\":0,\"exports\":[{\"division\":\"Nepchem\",\"city\":\"Ishima\",\"amount\":\"760\"},{\"division\":\"Nepsmokes\",\"city\":\"Ishima\",\"amount\":\"EPROD-760.000000\"}],\"exportedLastCycle\":3800,\"marketPrice\":3039.735253598801,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":2492682066073096.5,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":81.14756954458085,\"demandRange\":[80,90],\"competition\":83.83580332307557,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":7045.721377003062,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":7600,\"quality\":16659.31934518952,\"demand\":56.49794871713609,\"demandRange\":[40,70],\"competition\":57.9831533440611,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":-760,\"importAmount\":760,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":8127.208431653345,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":90.85103943813877,\"demandRange\":[80,99],\"competition\":88.51171607200934,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":82569.45282157391,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":88.48038938081076,\"demandRange\":[80,99],\"competition\":84.96410409141953,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":14203.834805338935,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":3000000,\"quality\":1,\"demand\":89.454360272553,\"demandRange\":[5,99],\"competition\":51.525361109243924,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":80950.74562875673,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":24599.99999999998,\"sizeUsed\":15380.000000000264,\"smartSupplyEnabled\":false,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":10894.882124119013}},\"Volhaven\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":41,\"city\":\"Volhaven\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":39479.999999999985,\"quality\":1,\"demand\":77.07720127862076,\"demandRange\":[65,85],\"competition\":43.690659057234036,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":1900,\"actualSellAmount\":0,\"productionAmount\":-1900,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1556.6814112452628,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":883369866907.3462,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":3196.6857786681553,\"demand\":70,\"demandRange\":[70,90],\"competition\":36.263741594882084,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":3800,\"productionAmount\":3800,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5187.613596874922,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":2912196865139581,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":3196.6857786681553,\"demand\":63.13402582117524,\"demandRange\":[20,90],\"competition\":46.334580993792756,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":3800,\"importAmount\":0,\"exports\":[{\"division\":\"Nepchem\",\"city\":\"Volhaven\",\"amount\":\"760\"},{\"division\":\"Nepsmokes\",\"city\":\"Volhaven\",\"amount\":\"EPROD-760.000000\"}],\"exportedLastCycle\":3800,\"marketPrice\":2972.6594982462857,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":2205752619506581.5,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":83.55329036445146,\"demandRange\":[80,90],\"competition\":75.28762558918065,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":7426.578961706805,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":7600.000000000001,\"quality\":16677.51795057154,\"demand\":48.19332346309032,\"demandRange\":[40,70],\"competition\":42.3712676941998,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":-759.9999999999999,\"importAmount\":760,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":9031.044439947244,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":86.81609144547322,\"demandRange\":[80,99],\"competition\":97.05627047574946,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":77630.30576683761,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":83.85782607091333,\"demandRange\":[80,99],\"competition\":83.2854911438353,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":14094.988241499788,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":3000000,\"quality\":1,\"demand\":55.6733170693748,\"demandRange\":[5,99],\"competition\":72.38929765344585,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":63812.51149391775,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":24599.99999999998,\"sizeUsed\":17354,\"smartSupplyEnabled\":false,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":10859.73956925959}}},\"offices\":{\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Sector-12\",\"size\":354,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":100,\"avgMorale\":100,\"avgIntelligence\":75.7690140845071,\"avgCharisma\":74.50704225352119,\"avgCreativity\":75.14084507042251,\"avgEfficiency\":75.09295774647887,\"totalExperience\":28509.970000000692,\"numEmployees\":354,\"totalSalary\":404671.38042253745,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":418907.53633647703,\"Operations\":60937.90405227983,\"Engineer\":238042.18239854425,\"Business\":0,\"Management\":35837.873348054505,\"Research & Development\":84089.57653759848,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":51,\"Engineer\":201,\"Business\":0,\"Management\":51,\"Research & Development\":51,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":51,\"Engineer\":201,\"Business\":0,\"Management\":51,\"Research & Development\":51,\"Intern\":0,\"Unassigned\":0}}},\"Aevum\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Aevum\",\"size\":354,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":100,\"avgMorale\":100,\"avgIntelligence\":76.16619718309859,\"avgCharisma\":75.32676056338023,\"avgCreativity\":75.53239436619717,\"avgEfficiency\":74.93802816901399,\"totalExperience\":28428.391000000694,\"numEmployees\":354,\"totalSalary\":405970.2828591568,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":419663.98439772043,\"Operations\":61029.990018739554,\"Engineer\":238330.02902130602,\"Business\":0,\"Management\":35898.9714271903,\"Research & Development\":84404.99393048458,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":51,\"Engineer\":201,\"Business\":0,\"Management\":51,\"Research & Development\":51,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":51,\"Engineer\":201,\"Business\":0,\"Management\":51,\"Research & Development\":51,\"Intern\":0,\"Unassigned\":0}}},\"Chongqing\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Chongqing\",\"size\":354,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":100,\"avgMorale\":100,\"avgIntelligence\":74.38873239436607,\"avgCharisma\":74.23661971830988,\"avgCreativity\":75.09295774647896,\"avgEfficiency\":75.23098591549295,\"totalExperience\":28569.7160000007,\"numEmployees\":354,\"totalSalary\":403193.3001126781,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":416244.8215029365,\"Operations\":60690.20420291241,\"Engineer\":236339.78156576765,\"Business\":0,\"Management\":35849.971808546274,\"Research & Development\":83364.86392571015,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":51,\"Engineer\":201,\"Business\":0,\"Management\":51,\"Research & Development\":51,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":51,\"Engineer\":201,\"Business\":0,\"Management\":51,\"Research & Development\":51,\"Intern\":0,\"Unassigned\":0}}},\"New Tokyo\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"New Tokyo\",\"size\":354,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":100,\"avgMorale\":100,\"avgIntelligence\":75.16056338028176,\"avgCharisma\":73.18873239436618,\"avgCreativity\":75.2676056338028,\"avgEfficiency\":74.3239436619718,\"totalExperience\":28710.2660000007,\"numEmployees\":354,\"totalSalary\":402543.9754647908,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":416069.93464986916,\"Operations\":60577.795466937256,\"Engineer\":236248.18249737442,\"Business\":0,\"Management\":35549.13603031756,\"Research & Development\":83694.82065523992,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":51,\"Engineer\":201,\"Business\":0,\"Management\":51,\"Research & Development\":51,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":51,\"Engineer\":201,\"Business\":0,\"Management\":51,\"Research & Development\":51,\"Intern\":0,\"Unassigned\":0}}},\"Ishima\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Ishima\",\"size\":354,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":100,\"avgMorale\":100,\"avgIntelligence\":76.35774647887328,\"avgCharisma\":76.47605633802812,\"avgCreativity\":73.67605633802818,\"avgEfficiency\":74.99718309859155,\"totalExperience\":28729.816000000705,\"numEmployees\":354,\"totalSalary\":406389.92687324155,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":419604.68282425456,\"Operations\":60810.06889376944,\"Engineer\":238962.59285127756,\"Business\":0,\"Management\":35941.86551348778,\"Research & Development\":83890.15556571975,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":51,\"Engineer\":201,\"Business\":0,\"Management\":51,\"Research & Development\":51,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":51,\"Engineer\":201,\"Business\":0,\"Management\":51,\"Research & Development\":51,\"Intern\":0,\"Unassigned\":0}}},\"Volhaven\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Volhaven\",\"size\":354,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":100,\"avgMorale\":100,\"avgIntelligence\":74.7352112676056,\"avgCharisma\":75.62253521126763,\"avgCreativity\":74.88732394366197,\"avgEfficiency\":73.90704225352111,\"totalExperience\":28905.14100000071,\"numEmployees\":354,\"totalSalary\":404414.966661974,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":414561.9345009671,\"Operations\":60310.4585661256,\"Engineer\":235278.02527637887,\"Business\":0,\"Management\":35694.12335485803,\"Research & Development\":83279.32730360464,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":51,\"Engineer\":201,\"Business\":0,\"Management\":51,\"Research & Development\":51,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":51,\"Engineer\":201,\"Business\":0,\"Management\":51,\"Research & Development\":51,\"Intern\":0,\"Unassigned\":0}}}},\"numAdVerts\":0}}],[\"Nepchem\",{\"ctor\":\"Division\",\"data\":{\"name\":\"Nepchem\",\"type\":\"Chemical\",\"researchPoints\":338366.6329659168,\"researched\":{\"ctor\":\"JSONSet\",\"data\":[\"Hi-Tech R&D Laboratory\"]},\"requiredMaterials\":{\"Plants\":1,\"Water\":0.5},\"producedMaterials\":[\"Chemicals\"],\"products\":{\"ctor\":\"JSONMap\",\"data\":[]},\"makesProducts\":false,\"awareness\":0,\"popularity\":0,\"startingCost\":70000000000,\"realEstateFactor\":0.25,\"researchFactor\":0.75,\"hardwareFactor\":0.2,\"robotFactor\":0.25,\"aiCoreFactor\":0.2,\"advertisingFactor\":0.07,\"productionMult\":50.86880541685344,\"lastCycleRevenue\":0,\"lastCycleExpenses\":4009978.090941186,\"thisCycleRevenue\":0,\"thisCycleExpenses\":2429471.6366408584,\"state\":\"START\",\"newInd\":true,\"warehouses\":{\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":41,\"city\":\"Sector-12\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":31159.999999999975,\"quality\":776.5145364130806,\"demand\":72.86076403454618,\"demandRange\":[65,85],\"competition\":45.547630670413994,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":-379.99999999999994,\"importAmount\":380,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1583.5999537436076,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[70,90],\"competition\":60,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":7600.000000000001,\"quality\":3227.3877068737656,\"demand\":64.8430255330542,\"demandRange\":[20,90],\"competition\":42.51353448881697,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":-759.9999999999999,\"importAmount\":760,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2835.293980417393,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":89.62016326183415,\"demandRange\":[80,90],\"competition\":66.13624227518407,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":8253.272424925923,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":3.055902197957039e-10,\"quality\":16674.956635904215,\"demand\":46.94742812345625,\"demandRange\":[40,70],\"competition\":65.0637611319024,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":759.9999999999999,\"importAmount\":0,\"exports\":[{\"division\":\"Nepplants\",\"city\":\"Sector-12\",\"amount\":\"760\"}],\"exportedLastCycle\":760,\"marketPrice\":10734.657845370206,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":30000,\"quality\":1,\"demand\":89.92905498180765,\"demandRange\":[80,99],\"competition\":84.36040978114298,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":72038.4283244917,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":87.65074025700197,\"demandRange\":[80,99],\"competition\":85.25254476838678,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":14414.866829295912,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":1000000,\"quality\":1,\"demand\":33.49083423920566,\"demandRange\":[5,99],\"competition\":60.76821060428153,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":71201.78696426241,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":24599.99999999998,\"sizeUsed\":21938.000000000015,\"smartSupplyEnabled\":false,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":954.9977893259013}},\"Aevum\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":41,\"city\":\"Aevum\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":3799.999999999982,\"quality\":1,\"demand\":65.88309233466322,\"demandRange\":[65,85],\"competition\":47.06587681334427,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":380,\"actualSellAmount\":0,\"productionAmount\":-380,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1522.9218116376658,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[70,90],\"competition\":60,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":7600,\"quality\":3230.5881972806237,\"demand\":86.73443888462815,\"demandRange\":[20,90],\"competition\":45.99145014184851,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":-760,\"importAmount\":760,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":3162.3557484114967,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":86.99016143100971,\"demandRange\":[80,90],\"competition\":89.58233788726743,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":7522.564527135613,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":3.119566827081144e-10,\"quality\":16683.958839060575,\"demand\":42.836202480519006,\"demandRange\":[40,70],\"competition\":45.4386164384754,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":760,\"importAmount\":0,\"exports\":[{\"division\":\"Nepplants\",\"city\":\"Aevum\",\"amount\":\"760\"}],\"exportedLastCycle\":760,\"marketPrice\":8269.579950444368,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":30000,\"quality\":1,\"demand\":81.66890529656541,\"demandRange\":[80,99],\"competition\":96.03099942198484,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":61320.532383151774,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":90.98459166500524,\"demandRange\":[80,99],\"competition\":96.71743699282403,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":12245.282537149425,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":1000000,\"quality\":1,\"demand\":28.921691952686675,\"demandRange\":[5,99],\"competition\":67.972938347773,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":46137.90370719315,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":24599.99999999998,\"sizeUsed\":20570.000000000015,\"smartSupplyEnabled\":false,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":955.9356376135327}},\"Chongqing\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":41,\"city\":\"Chongqing\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":3799.9999999999795,\"quality\":1,\"demand\":69.88044336172834,\"demandRange\":[65,85],\"competition\":55.64659064756401,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":380,\"actualSellAmount\":0,\"productionAmount\":-380.00000000000006,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1440.5017529554598,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[70,90],\"competition\":60,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":7600,\"quality\":3208.4765176896926,\"demand\":80.46940195311947,\"demandRange\":[20,90],\"competition\":44.51061155862704,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":-760.0000000000001,\"importAmount\":760,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":3284.5142318070007,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":84.51068506715211,\"demandRange\":[80,90],\"competition\":75.14931525407023,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":8302.037744683834,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":3.3014657674357295e-10,\"quality\":16682.686988101457,\"demand\":44.072313953057325,\"demandRange\":[40,70],\"competition\":63.39320523574498,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":760.0000000000001,\"importAmount\":0,\"exports\":[{\"division\":\"Nepplants\",\"city\":\"Chongqing\",\"amount\":\"760\"}],\"exportedLastCycle\":760,\"marketPrice\":7994.0810471724335,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":30000,\"quality\":1,\"demand\":92.42058341981877,\"demandRange\":[80,99],\"competition\":96.63244095841273,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":72189.30723307075,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":86.2641677834687,\"demandRange\":[80,99],\"competition\":87.57636492145103,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":14302.500950755844,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":1000000,\"quality\":1,\"demand\":57.010758395258335,\"demandRange\":[5,99],\"competition\":43.430926975034296,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":87035.81517403135,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":24599.99999999998,\"sizeUsed\":20570.000000000015,\"smartSupplyEnabled\":false,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":953.6482950407981}},\"New Tokyo\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":41,\"city\":\"New Tokyo\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":3799.9999999999854,\"quality\":1,\"demand\":74.98737692316057,\"demandRange\":[65,85],\"competition\":54.80088966308539,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":380,\"actualSellAmount\":0,\"productionAmount\":-380,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1441.855398477471,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[70,90],\"competition\":60,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":7600,\"quality\":3207.4609355930465,\"demand\":84.44682110301905,\"demandRange\":[20,90],\"competition\":62.90641627378152,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":-760,\"importAmount\":760,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2962.717507565563,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":86.7543353802536,\"demandRange\":[80,90],\"competition\":93.64657895714274,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":7403.523603376907,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":3.155946615152061e-10,\"quality\":16656.586447691763,\"demand\":57.70526200833138,\"demandRange\":[40,70],\"competition\":41.88632043613464,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":760,\"importAmount\":0,\"exports\":[{\"division\":\"Nepplants\",\"city\":\"New Tokyo\",\"amount\":\"760\"}],\"exportedLastCycle\":760,\"marketPrice\":9422.106546853916,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":30000,\"quality\":1,\"demand\":91.28693553777131,\"demandRange\":[80,99],\"competition\":95.40219195944896,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":67811.59026057222,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":94.42834084423184,\"demandRange\":[80,99],\"competition\":94.30052697909909,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":16608.78927635747,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":1000000,\"quality\":1,\"demand\":81.57499518810921,\"demandRange\":[5,99],\"competition\":49.88776546971771,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":79116.54695963403,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":24599.99999999998,\"sizeUsed\":20570.000000000015,\"smartSupplyEnabled\":false,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":953.8247166122886}},\"Ishima\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":41,\"city\":\"Ishima\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":3799.9999999999836,\"quality\":1,\"demand\":76.93758482766204,\"demandRange\":[65,85],\"competition\":54.16466981656973,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":380,\"actualSellAmount\":0,\"productionAmount\":-380,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1426.6931394608118,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[70,90],\"competition\":60,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":7600,\"quality\":3237.6232385068265,\"demand\":40.66355028977024,\"demandRange\":[20,90],\"competition\":63.42581132769667,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":-760,\"importAmount\":760,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2275.805781644857,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":89.6436257739427,\"demandRange\":[80,90],\"competition\":92.38659008946458,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":8668.422018675634,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":3.374225343577564e-10,\"quality\":16659.31934518952,\"demand\":67.97696019815082,\"demandRange\":[40,70],\"competition\":58.164742499129936,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":760,\"importAmount\":0,\"exports\":[{\"division\":\"Nepplants\",\"city\":\"Ishima\",\"amount\":\"760\"}],\"exportedLastCycle\":760,\"marketPrice\":9629.110405564601,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":30000,\"quality\":1,\"demand\":98.34940469880979,\"demandRange\":[80,99],\"competition\":97.42942303674495,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":67277.01261499408,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":90.01446256167557,\"demandRange\":[80,99],\"competition\":81.67768693942712,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":16786.54564624657,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":1000000,\"quality\":1,\"demand\":30.04955367918108,\"demandRange\":[5,99],\"competition\":52.31016391290768,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":58389.382240668645,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":24599.99999999998,\"sizeUsed\":20570.000000000015,\"smartSupplyEnabled\":false,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":953.0833166457662}},\"Volhaven\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":41,\"city\":\"Volhaven\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":2850,\"quality\":1,\"demand\":76.82474398110793,\"demandRange\":[65,85],\"competition\":52.916313518577915,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":380,\"actualSellAmount\":0,\"productionAmount\":-380,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1523.2554388712595,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":739358297163.6084,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[70,90],\"competition\":60,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":7600,\"quality\":3196.6857786681553,\"demand\":68.11603304208494,\"demandRange\":[20,90],\"competition\":58.448396365741345,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":-760,\"importAmount\":760,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2690.874103904031,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":81.53415518709855,\"demandRange\":[80,90],\"competition\":90.88534723795814,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":6130.062059861696,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":1.8189894035458565e-11,\"quality\":16677.51795057154,\"demand\":53.062053912359424,\"demandRange\":[40,70],\"competition\":64.81244316772542,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":760,\"importAmount\":0,\"exports\":[{\"division\":\"Nepplants\",\"city\":\"Volhaven\",\"amount\":\"760\"}],\"exportedLastCycle\":760,\"marketPrice\":8808.887925983176,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":1239537185910380.5,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":30000,\"quality\":1,\"demand\":92.66479344842456,\"demandRange\":[80,99],\"competition\":85.68461084339474,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":71605.22858941556,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":93.97976806238101,\"demandRange\":[80,99],\"competition\":81.9029609474348,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":12095.070845817228,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":1000000,\"quality\":1,\"demand\":21.522795504764396,\"demandRange\":[5,99],\"competition\":65.18743444557782,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":42614.94185947079,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":24599.99999999998,\"sizeUsed\":20522.5,\"smartSupplyEnabled\":false,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":956.8396635152938}}},\"offices\":{\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Sector-12\",\"size\":354,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":100,\"avgMorale\":100,\"avgIntelligence\":75.33802816901411,\"avgCharisma\":73.81126760563386,\"avgCreativity\":75.23380281690137,\"avgEfficiency\":75.41408450704223,\"totalExperience\":28913.241000000715,\"numEmployees\":354,\"totalSalary\":405124.3314507064,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":419156.12012402766,\"Operations\":61031.37199415138,\"Engineer\":238217.08935730523,\"Business\":0,\"Management\":35911.88945894015,\"Research & Development\":83995.76931363092,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":51,\"Engineer\":201,\"Business\":0,\"Management\":51,\"Research & Development\":51,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":51,\"Engineer\":201,\"Business\":0,\"Management\":51,\"Research & Development\":51,\"Intern\":0,\"Unassigned\":0}}},\"Aevum\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Aevum\",\"size\":354,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":100,\"avgMorale\":100,\"avgIntelligence\":75.23661971830981,\"avgCharisma\":75.02535211267606,\"avgCreativity\":74.56901408450705,\"avgEfficiency\":75.95774647887328,\"totalExperience\":29096.891000000724,\"numEmployees\":354,\"totalSalary\":406728.3068028191,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":420110.804606601,\"Operations\":61117.722721055194,\"Engineer\":239020.15693130853,\"Business\":0,\"Management\":36150.57934077354,\"Research & Development\":83822.34561346381,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":51,\"Engineer\":201,\"Business\":0,\"Management\":51,\"Research & Development\":51,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":51,\"Engineer\":201,\"Business\":0,\"Management\":51,\"Research & Development\":51,\"Intern\":0,\"Unassigned\":0}}},\"Chongqing\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Chongqing\",\"size\":354,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":100,\"avgMorale\":100,\"avgIntelligence\":76.26478873239438,\"avgCharisma\":74.02253521126752,\"avgCreativity\":73.33521126760564,\"avgEfficiency\":75.27605633802817,\"totalExperience\":28405.408000000727,\"numEmployees\":354,\"totalSalary\":402646.5282253542,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":419089.49624979764,\"Operations\":60769.62454237293,\"Engineer\":238898.56353115346,\"Business\":0,\"Management\":35690.22369730253,\"Research & Development\":83731.08447896874,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":51,\"Engineer\":201,\"Business\":0,\"Management\":51,\"Research & Development\":51,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":51,\"Engineer\":201,\"Business\":0,\"Management\":51,\"Research & Development\":51,\"Intern\":0,\"Unassigned\":0}}},\"New Tokyo\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"New Tokyo\",\"size\":354,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":100,\"avgMorale\":100,\"avgIntelligence\":74.84507042253514,\"avgCharisma\":75.89577464788741,\"avgCreativity\":75.58028169014085,\"avgEfficiency\":74.99718309859156,\"totalExperience\":28400.81850000073,\"numEmployees\":354,\"totalSalary\":405202.5005704248,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":417011.2371651174,\"Operations\":60775.60052631897,\"Engineer\":236542.38848015666,\"Business\":0,\"Management\":35971.24052631902,\"Research & Development\":83722.00763232273,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":51,\"Engineer\":201,\"Business\":0,\"Management\":51,\"Research & Development\":51,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":51,\"Engineer\":201,\"Business\":0,\"Management\":51,\"Research & Development\":51,\"Intern\":0,\"Unassigned\":0}}},\"Ishima\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Ishima\",\"size\":354,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":100,\"avgMorale\":100,\"avgIntelligence\":73.86197183098591,\"avgCharisma\":74.57746478873231,\"avgCreativity\":73.34647887323938,\"avgEfficiency\":76.17464788732399,\"totalExperience\":28391.316000000734,\"numEmployees\":354,\"totalSalary\":401608.06630986126,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":415937.15184908145,\"Operations\":60578.549550250704,\"Engineer\":236781.2704604922,\"Business\":0,\"Management\":35970.15884602538,\"Research & Development\":82607.17299231318,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":51,\"Engineer\":201,\"Business\":0,\"Management\":51,\"Research & Development\":51,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":51,\"Engineer\":201,\"Business\":0,\"Management\":51,\"Research & Development\":51,\"Intern\":0,\"Unassigned\":0}}},\"Volhaven\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Volhaven\",\"size\":354,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":100,\"avgMorale\":100,\"avgIntelligence\":74.4507042253521,\"avgCharisma\":76.45070422535217,\"avgCreativity\":75.36619718309856,\"avgEfficiency\":76.40563380281692,\"totalExperience\":28907.641000000738,\"numEmployees\":354,\"totalSalary\":408161.90328169236,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":419825.35925508523,\"Operations\":61231.57704547629,\"Engineer\":238412.01761225867,\"Business\":0,\"Management\":36437.546341250985,\"Research & Development\":83744.2182560993,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":51,\"Engineer\":201,\"Business\":0,\"Management\":51,\"Research & Development\":51,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":51,\"Engineer\":201,\"Business\":0,\"Management\":51,\"Research & Development\":51,\"Intern\":0,\"Unassigned\":0}}}},\"numAdVerts\":0}}],[\"Nepsmokes\",{\"ctor\":\"Division\",\"data\":{\"name\":\"Nepsmokes\",\"type\":\"Tobacco\",\"researchPoints\":84848.65647685801,\"researched\":{\"ctor\":\"JSONSet\",\"data\":[\"Hi-Tech R&D Laboratory\",\"Market-TA.I\",\"Market-TA.II\",\"Drones\",\"Drones - Assembly\",\"Self-Correcting Assemblers\",\"uPgrade: Fulcrum\",\"Overclock\",\"Sti.mu\",\"Automatic Drug Administration\",\"Go-Juice\",\"CPH4 Injections\"]},\"requiredMaterials\":{\"Plants\":1},\"producedMaterials\":[],\"products\":{\"ctor\":\"JSONMap\",\"data\":[[\"Neparette 32\",{\"ctor\":\"Product\",\"data\":{\"name\":\"Neparette 32\",\"demand\":99.83400000000039,\"competition\":39.16599999999961,\"markup\":0.10221883296122376,\"productionCost\":16245.06593407765,\"finished\":true,\"developmentProgress\":100,\"creationCity\":\"Sector-12\",\"designInvestment\":10000000000,\"advertisingInvestment\":10000000000,\"creationJobFactors\":{\"Operations\":140711.1625973344,\"Engineer\":139186.92755797354,\"Business\":0,\"Management\":82594.20147057385,\"Research & Development\":0,\"total\":362492.2916258817,\"Intern\":null,\"Unassigned\":null},\"rating\":290033.0098166855,\"stats\":{\"quality\":335173.8851158627,\"performance\":407172.9026723157,\"durability\":251377.50555283797,\"reliability\":263909.5072610207,\"aesthetics\":151367.69840148912,\"features\":358269.95864905784},\"cityData\":{\"Aevum\":{\"stored\":0,\"productionAmount\":495.80561647561046,\"actualSellAmount\":495.80561647561046,\"effectiveRating\":290033.0098166855,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0},\"Chongqing\":{\"stored\":0,\"productionAmount\":493.66233986070165,\"actualSellAmount\":493.66233986070165,\"effectiveRating\":290033.0098166855,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0},\"Sector-12\":{\"stored\":0,\"productionAmount\":525.3873237294185,\"actualSellAmount\":525.3873237294187,\"effectiveRating\":290033.0098166855,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0},\"New Tokyo\":{\"stored\":0,\"productionAmount\":496.2380641215089,\"actualSellAmount\":496.23806412150896,\"effectiveRating\":290033.0098166855,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0},\"Ishima\":{\"stored\":9.094947017729282e-13,\"productionAmount\":497.9648306334807,\"actualSellAmount\":497.9648306334806,\"effectiveRating\":290033.0098166855,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0},\"Volhaven\":{\"stored\":0,\"productionAmount\":494.0003673757101,\"actualSellAmount\":494.0003673757102,\"effectiveRating\":290033.0098166855,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0}},\"size\":0.05,\"requiredMaterials\":{\"Plants\":1},\"marketTa1\":false,\"marketTa2\":true,\"uiMarketPrice\":{\"Aevum\":21641664099.563766,\"Chongqing\":21688595168.260033,\"Sector-12\":21023579639.31432,\"New Tokyo\":21632237045.664692,\"Ishima\":21594697527.165745,\"Volhaven\":21681174536.437523},\"maxSellAmount\":494.00036737571014}}],[\"Neparette 33\",{\"ctor\":\"Product\",\"data\":{\"name\":\"Neparette 33\",\"demand\":99.90120000000023,\"competition\":19.098800000000068,\"markup\":0.1005741653878276,\"productionCost\":16245.06593407765,\"finished\":true,\"developmentProgress\":100,\"creationCity\":\"Sector-12\",\"designInvestment\":10000000000,\"advertisingInvestment\":10000000000,\"creationJobFactors\":{\"Operations\":140733.4636843424,\"Engineer\":139220.37918848544,\"Business\":0,\"Management\":82616.5025575819,\"Research & Development\":0,\"total\":362570.34543040977,\"Intern\":null,\"Unassigned\":null},\"rating\":297336.0463064311,\"stats\":{\"quality\":343614.36351616617,\"performance\":417425.65884561243,\"durability\":257700.44741787025,\"reliability\":270550.522497091,\"aesthetics\":155179.73551663887,\"features\":367286.48436055344},\"cityData\":{\"Aevum\":{\"stored\":0,\"productionAmount\":495.80561647561046,\"actualSellAmount\":495.80561647561046,\"effectiveRating\":297336.0463064311,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0},\"Chongqing\":{\"stored\":0,\"productionAmount\":493.66233986070165,\"actualSellAmount\":493.66233986070165,\"effectiveRating\":297336.0463064311,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0},\"Sector-12\":{\"stored\":9.094947017729282e-13,\"productionAmount\":525.3873237294185,\"actualSellAmount\":525.3873237294184,\"effectiveRating\":297336.0463064311,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0},\"New Tokyo\":{\"stored\":9.094947017729282e-13,\"productionAmount\":496.2380641215089,\"actualSellAmount\":496.2380641215088,\"effectiveRating\":297336.0463064311,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0},\"Ishima\":{\"stored\":9.094947017729282e-13,\"productionAmount\":497.9648306334807,\"actualSellAmount\":497.9648306334806,\"effectiveRating\":297336.0463064311,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0},\"Volhaven\":{\"stored\":9.094947017729282e-13,\"productionAmount\":494.0003673757101,\"actualSellAmount\":494.00036737570997,\"effectiveRating\":297336.0463064311,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0}},\"size\":0.05,\"requiredMaterials\":{\"Plants\":1},\"marketTa1\":false,\"marketTa2\":true,\"uiMarketPrice\":{\"Aevum\":26223642943.8598,\"Chongqing\":26280509763.48878,\"Sector-12\":25474696593.73868,\"New Tokyo\":26212218967.531372,\"Ishima\":26166731671.540665,\"Volhaven\":26271517817.957462},\"maxSellAmount\":494.00036737570997}}],[\"Neparette 34\",{\"ctor\":\"Product\",\"data\":{\"name\":\"Neparette 34\",\"demand\":99.97800000000005,\"competition\":40.02199999999995,\"markup\":0.09908113771462866,\"productionCost\":16245.06593407765,\"finished\":true,\"developmentProgress\":100,\"creationCity\":\"Sector-12\",\"designInvestment\":10000000000,\"advertisingInvestment\":10000000000,\"creationJobFactors\":{\"Operations\":140596.6190102914,\"Engineer\":139096.39241401173,\"Business\":0,\"Management\":82545.3753629524,\"Research & Development\":0,\"total\":362238.3867872558,\"Intern\":null,\"Unassigned\":null},\"rating\":304230.69089145155,\"stats\":{\"quality\":351582.92479507596,\"performance\":427105.08618537657,\"durability\":263669.1123950773,\"reliability\":276819.7323134268,\"aesthetics\":158778.66147695336,\"features\":375798.31408929185},\"cityData\":{\"Aevum\":{\"stored\":0,\"productionAmount\":495.80561647561046,\"actualSellAmount\":495.8056164756105,\"effectiveRating\":304230.69089145155,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0},\"Chongqing\":{\"stored\":1.8189894035458565e-12,\"productionAmount\":493.66233986070165,\"actualSellAmount\":493.6623398607015,\"effectiveRating\":304230.69089145155,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0},\"Sector-12\":{\"stored\":9.094947017729282e-13,\"productionAmount\":525.3873237294185,\"actualSellAmount\":525.3873237294184,\"effectiveRating\":304230.69089145155,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0},\"New Tokyo\":{\"stored\":0,\"productionAmount\":496.2380641215089,\"actualSellAmount\":496.2380641215089,\"effectiveRating\":304230.69089145155,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0},\"Ishima\":{\"stored\":0,\"productionAmount\":497.9648306334807,\"actualSellAmount\":497.9648306334808,\"effectiveRating\":304230.69089145155,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0},\"Volhaven\":{\"stored\":9.094947017729282e-13,\"productionAmount\":494.0003673757101,\"actualSellAmount\":494.00036737570997,\"effectiveRating\":304230.69089145155,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0}},\"size\":0.05,\"requiredMaterials\":{\"Plants\":1},\"marketTa1\":false,\"marketTa2\":true,\"uiMarketPrice\":{\"Aevum\":23635776293.997837,\"Chongqing\":23687031477.39849,\"Sector-12\":22960739739.631977,\"New Tokyo\":23625480164.20317,\"Ishima\":23584481712.227318,\"Volhaven\":23678926997.846756},\"maxSellAmount\":494.00036737570997}}]]},\"makesProducts\":true,\"awareness\":2457546511549656,\"popularity\":3736901872468632,\"startingCost\":20000000000,\"realEstateFactor\":0.15,\"researchFactor\":0.75,\"hardwareFactor\":0.15,\"robotFactor\":0.2,\"aiCoreFactor\":0.15,\"advertisingFactor\":0.2,\"productionMult\":26.79358448697221,\"lastCycleRevenue\":213697394097508.22,\"lastCycleExpenses\":1212131.8582711327,\"thisCycleRevenue\":0,\"thisCycleExpenses\":2424273.274542265,\"state\":\"START\",\"newInd\":false,\"warehouses\":{\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":56,\"city\":\"Sector-12\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[65,85],\"competition\":50,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[70,90],\"competition\":60,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":21599.66138179163,\"quality\":3227.376663468783,\"demand\":52.05399995482809,\"demandRange\":[20,90],\"competition\":31.266626687063244,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":1463.8380288117444,\"productionAmount\":-1576.1619711882556,\"importAmount\":3040.000000000001,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":3319.523903995901,\"productionLimit\":null,\"desiredSellAmount\":\"3040+PROD\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":3323.870953508409,\"maxSellPerCycle\":31021165225.486233,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":86.89753614511622,\"demandRange\":[80,90],\"competition\":90.38054781489086,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":8082.982729590311,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":55,\"demandRange\":[40,70],\"competition\":60,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":9000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":30000,\"quality\":1,\"demand\":92.80912042705471,\"demandRange\":[80,99],\"competition\":98.85581297775583,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":70815.65775685389,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":10000,\"quality\":1,\"demand\":96.71329776477526,\"demandRange\":[80,99],\"competition\":96.95699366003444,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":13868.065378390735,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":1000000,\"quality\":1,\"demand\":98.61310782151098,\"demandRange\":[5,99],\"competition\":46.0240418441383,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":99365.47366746269,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":33599.99999999998,\"sizeUsed\":22868.06405468371,\"smartSupplyEnabled\":false,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":1576.1619711882556}},\"Aevum\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":41,\"city\":\"Aevum\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[65,85],\"competition\":50,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[70,90],\"competition\":60,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":26673.999999999694,\"quality\":3230.5658760815254,\"demand\":53.982732844670785,\"demandRange\":[20,90],\"competition\":59.209618527217515,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":1552.5831505731685,\"productionAmount\":-1487.4168494268315,\"importAmount\":3039.999999999999,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2567.453053766565,\"productionLimit\":null,\"desiredSellAmount\":\"3040+PROD\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":2561.4400506385477,\"maxSellPerCycle\":18820023417.03019,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":81.52934842773334,\"demandRange\":[80,90],\"competition\":65.93520377027089,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":8085.264658124714,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":55,\"demandRange\":[40,70],\"competition\":60,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":9000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":30000,\"quality\":1,\"demand\":88.46113368217223,\"demandRange\":[80,99],\"competition\":90.43339251452363,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":67717.64071720929,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":88.60695753764628,\"demandRange\":[80,99],\"competition\":96.5672085337527,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":20037.13310969174,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":1000000,\"quality\":1,\"demand\":48.06219329494199,\"demandRange\":[5,99],\"competition\":68.7093805050558,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":68049.11255391638,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":24599.99999999998,\"sizeUsed\":22077.4084247134,\"smartSupplyEnabled\":false,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":1487.4168494268315}},\"Chongqing\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":41,\"city\":\"Chongqing\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[65,85],\"competition\":50,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[70,90],\"competition\":60,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":26814.999999999498,\"quality\":3208.4538082090667,\"demand\":82.05346716377703,\"demandRange\":[20,90],\"competition\":38.61257932255665,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":1559.012980417895,\"productionAmount\":-1480.987019582105,\"importAmount\":3040,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":3046.24773263108,\"productionLimit\":null,\"desiredSellAmount\":\"3040+PROD\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":3046.24773263108,\"maxSellPerCycle\":43221644557.53715,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":88.73801645019229,\"demandRange\":[80,90],\"competition\":83.70508410512481,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":7621.365545895289,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":55,\"demandRange\":[40,70],\"competition\":60,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":9000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":30000,\"quality\":1,\"demand\":97.595420479974,\"demandRange\":[80,99],\"competition\":82.3872492465631,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":79464.66178527578,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":95.94348753680333,\"demandRange\":[80,99],\"competition\":87.7611983775494,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":14186.789068312775,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":1000000,\"quality\":1,\"demand\":15.501855706387929,\"demandRange\":[5,99],\"competition\":68.93840616893976,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":54072.759718917034,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":24599.99999999998,\"sizeUsed\":22081.24350979103,\"smartSupplyEnabled\":false,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":1480.987019582105}},\"New Tokyo\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":41,\"city\":\"New Tokyo\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[65,85],\"competition\":50,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[70,90],\"competition\":60,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":26639.99999999961,\"quality\":3207.438703440913,\"demand\":69.87088597961367,\"demandRange\":[20,90],\"competition\":42.998702214610994,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":1551.2858076354732,\"productionAmount\":-1488.7141923645268,\"importAmount\":3039.999999999999,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":3520.640368935429,\"productionLimit\":null,\"desiredSellAmount\":\"3040+PROD\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":3527.718817004123,\"maxSellPerCycle\":34363784408.034355,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":86.12340504316136,\"demandRange\":[80,90],\"competition\":88.34882660126699,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":7617.937942976172,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":55,\"demandRange\":[40,70],\"competition\":60,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":9000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":30000,\"quality\":1,\"demand\":91.75843600270962,\"demandRange\":[80,99],\"competition\":87.88565111458998,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":75032.1289075995,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":89.24758352308639,\"demandRange\":[80,99],\"competition\":87.8048473779245,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":17448.633783950532,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":1000000,\"quality\":1,\"demand\":53.95425503472901,\"demandRange\":[5,99],\"competition\":27.348602883235955,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":126279.63991981477,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":24599.99999999998,\"sizeUsed\":22076.357096182237,\"smartSupplyEnabled\":false,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":1488.7141923645268}},\"Ishima\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":41,\"city\":\"Ishima\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[65,85],\"competition\":50,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[70,90],\"competition\":60,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":26531.999999999705,\"quality\":3237.6013087119595,\"demand\":64.72854770057454,\"demandRange\":[20,90],\"competition\":33.980920686739786,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":1546.105508099558,\"productionAmount\":-1493.894491900442,\"importAmount\":3040,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":3439.725695295281,\"productionLimit\":null,\"desiredSellAmount\":\"3040+PROD\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":3429.48347272492,\"maxSellPerCycle\":36747279688.67866,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":85.43060828105955,\"demandRange\":[80,90],\"competition\":78.31625818675758,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":7622.935459498732,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":55,\"demandRange\":[40,70],\"competition\":60,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":9000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":30000,\"quality\":1,\"demand\":87.25525752011039,\"demandRange\":[80,99],\"competition\":82.52556288820065,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":73079.39984776113,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":82.04642429206122,\"demandRange\":[80,99],\"competition\":84.45332206331395,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":16927.538586849336,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":1000000,\"quality\":1,\"demand\":40.568251139626355,\"demandRange\":[5,99],\"competition\":63.66107674011384,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":77282.23419698367,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":24599.99999999998,\"sizeUsed\":22073.5472459502,\"smartSupplyEnabled\":false,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":1493.894491900442}},\"Volhaven\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":41,\"city\":\"Volhaven\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[65,85],\"competition\":50,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[70,90],\"competition\":60,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":26792.9999999997,\"quality\":3196.663130250591,\"demand\":56.149021983872686,\"demandRange\":[20,90],\"competition\":55.82085856928748,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":1557.9988978728697,\"productionAmount\":-1482.0011021271303,\"importAmount\":3040,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":3249.503712690318,\"productionLimit\":null,\"desiredSellAmount\":\"3040+PROD\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":3249.01318681553,\"maxSellPerCycle\":20998534240.114914,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":87.02766818097935,\"demandRange\":[80,90],\"competition\":68.73790223529902,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":7060.705561578894,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":55,\"demandRange\":[40,70],\"competition\":60,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":9000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":30000,\"quality\":1,\"demand\":99,\"demandRange\":[80,99],\"competition\":97.14621920721582,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":72224.41143701742,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":82.14132999510313,\"demandRange\":[80,99],\"competition\":86.91853268721461,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":13524.04360361085,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":1000000,\"quality\":1,\"demand\":44.68757687435877,\"demandRange\":[5,99],\"competition\":53.89766768688019,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":78399.39913219462,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":24599.99999999998,\"sizeUsed\":22080.65055106355,\"smartSupplyEnabled\":false,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":1482.0011021271303}}},\"offices\":{\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Sector-12\",\"size\":354,\"maxEnergy\":110,\"maxMorale\":110,\"avgEnergy\":110,\"avgMorale\":100.31776399775971,\"avgIntelligence\":75.50140845070423,\"avgCharisma\":73.7295774647887,\"avgCreativity\":75.7070422535212,\"avgEfficiency\":74.52957746478872,\"totalExperience\":28968.276500000622,\"numEmployees\":354,\"totalSalary\":404939.42668310046,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":517263.14586589,\"Operations\":199847.66753830414,\"Engineer\":205072.30628249195,\"Business\":0,\"Management\":112343.17204509392,\"Research & Development\":0,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":118,\"Engineer\":118,\"Business\":0,\"Management\":118,\"Research & Development\":0,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":118,\"Engineer\":118,\"Business\":0,\"Management\":118,\"Research & Development\":0,\"Intern\":0,\"Unassigned\":0}}},\"Aevum\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Aevum\",\"size\":354,\"maxEnergy\":110,\"maxMorale\":110,\"avgEnergy\":110,\"avgMorale\":100.31710827233415,\"avgIntelligence\":74.47042253521134,\"avgCharisma\":75.1014084507042,\"avgCreativity\":75.04788732394356,\"avgEfficiency\":75.40563380281682,\"totalExperience\":28489.452500000632,\"numEmployees\":354,\"totalSalary\":404095.28144366376,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":560028.883415136,\"Operations\":170914.35520449703,\"Engineer\":175151.33729184396,\"Business\":0,\"Management\":96887.82924177965,\"Research & Development\":117075.36167701539,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":101,\"Engineer\":101,\"Business\":0,\"Management\":101,\"Research & Development\":51,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":101,\"Engineer\":101,\"Business\":0,\"Management\":101,\"Research & Development\":51,\"Intern\":0,\"Unassigned\":0}}},\"Chongqing\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Chongqing\",\"size\":354,\"maxEnergy\":110,\"maxMorale\":110,\"avgEnergy\":110,\"avgMorale\":100.31779507273157,\"avgIntelligence\":74.36338028169013,\"avgCharisma\":75.85633802816905,\"avgCreativity\":75.06478873239432,\"avgEfficiency\":73.75774647887324,\"totalExperience\":28175.785000000637,\"numEmployees\":354,\"totalSalary\":402110.2282394385,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":554378.3468313091,\"Operations\":168996.63356339213,\"Engineer\":173131.08372740287,\"Business\":0,\"Management\":95740.32153617377,\"Research & Development\":116510.3080043404,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":101,\"Engineer\":101,\"Business\":0,\"Management\":101,\"Research & Development\":51,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":101,\"Engineer\":101,\"Business\":0,\"Management\":101,\"Research & Development\":51,\"Intern\":0,\"Unassigned\":0}}},\"New Tokyo\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"New Tokyo\",\"size\":354,\"maxEnergy\":110,\"maxMorale\":110,\"avgEnergy\":110,\"avgMorale\":100.31669341442917,\"avgIntelligence\":73.3408450704225,\"avgCharisma\":75.14084507042264,\"avgCreativity\":75.54929577464797,\"avgEfficiency\":75.94084507042247,\"totalExperience\":28712.906000000643,\"numEmployees\":354,\"totalSalary\":404708.8025070443,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":559668.905216495,\"Operations\":171046.73123071654,\"Engineer\":174619.03226035344,\"Business\":0,\"Management\":97455.40278568277,\"Research & Development\":116547.73893974232,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":101,\"Engineer\":101,\"Business\":0,\"Management\":101,\"Research & Development\":51,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":101,\"Engineer\":101,\"Business\":0,\"Management\":101,\"Research & Development\":51,\"Intern\":0,\"Unassigned\":0}}},\"Ishima\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Ishima\",\"size\":354,\"maxEnergy\":110,\"maxMorale\":110,\"avgEnergy\":110,\"avgMorale\":100.31597371684173,\"avgIntelligence\":74.72676056338027,\"avgCharisma\":74.83943661971831,\"avgCreativity\":75.2338028169014,\"avgEfficiency\":76.94929577464788,\"totalExperience\":28634.483000000648,\"numEmployees\":354,\"totalSalary\":406361.2011126779,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":565859.6740878861,\"Operations\":172855.54302157476,\"Engineer\":177145.52477870535,\"Business\":0,\"Management\":98059.20796096415,\"Research & Development\":117799.39832664187,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":101,\"Engineer\":101,\"Business\":0,\"Management\":101,\"Research & Development\":51,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":101,\"Engineer\":101,\"Business\":0,\"Management\":101,\"Research & Development\":51,\"Intern\":0,\"Unassigned\":0}}},\"Volhaven\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Volhaven\",\"size\":354,\"maxEnergy\":110,\"maxMorale\":110,\"avgEnergy\":110,\"avgMorale\":100.31639153437261,\"avgIntelligence\":74.2338028169014,\"avgCharisma\":75.20281690140857,\"avgCreativity\":75.01408450704226,\"avgEfficiency\":74.1239436619719,\"totalExperience\":28324.01950000065,\"numEmployees\":354,\"totalSalary\":402058.3345563401,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":555156.2215724253,\"Operations\":169320.59704720398,\"Engineer\":173444.4804687187,\"Business\":0,\"Management\":95891.68889575452,\"Research & Development\":116499.45516074814,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":101,\"Engineer\":101,\"Business\":0,\"Management\":101,\"Research & Development\":51,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":101,\"Engineer\":101,\"Business\":0,\"Management\":101,\"Research & Development\":51,\"Intern\":0,\"Unassigned\":0}}}},\"numAdVerts\":318}}],[\"Nepwater\",{\"ctor\":\"Division\",\"data\":{\"name\":\"Nepwater\",\"type\":\"Water Utilities\",\"researchPoints\":10888.472216988497,\"researched\":{\"ctor\":\"JSONSet\",\"data\":[]},\"requiredMaterials\":{\"Hardware\":0.1},\"producedMaterials\":[\"Water\"],\"products\":{\"ctor\":\"JSONMap\",\"data\":[]},\"makesProducts\":false,\"awareness\":0,\"popularity\":0,\"startingCost\":150000000000,\"realEstateFactor\":0.5,\"researchFactor\":0.6,\"hardwareFactor\":0,\"robotFactor\":0.4,\"aiCoreFactor\":0.4,\"advertisingFactor\":0.08,\"productionMult\":171.43259442254924,\"lastCycleRevenue\":0,\"lastCycleExpenses\":89187.10724522368,\"thisCycleRevenue\":0,\"thisCycleExpenses\":178374.91649044742,\"state\":\"START\",\"newInd\":true,\"warehouses\":{\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":55,\"city\":\"Sector-12\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":777.3737227159806,\"demand\":78.01321493848276,\"demandRange\":[65,85],\"competition\":51.44138349025293,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":219.99999999999963,\"productionAmount\":2499.9999999999995,\"importAmount\":0,\"exports\":[{\"division\":\"Nepchem\",\"city\":\"Sector-12\",\"amount\":\"380\"},{\"division\":\"Nepplants\",\"city\":\"Sector-12\",\"amount\":\"1900\"}],\"exportedLastCycle\":2280,\"marketPrice\":1534.4350637799976,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":599174731951545.1,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[70,90],\"competition\":60,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":70,\"demandRange\":[20,90],\"competition\":50,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":3000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":2500,\"quality\":1292.828060446522,\"demand\":81.89764936635908,\"demandRange\":[80,90],\"competition\":82.94820358495052,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":-250,\"importAmount\":250,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":7686.277563142522,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":311837904452.7586,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":55,\"demandRange\":[40,70],\"competition\":60,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":9000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":3000,\"quality\":1,\"demand\":82.58540752923426,\"demandRange\":[80,99],\"competition\":81.69032885931611,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":70846.93763104921,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":100000,\"quality\":1,\"demand\":99,\"demandRange\":[80,99],\"competition\":88.97702581573954,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":17087.456864225802,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":2000000,\"quality\":1,\"demand\":36.0040072522053,\"demandRange\":[5,99],\"competition\":68.23132961936153,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":61728.85589400614,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":32999.99999999998,\"sizeUsed\":21650,\"smartSupplyEnabled\":false,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":2827.7362160742623}}},\"offices\":{\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Sector-12\",\"size\":156,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":100,\"avgMorale\":100,\"avgIntelligence\":74.9745222929936,\"avgCharisma\":76.9235668789809,\"avgCreativity\":75.44585987261144,\"avgEfficiency\":76.50955414012739,\"totalExperience\":12057.15900000052,\"numEmployees\":156,\"totalSalary\":178374.91649044742,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":184865.5962434717,\"Operations\":46780.58656528671,\"Engineer\":46176.5894020702,\"Business\":0,\"Management\":27754.647711783546,\"Research & Development\":64153.77256433122,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":39,\"Engineer\":39,\"Business\":0,\"Management\":39,\"Research & Development\":39,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":39,\"Engineer\":39,\"Business\":0,\"Management\":39,\"Research & Development\":39,\"Intern\":0,\"Unassigned\":0}}}},\"numAdVerts\":0}}],[\"Nepware\",{\"ctor\":\"Division\",\"data\":{\"name\":\"Nepware\",\"type\":\"Computer Hardware\",\"researchPoints\":9737.550658486884,\"researched\":{\"ctor\":\"JSONSet\",\"data\":[]},\"requiredMaterials\":{\"Metal\":2},\"producedMaterials\":[\"Hardware\"],\"products\":{\"ctor\":\"JSONMap\",\"data\":[]},\"makesProducts\":true,\"awareness\":0,\"popularity\":0,\"startingCost\":500000000000,\"realEstateFactor\":0.2,\"researchFactor\":0.62,\"hardwareFactor\":0,\"robotFactor\":0.36,\"aiCoreFactor\":0.19,\"advertisingFactor\":0.17,\"productionMult\":18.64747565112825,\"lastCycleRevenue\":0,\"lastCycleExpenses\":171525.57210097663,\"thisCycleRevenue\":0,\"thisCycleExpenses\":343052.52120195323,\"state\":\"START\",\"newInd\":false,\"warehouses\":{\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":55,\"city\":\"Sector-12\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[65,85],\"competition\":50,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[70,90],\"competition\":60,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":70,\"demandRange\":[20,90],\"competition\":50,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":3000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":6250,\"quality\":594.341730153049,\"demand\":77.10811760251856,\"demandRange\":[75,85],\"competition\":65.685296525925,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":-625,\"importAmount\":625,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2483.6514582055606,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":258440167481041.53,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1292.828060446522,\"demand\":82.11549526584089,\"demandRange\":[80,90],\"competition\":77.59785344153337,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":312.5,\"importAmount\":0,\"exports\":[{\"division\":\"Nepwater\",\"city\":\"Sector-12\",\"amount\":\"250\"},{\"division\":\"Nepmining\",\"city\":\"Sector-12\",\"amount\":\"625\"}],\"exportedLastCycle\":312.5,\"marketPrice\":7639.872777468479,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":50182035827385.44,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":55,\"demandRange\":[40,70],\"competition\":60,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":9000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":30000,\"quality\":1,\"demand\":82.60780255427572,\"demandRange\":[80,99],\"competition\":96.28085237733046,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":66361.12944713308,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":100000,\"quality\":1,\"demand\":96.8987338355626,\"demandRange\":[80,99],\"competition\":84.59702240245726,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":15848.112622299954,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":1000000,\"quality\":1,\"demand\":48.48819410886259,\"demandRange\":[5,99],\"competition\":41.850926038815615,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":84192.82288701017,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":32999.99999999998,\"sizeUsed\":30625,\"smartSupplyEnabled\":false,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":393.5599966531079}}},\"offices\":{\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Sector-12\",\"size\":306,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":100,\"avgMorale\":100,\"avgIntelligence\":73.98371335504886,\"avgCharisma\":74.3355048859935,\"avgCreativity\":74.25732899022805,\"avgEfficiency\":74.91205211726384,\"totalExperience\":23319.328999999598,\"numEmployees\":306,\"totalSalary\":343052.52120195323,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":356378.54752706806,\"Operations\":90756.59826947459,\"Engineer\":89629.10457033571,\"Business\":0,\"Management\":52888.953526942016,\"Research & Development\":123103.89116031576,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":77,\"Engineer\":77,\"Business\":0,\"Management\":76,\"Research & Development\":76,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":77,\"Engineer\":77,\"Business\":0,\"Management\":76,\"Research & Development\":76,\"Intern\":0,\"Unassigned\":0}}}},\"numAdVerts\":0}}],[\"Nepmetals\",{\"ctor\":\"Division\",\"data\":{\"name\":\"Nepmetals\",\"type\":\"Refinery\",\"researchPoints\":7843.169036227974,\"researched\":{\"ctor\":\"JSONSet\",\"data\":[]},\"requiredMaterials\":{\"Ore\":1},\"producedMaterials\":[\"Metal\"],\"products\":{\"ctor\":\"JSONMap\",\"data\":[]},\"makesProducts\":false,\"awareness\":0,\"popularity\":0,\"startingCost\":50000000000,\"realEstateFactor\":0.3,\"researchFactor\":0.5,\"hardwareFactor\":0.5,\"robotFactor\":0.4,\"aiCoreFactor\":0.3,\"advertisingFactor\":0.04,\"productionMult\":137.73059427960658,\"lastCycleRevenue\":0,\"lastCycleExpenses\":87896.90073248479,\"thisCycleRevenue\":0,\"thisCycleExpenses\":175794.5034649696,\"state\":\"START\",\"newInd\":false,\"warehouses\":{\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":56,\"city\":\"Sector-12\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[65,85],\"competition\":50,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":43675.6426549449,\"quality\":515.4464149591818,\"demand\":52.376441034931105,\"demandRange\":[40,60],\"competition\":83.54170406266759,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":-625,\"importAmount\":624.9999999999999,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":497.04292220057175,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":87202026805324.2,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[70,90],\"competition\":60,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":70,\"demandRange\":[20,90],\"competition\":50,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":3000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":16007,\"quality\":594.341730153049,\"demand\":83.52480627922752,\"demandRange\":[75,85],\"competition\":72.75779686116368,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":625,\"importAmount\":0,\"exports\":[{\"division\":\"Nepware\",\"city\":\"Sector-12\",\"amount\":\"625\"}],\"exportedLastCycle\":625,\"marketPrice\":2698.296529943963,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":255409638294734,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":100000,\"quality\":1,\"demand\":90,\"demandRange\":[80,90],\"competition\":89.05440809439261,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":7837.462456904187,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":55,\"demandRange\":[40,70],\"competition\":60,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":9000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":20000,\"quality\":1,\"demand\":91.07598161830118,\"demandRange\":[80,99],\"competition\":98.68561024089658,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":76450.89298634828,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":84.47879317434042,\"demandRange\":[80,99],\"competition\":87.32911102611264,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":14601.571045511066,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":3000000,\"quality\":1,\"demand\":44.60425626630215,\"demandRange\":[5,99],\"competition\":43.30753739565769,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":82848.05517768196,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":33599.99999999998,\"sizeUsed\":33037.45642654945,\"smartSupplyEnabled\":false,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":625}}},\"offices\":{\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Sector-12\",\"size\":156,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":100,\"avgMorale\":100,\"avgIntelligence\":74.15286624203823,\"avgCharisma\":74.0828025477707,\"avgCreativity\":74.66242038216556,\"avgEfficiency\":74.89808917197455,\"totalExperience\":12141.964000000475,\"numEmployees\":156,\"totalSalary\":175794.5034649696,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":182246.286459236,\"Operations\":46109.252146496896,\"Engineer\":45533.070257961925,\"Business\":0,\"Management\":27203.542592356785,\"Research & Development\":63400.4214624204,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":39,\"Engineer\":39,\"Business\":0,\"Management\":39,\"Research & Development\":39,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":39,\"Engineer\":39,\"Business\":0,\"Management\":39,\"Research & Development\":39,\"Intern\":0,\"Unassigned\":0}}}},\"numAdVerts\":0}}],[\"Nepmining\",{\"ctor\":\"Division\",\"data\":{\"name\":\"Nepmining\",\"type\":\"Mining\",\"researchPoints\":7813.020765053125,\"researched\":{\"ctor\":\"JSONSet\",\"data\":[]},\"requiredMaterials\":{\"Hardware\":0.1},\"producedMaterials\":[\"Ore\",\"Minerals\"],\"products\":{\"ctor\":\"JSONMap\",\"data\":[]},\"makesProducts\":false,\"awareness\":0,\"popularity\":0,\"startingCost\":300000000000,\"realEstateFactor\":0.3,\"researchFactor\":0.26,\"hardwareFactor\":0.4,\"robotFactor\":0.45,\"aiCoreFactor\":0.45,\"advertisingFactor\":0.06,\"productionMult\":150.69943006154793,\"lastCycleRevenue\":0,\"lastCycleExpenses\":87330.75261783508,\"thisCycleRevenue\":0,\"thisCycleExpenses\":174662.20723567018,\"state\":\"START\",\"newInd\":true,\"warehouses\":{\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":55,\"city\":\"Sector-12\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[65,85],\"competition\":50,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":515.4688534614821,\"demand\":49.87484729712765,\"demandRange\":[40,60],\"competition\":80.83443594024925,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":624.9999999999999,\"importAmount\":0,\"exports\":[{\"division\":\"Nepmetals\",\"city\":\"Sector-12\",\"amount\":\"625\"}],\"exportedLastCycle\":624.9999999999999,\"marketPrice\":493.31464568892784,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":515.4688534614821,\"demand\":60,\"demandRange\":[90,60],\"competition\":85.68770513011482,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":624.9999999999999,\"productionAmount\":624.9999999999999,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":503.4012519754098,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":134875248755171.31,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[70,90],\"competition\":60,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":70,\"demandRange\":[20,90],\"competition\":50,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":3000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":625,\"quality\":1292.828060446522,\"demand\":82.24575607926336,\"demandRange\":[80,90],\"competition\":71.38242749281677,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":-62.5,\"importAmount\":62.5,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":8151.1315314688345,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":55,\"demandRange\":[40,70],\"competition\":60,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":9000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":20000,\"quality\":1,\"demand\":94.89641136254767,\"demandRange\":[80,99],\"competition\":92.20637494542477,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":70749.71766561911,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":100000,\"quality\":1,\"demand\":97.33622150649148,\"demandRange\":[80,99],\"competition\":98.16624809780436,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":14711.991019775705,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":2000000,\"quality\":1,\"demand\":46.873480923891215,\"demandRange\":[5,99],\"competition\":31.2249670856187,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":94679.67901807996,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":32999.99999999998,\"sizeUsed\":30037.5,\"smartSupplyEnabled\":false,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":2465.068872761791}}},\"offices\":{\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Sector-12\",\"size\":156,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":100,\"avgMorale\":100,\"avgIntelligence\":75,\"avgCharisma\":74.11464968152865,\"avgCreativity\":73.95541401273881,\"avgEfficiency\":74.21019108280255,\"totalExperience\":11845.016000000469,\"numEmployees\":156,\"totalSalary\":174662.20723567018,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":181717.6597159239,\"Operations\":45889.59731210198,\"Engineer\":45465.310299363184,\"Business\":0,\"Management\":26961.72979617844,\"Research & Development\":63401.02230828027,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":39,\"Engineer\":39,\"Business\":0,\"Management\":39,\"Research & Development\":39,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":39,\"Engineer\":39,\"Business\":0,\"Management\":39,\"Research & Development\":39,\"Intern\":0,\"Unassigned\":0}}}},\"numAdVerts\":0}}]]},\"maxDivisions\":20,\"funds\":136124906521689810,\"revenue\":213697394097508.22,\"expenses\":20976026.59082023,\"fundingRound\":4,\"public\":true,\"totalShares\":1500000000,\"numShares\":100000000,\"shareSalesUntilPriceUpdate\":1000000,\"shareSaleCooldown\":0,\"issueNewSharesCooldown\":0,\"dividendRate\":0.00001,\"dividendTax\":-1.3877787807814457e-17,\"issuedShares\":0,\"sharePrice\":9276771082.743944,\"storedCycles\":0,\"unlocks\":{\"ctor\":\"JSONSet\",\"data\":[\"Warehouse API\",\"Office API\",\"Export\",\"Shady Accounting\",\"Government Partnership\",\"VeChain\"]},\"upgrades\":{\"Smart Factories\":{\"level\":60,\"value\":2.799999999999996},\"Smart Storage\":{\"level\":50,\"value\":5.999999999999996},\"DreamSense\":{\"level\":0,\"value\":0},\"Wilson Analytics\":{\"level\":20,\"value\":1.0999999999999979},\"Nuoptimal Nootropic Injector Implants\":{\"level\":60,\"value\":6.999999999999992},\"Speech Processor Implants\":{\"level\":0,\"value\":1},\"Neural Accelerators\":{\"level\":60,\"value\":6.999999999999992},\"FocusWires\":{\"level\":60,\"value\":6.999999999999992},\"ABC SalesBots\":{\"level\":2,\"value\":1.02},\"Project Insight\":{\"level\":20,\"value\":2.000000000000001}},\"cycleValuation\":35657787291387090000,\"valuationsList\":[35623449568077156000,35627272250387243000,35631140959311704000,35634796254180704000,35638580804102080000,35642437684589683000,35646429869201986000,35650098550947193000,35653949002662630000,35657787291387090000],\"valuation\":35640594223484750000,\"state\":{\"ctor\":\"CorporationState\",\"data\":{\"state\":1}},\"seedFunded\":true}},\"gang\":null,\"bladeburner\":null,\"currentServer\":\"run4theh111z\",\"factions\":[\"BitRunners\",\"The Black Hand\",\"NiteSec\",\"Sector-12\",\"CyberSec\"],\"factionInvitations\":[],\"hacknetNodes\":[],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":false,\"jobs\":{},\"karma\":-1997.9400000000282,\"numPeopleKilled\":0,\"location\":\"Alpha Enterprises\",\"money\":29731888848.19476,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-372288,\"codingcontract\":0,\"corporation\":151758284165.6748,\"crime\":0,\"gang\":0,\"hacking\":0,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":29731887769.19476,\"work\":0,\"servers\":-30279449108.48,\"other\":-19038200000,\"augmentations\":-72708375000}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-55246080,\"codingcontract\":7800000000,\"corporation\":803089762258.199,\"crime\":93911894.3832987,\"gang\":0,\"hacking\":0,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":44118448529.88429,\"work\":0,\"servers\":-53445528792.24721,\"other\":-19351400000,\"augmentations\":-694013050750.4514}},\"playtimeSinceLastAug\":1558400,\"playtimeSinceLastBitnode\":91761800,\"lastAugReset\":1687172478697,\"lastNodeReset\":1687082274935,\"purchasedServers\":[\"s0\",\"s1\",\"s2\",\"s3\",\"s4\",\"s5\",\"s6\",\"s7\",\"s8\",\"s9\",\"s10\",\"s11\",\"s12\",\"s13\",\"s14\",\"s15\",\"s16\",\"s17\",\"s18\",\"s19\",\"s20\",\"s21\",\"s22\",\"s23\",\"s24\"],\"scriptProdSinceLastAug\":0,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[[1,3],[3,1]]},\"exploits\":[\"Unclickable\",\"TimeCompression\",\"UndocumentedFunctionCall\",\"PrototypeTampering\",\"Bypass\",\"RealityAlteration\",\"INeedARainbow\",\"YoureNotMeantToAccessThis\",\"EditSaveFile\",\"N00dles\"],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1685939030492},{\"ID\":\"WORKOUT\",\"unlockedOn\":1685941010477},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1685946050497},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1685946110490},{\"ID\":\"UNCLICKABLE\",\"unlockedOn\":1685949299474},{\"ID\":\"TIMECOMPRESSION\",\"unlockedOn\":1685949916406},{\"ID\":\"UNDOCUMENTEDFUNCTIONCALL\",\"unlockedOn\":1685950396403},{\"ID\":\"PROTOTYPETAMPERING\",\"unlockedOn\":1685950756393},{\"ID\":\"BYPASS\",\"unlockedOn\":1685950996402},{\"ID\":\"REALITYALTERATION\",\"unlockedOn\":1685951176405},{\"ID\":\"RAINBOW\",\"unlockedOn\":1685952556406},{\"ID\":\"TRAVEL\",\"unlockedOn\":1685952736396},{\"ID\":\"DEVMENU\",\"unlockedOn\":1685953096403},{\"ID\":\"EDITSAVEFILE\",\"unlockedOn\":1685954477040},{\"ID\":\"UNACHIEVABLE\",\"unlockedOn\":1685954890060},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1685955655709},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1685957395699},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1685958475694},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1685964295703},{\"ID\":\"NITESEC\",\"unlockedOn\":1686008689171},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1686023013505},{\"ID\":\"TOR\",\"unlockedOn\":1686030651518},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1686031627541},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1686031627549},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1686033885056},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1686084963238},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1686089173549},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1686118837190},{\"ID\":\"DONATION\",\"unlockedOn\":1686196813394},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1686210222414},{\"ID\":\"SF1.1\",\"unlockedOn\":1686271479023},{\"ID\":\"N00DLES\",\"unlockedOn\":1686389195807},{\"ID\":\"FAST_BN\",\"unlockedOn\":1686405508802},{\"ID\":\"CORPORATION\",\"unlockedOn\":1686625850126},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1686907638877},{\"ID\":\"FROZE\",\"unlockedOn\":1687006598420},{\"ID\":\"CORPORATION_BRIBE\",\"unlockedOn\":1687077279367},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1687079199365},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1687081359348},{\"ID\":\"SF3.1\",\"unlockedOn\":1687082319357}],\"terminalCommandHistory\":[\"ps\",\"c\",\"home\",\"ps\",\"kill 47\",\"run scripts/corporations/tea.js \\\"Water Utilities\\\" \\\"Computer Hardware\\\"\",\"kill 49\",\"run scripts/corporations/tea.js \\\"Water Utilities\\\" \\\"Computer Hardware\\\" \\\"Refinery\\\" \\\"Mining\\\"\",\"sa 10\",\"backdoor\",\"buy -l\",\"buy BruteSSH.exe \",\"buy FTPCrack.exe \",\"buy relaySMTP.exe \",\"buy HTTPWorm.exe \",\"buy SQLInject.exe \",\"buy DeepscanV2.exe \",\"buy AutoLink.exe \",\"ps\",\"run scripts/corporations/tea.js \",\"nuke n00dles\",\"run scripts/weaken-all.js n00dles\",\"free\",\"mem scripts/buy-servers.js \",\"sa 3\",\"scp scripts/scp-all.js foodnstuff \",\"scp scripts/utils/constants.js foodnstuff \",\"c foodnstuff \",\"scpa\",\"free\",\"ps\",\"killall\",\"scpa\",\"backdoor\",\"sa 10\",\"backdoor\",\"home\",\"c foodnstuff o\",\"c foodnstuff \",\"run scripts/buy-servers.js \",\"home\",\"ps\",\"kill 3\",\"run scripts/weaken-all.js n00dles\",\"backdoor\",\"home\",\"c foodnstuff \",\"ps\",\"kill 22\",\"backdoor\"],\"lastUpdate\":1687174036937,\"lastSave\":1687173978741,\"totalPlaytime\":1235664600,\"currentWork\":null,\"focus\":false,\"entropy\":0,\"identifier\":\"6700aba73601e\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"69.8.1.4\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[\"hackers-starting-handbook.lit\",\"corporation-management-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"DeepscanV2.exe\",\"AutoLink.exe\",\"fl1ght.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    ns.tprint('Hello Remote API!');\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdGVtcGxhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUE7QUFDaEMsQ0FBQyJ9\",\"filename\":\"template.js\",\"server\":\"home\"}}],[\"scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HOSTS } from 'scripts/utils/constants';\\nexport async function main(ns) {\\n    const serverName = ns.args[0] ?? HOSTS.MAX_HARDWARE;\\n    ns.printf('Hacking %s...', serverName);\\n    const minSecurity = ns.getServerMinSecurityLevel(serverName);\\n    const maxMoney = ns.getServerMaxMoney(serverName);\\n    const targetSecurity = Math.max(1.3 * minSecurity, minSecurity + 5);\\n    const targetMoney = (0.75 * maxMoney);\\n    while (true) {\\n        const curSecurity = ns.getServerSecurityLevel(serverName);\\n        const curMoney = ns.getServerMoneyAvailable(serverName);\\n        if (curSecurity > targetSecurity) {\\n            ns.printf('Lowering difficulty (current: %.3f, target: %.3f)', curSecurity, targetSecurity);\\n            await ns.weaken(serverName);\\n        }\\n        else if (curMoney < targetMoney) {\\n            ns.printf('Increasing available money (current: %s, target: %s)', ns.formatNumber(curMoney), ns.formatNumber(targetMoney));\\n            await ns.grow(serverName);\\n        }\\n        else {\\n            await ns.hack(serverName);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBRS9DLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxVQUFVLEdBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVksSUFBSSxLQUFLLENBQUMsWUFBWSxDQUFBO0lBRS9ELEVBQUUsQ0FBQyxNQUFNLENBQUMsZUFBZSxFQUFFLFVBQVUsQ0FBQyxDQUFBO0lBRXRDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUM1RCxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLENBQUE7SUFFakQsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsV0FBVyxFQUFFLFdBQVcsR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUNuRSxNQUFNLFdBQVcsR0FBRyxDQUFDLElBQUksR0FBRyxRQUFRLENBQVcsQ0FBQTtJQUUvQyxPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUN6RCxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsdUJBQXVCLENBQUMsVUFBVSxDQUFDLENBQUE7UUFFdkQsSUFBSSxXQUFXLEdBQUcsY0FBYyxFQUFFO1lBQ2hDLEVBQUUsQ0FBQyxNQUFNLENBQ1AsbURBQW1ELEVBQ25ELFdBQVcsRUFDWCxjQUFjLENBQ2YsQ0FBQTtZQUVELE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtTQUM1QjthQUFNLElBQUksUUFBUSxHQUFHLFdBQVcsRUFBRTtZQUNqQyxFQUFFLENBQUMsTUFBTSxDQUNQLHNEQUFzRCxFQUN0RCxFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxFQUN6QixFQUFFLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUM3QixDQUFBO1lBRUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1NBQzFCO2FBQU07WUFDTCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUE7U0FDMUI7S0FDRjtBQUNILENBQUMifQ==\",\"filename\":\"scripts/hack.js\",\"server\":\"home\"}}],[\"scripts/nuke.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { FILES, HOSTS } from 'scripts/utils/constants';\\nexport const nuke = (ns, serverName) => {\\n    ns.fileExists(FILES.BRUTE_SSH, HOSTS.HOME) && ns.brutessh(serverName);\\n    ns.fileExists(FILES.FTP_CRACK, HOSTS.HOME) && ns.ftpcrack(serverName);\\n    ns.fileExists(FILES.RELAY_SMTP, HOSTS.HOME) && ns.relaysmtp(serverName);\\n    ns.fileExists(FILES.HTTP_WORM, HOSTS.HOME) && ns.httpworm(serverName);\\n    ns.fileExists(FILES.SQL_INJECT, HOSTS.HOME) && ns.sqlinject(serverName);\\n    ns.nuke(serverName);\\n    if (!ns.hasRootAccess(serverName)) {\\n        ns.tprintf('Failed to nuke %s, aborting.', serverName);\\n        ns.exit();\\n    }\\n};\\nexport async function main(ns) {\\n    if (ns.args.length === 0) {\\n        ns.tprint('Missing server name');\\n        ns.exit();\\n    }\\n    const serverName = ns.args[0];\\n    nuke(ns, serverName);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVrZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL251a2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQTtBQUV0RCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxFQUFNLEVBQUUsVUFBa0IsRUFBRSxFQUFFO0lBQ2pELEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUNyRSxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDckUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQ3ZFLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUNyRSxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUE7SUFFdkUsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUVuQixJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsRUFBRTtRQUNqQyxFQUFFLENBQUMsT0FBTyxDQUFDLDhCQUE4QixFQUFFLFVBQVUsQ0FBQyxDQUFBO1FBQ3RELEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtLQUNWO0FBQ0gsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUN4QixFQUFFLENBQUMsTUFBTSxDQUFDLHFCQUFxQixDQUFDLENBQUE7UUFDaEMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFBO0tBQ1Y7SUFFRCxNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBRXZDLElBQUksQ0FBQyxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUE7QUFDdEIsQ0FBQyJ9\",\"filename\":\"scripts/nuke.js\",\"server\":\"home\"}}],[\"scripts/exploits/unclickable.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main() {\\n    const doc = eval('document');\\n    const el = doc.getElementById('unclickable');\\n    el.style.display = 'block';\\n    el.style.visibility = 'visible';\\n    el.style.height = '20px';\\n    el.style.zIndex = '100';\\n    el.style.backgroundColor = 'red';\\n    el.onmouseup = () => {\\n        el.style.display = 'none';\\n        el.style.visibility = 'hidden';\\n        console.log('mouseup');\\n    };\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5jbGlja2FibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9leHBsb2l0cy91bmNsaWNrYWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUk7SUFDeEIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQzVCLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFFLENBQUE7SUFFN0MsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFBO0lBQzFCLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQTtJQUMvQixFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUE7SUFDeEIsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFBO0lBQ3ZCLEVBQUUsQ0FBQyxLQUFLLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQTtJQUVoQyxFQUFFLENBQUMsU0FBUyxHQUFHLEdBQUcsRUFBRTtRQUNsQixFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUE7UUFDekIsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsUUFBUSxDQUFBO1FBQzlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUE7SUFDeEIsQ0FBQyxDQUFBO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/exploits/unclickable.js\",\"server\":\"home\"}}],[\"scripts/exploits/time-compression.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main() {\\n    const oldNow = performance.now;\\n    performance.now = () => 42;\\n    setTimeout(() => {\\n        performance.now = oldNow;\\n    }, 2000);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1jb21wcmVzc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2V4cGxvaXRzL3RpbWUtY29tcHJlc3Npb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJO0lBQ3hCLE1BQU0sTUFBTSxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUE7SUFDOUIsV0FBVyxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUE7SUFDMUIsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLFdBQVcsQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFBO0lBQzFCLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQTtBQUNWLENBQUMifQ==\",\"filename\":\"scripts/exploits/time-compression.js\",\"server\":\"home\"}}],[\"scripts/exploits/tampering.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main() {\\n    const old = Number.prototype.toExponential;\\n    Number.prototype.toExponential = () => 'a';\\n    setTimeout(() => {\\n        Number.prototype.toExponential = old;\\n    }, 16 * 60 * 1000);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFtcGVyaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhwbG9pdHMvdGFtcGVyaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSTtJQUN4QixNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQTtJQUMxQyxNQUFNLENBQUMsU0FBUyxDQUFDLGFBQWEsR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUE7SUFFMUMsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLE1BQU0sQ0FBQyxTQUFTLENBQUMsYUFBYSxHQUFHLEdBQUcsQ0FBQTtJQUN0QyxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQTtBQUNwQixDQUFDIn0=\",\"filename\":\"scripts/exploits/tampering.js\",\"server\":\"home\"}}],[\"scripts/exploits/exploit.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// @ts-nocheck\\nexport async function main(ns) {\\n    ns.exploit();\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwbG9pdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2V4cGxvaXRzL2V4cGxvaXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYztBQUlkLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFBO0FBQ2QsQ0FBQyJ9\",\"filename\":\"scripts/exploits/exploit.js\",\"server\":\"home\"}}],[\"scripts/exploits/bypass.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// @ts-nocheck\\nexport async function main(ns) {\\n    const doc = eval('document');\\n    ns.bypass(doc);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnlwYXNzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhwbG9pdHMvYnlwYXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWM7QUFJZCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUM1QixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQ2hCLENBQUMifQ==\",\"filename\":\"scripts/exploits/bypass.js\",\"server\":\"home\"}}],[\"scripts/exploits/alter-reality.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// @ts-nocheck\\nexport async function main(ns) {\\n    ns.alterReality();\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWx0ZXItcmVhbGl0eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2V4cGxvaXRzL2FsdGVyLXJlYWxpdHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYztBQVdkLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFBO0FBQ25CLENBQUMifQ==\",\"filename\":\"scripts/exploits/alter-reality.js\",\"server\":\"home\"}}],[\"scripts/exploits/rainbow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// @ts-nocheck\\nexport async function main(ns) {\\n    ns.rainbow('noodles');\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFpbmJvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2V4cGxvaXRzL3JhaW5ib3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYztBQUlkLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQTtBQUN2QixDQUFDIn0=\",\"filename\":\"scripts/exploits/rainbow.js\",\"server\":\"home\"}}],[\"scripts/misc/heartbreak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// @ts-nocheck\\nexport async function main(ns) {\\n    ns.tprint(ns.heart.break());\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhcnRicmVhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL21pc2MvaGVhcnRicmVhay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxjQUFjO0FBSWQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQTtBQUM3QixDQUFDIn0=\",\"filename\":\"scripts/misc/heartbreak.js\",\"server\":\"home\"}}],[\"scripts/buy-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getPurchasedServerName = (id) => `s${id}`;\\nexport async function main(ns) {\\n    const INITIAL_EXP = 8;\\n    for (let e = INITIAL_EXP; e <= 20; e++) {\\n        const ram = Math.pow(2, e);\\n        for (let i = 0; i < ns.getPurchasedServerLimit(); i++) {\\n            ns.print(`Waiting for server ${i}...`);\\n            const hostname = getPurchasedServerName(i);\\n            if (ns.serverExists(hostname) && ns.getServerMaxRam(hostname) >= ram) {\\n                ns.print('Server exists and has enough ram. Skipping...');\\n                continue;\\n            }\\n            const cost = ns.serverExists(hostname)\\n                ? ns.getPurchasedServerUpgradeCost(hostname, ram)\\n                : ns.getPurchasedServerCost(ram);\\n            while (ns.getServerMoneyAvailable('home') < cost) {\\n                await ns.sleep(1000);\\n            }\\n            if (ns.serverExists(hostname)) {\\n                ns.upgradePurchasedServer(hostname, ram);\\n            }\\n            else {\\n                ns.purchaseServer(hostname, ram);\\n            }\\n            ns.toast(`Purchased server ${i}`);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV5LXNlcnZlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9idXktc2VydmVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxDQUFDLEVBQVUsRUFBRSxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQTtBQUU5RCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sV0FBVyxHQUFHLENBQUMsQ0FBQTtJQUVyQixLQUFLLElBQUksQ0FBQyxHQUFHLFdBQVcsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3RDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBRTFCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsdUJBQXVCLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNyRCxFQUFFLENBQUMsS0FBSyxDQUFDLHNCQUFzQixDQUFDLEtBQUssQ0FBQyxDQUFBO1lBQ3RDLE1BQU0sUUFBUSxHQUFHLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxDQUFBO1lBRTFDLElBQUksRUFBRSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsRUFBRTtnQkFDcEUsRUFBRSxDQUFDLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQyxDQUFBO2dCQUN6RCxTQUFRO2FBQ1Q7WUFFRCxNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQztnQkFDcEMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDO2dCQUNqRCxDQUFDLENBQUMsRUFBRSxDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBRWxDLE9BQU8sRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksRUFBRTtnQkFDaEQsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO2FBQ3JCO1lBRUQsSUFBSSxFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxFQUFFO2dCQUM3QixFQUFFLENBQUMsc0JBQXNCLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFBO2FBQ3pDO2lCQUFNO2dCQUNMLEVBQUUsQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFBO2FBQ2pDO1lBRUQsRUFBRSxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLENBQUMsQ0FBQTtTQUNsQztLQUNGO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/buy-servers.js\",\"server\":\"home\"}}],[\"scripts/nuke-all.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { FILES, HOSTS } from 'scripts/utils/constants';\\nimport { nuke } from 'scripts/nuke';\\nimport { getPurchasedServerName } from 'scripts/buy-servers';\\nimport { getServersByPort } from 'scripts/utils/servers';\\nconst PROGRAMS_LIST = Object.values(FILES);\\nexport async function main(ns) {\\n    const hackTarget = ns.args[0];\\n    for (let i = 0; i < ns.getPurchasedServerLimit(); i++) {\\n        const host = getPurchasedServerName(i);\\n        ns.serverExists(host) && nuke(ns, host, hackTarget);\\n    }\\n    const servers = getServersByPort(ns);\\n    const getRemServersCount = (lists) => lists.reduce((sum, list) => sum + list.length, 0);\\n    while (getRemServersCount(servers) > 0) {\\n        const programCount = PROGRAMS_LIST.reduce((cnt, file) => cnt + (ns.fileExists(file, HOSTS.HOME) ? 1 : 0), 0);\\n        for (let i = 0; i <= programCount; i++) {\\n            if (servers[i].length > 0 &&\\n                ns.getHackingLevel() >= servers[i][0].reqHack) {\\n                nuke(ns, servers[i][0].host, hackTarget);\\n                servers[i] = servers[i].slice(1);\\n            }\\n        }\\n        await ns.sleep(1000);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVrZS1hbGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9udWtlLWFsbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBQ3RELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUE7QUFDbkMsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0scUJBQXFCLENBQUE7QUFDNUQsT0FBTyxFQUFFLGdCQUFnQixFQUFlLE1BQU0sdUJBQXVCLENBQUE7QUFFckUsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUUxQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sVUFBVSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFdkMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3JELE1BQU0sSUFBSSxHQUFHLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3RDLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUE7S0FDcEQ7SUFFRCxNQUFNLE9BQU8sR0FBRyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUVwQyxNQUFNLGtCQUFrQixHQUFHLENBQUMsS0FBaUIsRUFBRSxFQUFFLENBQy9DLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUVuRCxPQUFPLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUN0QyxNQUFNLFlBQVksR0FBRyxhQUFhLENBQUMsTUFBTSxDQUN2QyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDOUQsQ0FBQyxDQUNGLENBQUE7UUFFRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksWUFBWSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3RDLElBQ0UsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDO2dCQUNyQixFQUFFLENBQUMsZUFBZSxFQUFFLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFDN0M7Z0JBQ0EsSUFBSSxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFBO2dCQUN4QyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTthQUNqQztTQUNGO1FBRUQsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3JCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/nuke-all.js\",\"server\":\"home\"}}],[\"scripts/utils/constants.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const FILES = {\\n    BRUTE_SSH: 'BruteSSH.exe',\\n    FTP_CRACK: 'FTPCrack.exe',\\n    RELAY_SMTP: 'relaySMTP.exe',\\n    HTTP_WORM: 'HTTPWorm.exe',\\n    SQL_INJECT: 'SQLInject.exe',\\n};\\nexport const SCRIPTS = {\\n    HACK: 'scripts/hack-v4.js',\\n    CONSTANTS: 'scripts/utils/constants.js',\\n    SIMPLE_HACK: 'scripts/simple-hack.js',\\n    SIMPLE_WEAKEN: 'scripts/simple-weaken.js',\\n    SIMPLE_GROW: 'scripts/simple-grow.js',\\n    TIMER: 'scripts/ui/timer.js',\\n    UTILS_TIME: 'scripts/utils/time.js',\\n};\\nexport const HOSTS = {\\n    HOME: 'home',\\n    JOESGUNS: 'joesguns',\\n    MAX_HARDWARE: 'max-hardware',\\n};\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvdXRpbHMvY29uc3RhbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRztJQUNuQixTQUFTLEVBQUUsY0FBYztJQUN6QixTQUFTLEVBQUUsY0FBYztJQUN6QixVQUFVLEVBQUUsZUFBZTtJQUMzQixTQUFTLEVBQUUsY0FBYztJQUN6QixVQUFVLEVBQUUsZUFBZTtDQUNuQixDQUFBO0FBRVYsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHO0lBQ3JCLElBQUksRUFBRSxvQkFBb0I7SUFDMUIsU0FBUyxFQUFFLDRCQUE0QjtJQUN2QyxXQUFXLEVBQUUsd0JBQXdCO0lBQ3JDLGFBQWEsRUFBRSwwQkFBMEI7SUFDekMsV0FBVyxFQUFFLHdCQUF3QjtJQUNyQyxLQUFLLEVBQUUscUJBQXFCO0lBQzVCLFVBQVUsRUFBRSx1QkFBdUI7Q0FDM0IsQ0FBQTtBQUVWLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRztJQUNuQixJQUFJLEVBQUUsTUFBTTtJQUNaLFFBQVEsRUFBRSxVQUFVO0lBQ3BCLFlBQVksRUFBRSxjQUFjO0NBQzdCLENBQUEifQ==\",\"filename\":\"scripts/utils/constants.js\",\"server\":\"home\"}}],[\"scripts/utils/servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HOSTS } from 'scripts/utils/constants';\\nexport const getServersByPort = (ns) => {\\n    const serversByPort = [[], [], [], [], [], []];\\n    const seen = new Set();\\n    const dfs = (host, prv) => {\\n        const server = {\\n            parent: prv,\\n            host,\\n            ports: ns.getServerNumPortsRequired(host),\\n            reqHack: ns.getServerRequiredHackingLevel(host),\\n            maxMoney: ns.getServerMaxMoney(host),\\n            minSecurity: ns.getServerMinSecurityLevel(host),\\n        };\\n        serversByPort[server.ports].push(server);\\n        seen.add(host);\\n        for (const nxt of ns.scan(host)) {\\n            if (!seen.has(nxt)) {\\n                dfs(nxt, host);\\n            }\\n        }\\n    };\\n    dfs(HOSTS.HOME, null);\\n    for (let i = 0; i < 6; i++) {\\n        serversByPort[i].sort((sa, sb) => sa.reqHack - sb.reqHack);\\n    }\\n    return serversByPort;\\n};\\nexport const getAllServers = (ns) => getServersByPort(ns).flat();\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL3V0aWxzL3NlcnZlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBVy9DLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsRUFBTSxFQUFjLEVBQUU7SUFDckQsTUFBTSxhQUFhLEdBQWUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBQzFELE1BQU0sSUFBSSxHQUFHLElBQUksR0FBRyxFQUFVLENBQUE7SUFFOUIsTUFBTSxHQUFHLEdBQUcsQ0FBQyxJQUFZLEVBQUUsR0FBa0IsRUFBRSxFQUFFO1FBQy9DLE1BQU0sTUFBTSxHQUFHO1lBQ2IsTUFBTSxFQUFFLEdBQUc7WUFDWCxJQUFJO1lBQ0osS0FBSyxFQUFFLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUM7WUFDekMsT0FBTyxFQUFFLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQyxJQUFJLENBQUM7WUFDL0MsUUFBUSxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUM7WUFDcEMsV0FBVyxFQUFFLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUM7U0FDaEQsQ0FBQTtRQUVELGFBQWEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ3hDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7UUFFZCxLQUFLLE1BQU0sR0FBRyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDL0IsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ2xCLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUE7YUFDZjtTQUNGO0lBQ0gsQ0FBQyxDQUFBO0lBRUQsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUE7SUFFckIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUMxQixhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUE7S0FDM0Q7SUFFRCxPQUFPLGFBQWEsQ0FBQTtBQUN0QixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxFQUFNLEVBQVksRUFBRSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFBIn0=\",\"filename\":\"scripts/utils/servers.js\",\"server\":\"home\"}}],[\"scripts/hack-candidates.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from 'scripts/utils/servers';\\nexport async function main(ns) {\\n    const candidates = getAllServers(ns)\\n        .filter((s) => ns.hasRootAccess(s.host))\\n        .sort((sa, sb) => sb.maxMoney - sa.maxMoney)\\n        .slice(0, 30);\\n    candidates.forEach((s) => ns.tprint(`${s.host}:\\\\n\\\\tMax money = $${ns.formatNumber(s.maxMoney)}\\\\n\\\\tMin security = ${s.minSecurity}\\\\n\\\\tReq hack lvl = ${s.reqHack}`));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay1jYW5kaWRhdGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NjcmlwdHMvaGFjay1jYW5kaWRhdGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQTtBQUVyRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sVUFBVSxHQUFHLGFBQWEsQ0FBQyxFQUFFLENBQUM7U0FDakMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN2QyxJQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUM7U0FDM0MsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUVmLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUN2QixFQUFFLENBQUMsTUFBTSxDQUNQLEdBQUcsQ0FBQyxDQUFDLElBQUkscUJBQXFCLEVBQUUsQ0FBQyxZQUFZLENBQzNDLENBQUMsQ0FBQyxRQUFRLENBQ1gsc0JBQXNCLENBQUMsQ0FBQyxXQUFXLHNCQUFzQixDQUFDLENBQUMsT0FBTyxFQUFFLENBQ3RFLENBQ0YsQ0FBQTtBQUNILENBQUMifQ==\",\"filename\":\"scripts/hack-candidates.js\",\"server\":\"home\"}}],[\"scripts/server-tree.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from 'scripts/utils/servers';\\nimport { HOSTS } from 'scripts/utils/constants';\\nexport async function main(ns) {\\n    const servers = getAllServers(ns);\\n    const printTree = (root, level = 0) => {\\n        ns.tprint(Array(level).join('    ') + root);\\n        for (const server of servers) {\\n            if (server.parent === root) {\\n                printTree(server.host, level + 1);\\n            }\\n        }\\n    };\\n    printTree(HOSTS.HOME);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXRyZWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zZXJ2ZXItdHJlZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sdUJBQXVCLENBQUE7QUFDckQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBRS9DLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxPQUFPLEdBQUcsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBRWpDLE1BQU0sU0FBUyxHQUFHLENBQUMsSUFBWSxFQUFFLEtBQUssR0FBRyxDQUFDLEVBQUUsRUFBRTtRQUM1QyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUE7UUFDM0MsS0FBSyxNQUFNLE1BQU0sSUFBSSxPQUFPLEVBQUU7WUFDNUIsSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLElBQUksRUFBRTtnQkFDMUIsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFBO2FBQ2xDO1NBQ0Y7SUFDSCxDQUFDLENBQUE7SUFFRCxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO0FBQ3ZCLENBQUMifQ==\",\"filename\":\"scripts/server-tree.js\",\"server\":\"home\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"home\"}}],[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"home\"}}],[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"home\"}}],[\"scripts/hack-v2.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\n * An improved version of the hack script.\\n * This script runs weaken scripts immediately after invoking hack and grow\\n * scripts. This makes sure these three scripts always run with low server\\n * security, increasing the number of invocations overall.\\n * For best results, this script should be run at the same time on all servers.\\n */\\nimport { HOSTS, SCRIPTS } from 'scripts/utils/constants';\\nconst OFFSET = 1000;\\nexport async function main(ns) {\\n    const host = ns.getHostname();\\n    const target = ns.args[0] ?? HOSTS.JOESGUNS;\\n    if (!target) {\\n        ns.print('Missing target argument');\\n        ns.exit();\\n    }\\n    const getHostAvailableRam = () => ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\n    const hackRam = ns.getScriptRam(SCRIPTS.SIMPLE_HACK);\\n    const growRam = ns.getScriptRam(SCRIPTS.SIMPLE_GROW);\\n    const weakenRam = ns.getScriptRam(SCRIPTS.SIMPLE_WEAKEN);\\n    if (getHostAvailableRam() < 2 * hackRam) {\\n        ns.print(`Host ${host} does not have enough RAM for this script, aborting.`);\\n        ns.exit();\\n    }\\n    const minSecurity = ns.getServerMinSecurityLevel(target);\\n    const maxMoney = ns.getServerMaxMoney(target);\\n    const targetSecurity = Math.max(1.3 * minSecurity, minSecurity + 5);\\n    const targetMoney = (0.75 * maxMoney);\\n    while (true) {\\n        const curSecurity = ns.getServerSecurityLevel(target);\\n        const curMoney = ns.getServerMoneyAvailable(target);\\n        const availableRam = getHostAvailableRam();\\n        if (curSecurity > targetSecurity) {\\n            ns.printf('Lowering difficulty (current: %.3f, target: %.3f)', curSecurity, targetSecurity);\\n            const weakenThreads = Math.floor(availableRam / weakenRam);\\n            const weakenTime = ns.getWeakenTime(target);\\n            ns.exec(SCRIPTS.SIMPLE_WEAKEN, host, weakenThreads, target);\\n            await ns.sleep(weakenTime + OFFSET);\\n        }\\n        else if (curMoney < targetMoney) {\\n            ns.printf('Increasing available money (current: %s, target: %s)', ns.formatNumber(curMoney), ns.formatNumber(targetMoney));\\n            const growThreads = Math.floor(availableRam / 2 / growRam);\\n            const growTime = ns.getGrowTime(target);\\n            const weakenThreads = Math.floor((availableRam - growThreads * growRam) / weakenRam);\\n            const weakenTime = ns.getWeakenTime(target);\\n            ns.exec(SCRIPTS.SIMPLE_GROW, host, growThreads, target);\\n            await ns.sleep(Math.max(0, growTime - weakenTime));\\n            ns.exec(SCRIPTS.SIMPLE_WEAKEN, host, weakenThreads, target);\\n            await ns.sleep(weakenTime + OFFSET);\\n        }\\n        else {\\n            const hackThreads = Math.floor(availableRam / 2 / hackRam);\\n            const hackTime = ns.getHackTime(target);\\n            const weakenThreads = Math.floor((availableRam - hackThreads * hackRam) / weakenRam);\\n            const weakenTime = ns.getWeakenTime(target);\\n            ns.exec(SCRIPTS.SIMPLE_HACK, host, hackThreads, target);\\n            await ns.sleep(Math.max(0, hackTime - weakenTime));\\n            ns.exec(SCRIPTS.SIMPLE_WEAKEN, host, weakenThreads, target);\\n            await ns.sleep(weakenTime + OFFSET);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay12Mi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL2hhY2stdjIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBSUgsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQTtBQUV4RCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUE7QUFFbkIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUE7SUFDN0IsTUFBTSxNQUFNLEdBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVksSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFBO0lBRXZELElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDWCxFQUFFLENBQUMsS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUE7UUFDbkMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFBO0tBQ1Y7SUFFRCxNQUFNLG1CQUFtQixHQUFHLEdBQUcsRUFBRSxDQUMvQixFQUFFLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUV0RCxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUNwRCxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUNwRCxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQTtJQUV4RCxJQUFJLG1CQUFtQixFQUFFLEdBQUcsQ0FBQyxHQUFHLE9BQU8sRUFBRTtRQUN2QyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsSUFBSSxzREFBc0QsQ0FBQyxDQUFBO1FBQzVFLEVBQUUs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\",\"filename\":\"scripts/hack-v2.js\",\"server\":\"home\"}}],[\"scripts/hack-v3.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\n * Same as hack-v2, but this also implements a sync barrier so that all hack-v3\\n * scripts remain in sync, even if they are executed at different times.\\n */\\nimport { HOSTS, SCRIPTS } from 'scripts/utils/constants';\\nimport { createTimer } from 'scripts/ui/timer';\\nconst REGISTRATION_TIME = 5000;\\nconst OFFSET = 1000;\\nlet busy = false;\\nlet registrationOpen = false;\\nconst participants = new Set();\\nconst register = async (ns, id) => {\\n    while (busy) {\\n        ns.print('Waiting for barrier');\\n        await ns.sleep(1000);\\n    }\\n    let isManager = false;\\n    if (!registrationOpen) {\\n        isManager = true;\\n        registrationOpen = true;\\n        setTimeout(() => {\\n            busy = true;\\n            registrationOpen = false;\\n            // console.log(`Participants: ${[...participants.values()].join(', ')}`)\\n        }, REGISTRATION_TIME);\\n    }\\n    participants.add(id);\\n    return isManager;\\n};\\nconst finish = (id) => {\\n    participants.delete(id);\\n    if (participants.size === 0) {\\n        busy = false;\\n    }\\n};\\nexport async function main(ns) {\\n    const host = ns.getHostname();\\n    const target = ns.args[0] ?? HOSTS.JOESGUNS;\\n    if (!target) {\\n        ns.print('Missing target argument');\\n        ns.exit();\\n    }\\n    const getHostAvailableRam = () => ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\n    const hackRam = ns.getScriptRam(SCRIPTS.SIMPLE_HACK);\\n    const growRam = ns.getScriptRam(SCRIPTS.SIMPLE_GROW);\\n    const weakenRam = ns.getScriptRam(SCRIPTS.SIMPLE_WEAKEN);\\n    if (getHostAvailableRam() < 2 * hackRam) {\\n        ns.print(`Host ${host} does not have enough RAM for this script, aborting.`);\\n        ns.exit();\\n    }\\n    ns.atExit(() => {\\n        if (participants.has(host)) {\\n            finish(host);\\n        }\\n    });\\n    const minSecurity = ns.getServerMinSecurityLevel(target);\\n    const maxMoney = ns.getServerMaxMoney(target);\\n    const targetSecurity = Math.max(1.3 * minSecurity, minSecurity + 5);\\n    const targetMoney = (0.75 * maxMoney);\\n    while (true) {\\n        const isManager = await register(ns, host);\\n        const curSecurity = ns.getServerSecurityLevel(target);\\n        const curMoney = ns.getServerMoneyAvailable(target);\\n        const availableRam = getHostAvailableRam();\\n        if (curSecurity > targetSecurity) {\\n            ns.printf('Lowering difficulty (current: %.3f, target: %.3f)', curSecurity, targetSecurity);\\n            const weakenThreads = Math.floor(availableRam / weakenRam);\\n            const weakenTime = ns.getWeakenTime(target);\\n            ns.exec(SCRIPTS.SIMPLE_WEAKEN, host, weakenThreads, target);\\n            isManager && createTimer(`Weaken ${target}`, weakenTime);\\n            await ns.sleep(weakenTime + OFFSET);\\n        }\\n        else if (curMoney < targetMoney) {\\n            ns.printf('Increasing available money (current: %s, target: %s)', ns.formatNumber(curMoney), ns.formatNumber(targetMoney));\\n            const growThreads = Math.floor(availableRam / 2 / growRam);\\n            const growTime = ns.getGrowTime(target);\\n            const weakenThreads = Math.floor((availableRam - growThreads * growRam) / weakenRam);\\n            const weakenTime = ns.getWeakenTime(target);\\n            ns.exec(SCRIPTS.SIMPLE_GROW, host, growThreads, target);\\n            isManager && createTimer(`Grow ${target}`, growTime);\\n            await ns.sleep(Math.max(0, growTime - weakenTime));\\n            ns.exec(SCRIPTS.SIMPLE_WEAKEN, host, weakenThreads, target);\\n            isManager && createTimer(`Weaken ${target}`, weakenTime);\\n            await ns.sleep(weakenTime + OFFSET);\\n        }\\n        else {\\n            const hackThreads = Math.floor(availableRam / 2 / hackRam);\\n            const hackTime = ns.getHackTime(target);\\n            const weakenThreads = Math.floor((availableRam - hackThreads * hackRam) / weakenRam);\\n            const weakenTime = ns.getWeakenTime(target);\\n            ns.exec(SCRIPTS.SIMPLE_HACK, host, hackThreads, target);\\n            isManager && createTimer(`Hack ${target}`, hackTime);\\n            await ns.sleep(Math.max(0, hackTime - weakenTime));\\n            ns.exec(SCRIPTS.SIMPLE_WEAKEN, host, weakenThreads, target);\\n            isManager && createTimer(`Weaken ${target}`, weakenTime);\\n            await ns.sleep(weakenTime + OFFSET);\\n        }\\n        finish(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay12My5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL2hhY2stdjMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBSUgsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQTtBQUN4RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFFOUMsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUE7QUFDOUIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFBO0FBRW5CLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQTtBQUNoQixJQUFJLGdCQUFnQixHQUFHLEtBQUssQ0FBQTtBQUM1QixNQUFNLFlBQVksR0FBRyxJQUFJLEdBQUcsRUFBVSxDQUFBO0FBRXRDLE1BQU0sUUFBUSxHQUFHLEtBQUssRUFBRSxFQUFNLEVBQUUsRUFBVSxFQUFFLEVBQUU7SUFDNUMsT0FBTyxJQUFJLEVBQUU7UUFDWCxFQUFFLENBQUMsS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUE7UUFDL0IsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3JCO0lBRUQsSUFBSSxTQUFTLEdBQUcsS0FBSyxDQUFBO0lBRXJCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtRQUNyQixTQUFTLEdBQUcsSUFBSSxDQUFBO1FBQ2hCLGdCQUFnQixHQUFHLElBQUksQ0FBQTtRQUN2QixVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2QsSUFBSSxHQUFHLElBQUksQ0FBQTtZQUNYLGdCQUFnQixHQUFHLEtBQUssQ0FBQTtZQUN4Qix3RUFBd0U7UUFDMUUsQ0FBQyxFQUFFLGlCQUFpQixDQUFDLENBQUE7S0FDdEI7SUFFRCxZQUFZLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ3BCLE9BQU8sU0FBUyxDQUFBO0FBQ2xCLENBQUMsQ0FBQTtBQUVELE1BQU0sTUFBTSxHQUFH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\",\"filename\":\"scripts/hack-v3.js\",\"server\":\"home\"}}],[\"scripts/test.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"let foo = 0;\\nexport async function main(ns) {\\n    ns.tprint(foo);\\n    foo += 1;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3Rlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFBO0FBRVgsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ2QsR0FBRyxJQUFJLENBQUMsQ0FBQTtBQUNWLENBQUMifQ==\",\"filename\":\"scripts/test.js\",\"server\":\"home\"}}],[\"contracts/unique-paths.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\nconst grid = [\\n    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,\\n    0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\\n];\\nconst n = 8;\\nconst m = 6;\\nconst solve = () => {\\n    const check = (r, c) => grid[r * m + c];\\n    const dp = [...new Array(n)].map(() => new Array(m).fill(0));\\n    dp[0][0] = 1;\\n    for (let r = 0; r < n; r++) {\\n        for (let c = r === 0 ? 1 : 0; c < m; c++) {\\n            if (check(r, c) === 1) {\\n                continue;\\n            }\\n            dp[r][c] = (r === 0 ? 0 : dp[r - 1][c]) + (c === 0 ? 0 : dp[r][c - 1]);\\n        }\\n    }\\n    console.log(dp);\\n    console.log(dp[n - 1][m - 1]);\\n};\\nsolve();\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pcXVlLXBhdGhzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbnRyYWN0cy91bmlxdWUtcGF0aHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU0sSUFBSSxHQUFHO0lBQ1gsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7SUFDNUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztDQUNqRSxDQUFBO0FBRUQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQ1gsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBRVgsTUFBTSxLQUFLLEdBQUcsR0FBRyxFQUFFO0lBQ2pCLE1BQU0sS0FBSyxHQUFHLENBQUMsQ0FBUyxFQUFFLENBQVMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7SUFFdkQsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBRTVELEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDWixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzFCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN4QyxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUNyQixTQUFRO2FBQ1Q7WUFDRCxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO1NBQ3ZFO0tBQ0Y7SUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ2YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQy9CLENBQUMsQ0FBQTtBQUVELEtBQUssRUFBRSxDQUFBIn0=\",\"filename\":\"contracts/unique-paths.js\",\"server\":\"home\"}}],[\"contracts/subarray-max-sum.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = [\\n    -9, 8, -10, 9, 2, -9, -7, -5, 6, 9, 3, 2, 1, -1, 2, -9, 8, 5, -6, -6, 3, -3,\\n    6, 7, -1, 5, -7, -1,\\n];\\nexport const solve = (arr) => {\\n    let best = arr[0];\\n    let sum = 0;\\n    for (const x of arr) {\\n        sum += x;\\n        if (sum > best) {\\n            best = sum;\\n        }\\n        if (sum < 0) {\\n            sum = 0;\\n        }\\n    }\\n    console.log(best);\\n};\\nsolve(input);\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ViYXJyYXktbWF4LXN1bS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb250cmFjdHMvc3ViYXJyYXktbWF4LXN1bS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLEtBQUssR0FBRztJQUNaLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMzRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7Q0FDcEIsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLEdBQWEsRUFBRSxFQUFFO0lBQ3JDLElBQUksSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUNqQixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUE7SUFFWCxLQUFLLE1BQU0sQ0FBQyxJQUFJLEdBQUcsRUFBRTtRQUNuQixHQUFHLElBQUksQ0FBQyxDQUFBO1FBRVIsSUFBSSxHQUFHLEdBQUcsSUFBSSxFQUFFO1lBQ2QsSUFBSSxHQUFHLEdBQUcsQ0FBQTtTQUNYO1FBRUQsSUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUFFO1lBQ1gsR0FBRyxHQUFHLENBQUMsQ0FBQTtTQUNSO0tBQ0Y7SUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFBO0FBQ25CLENBQUMsQ0FBQTtBQUVELEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQSJ9\",\"filename\":\"contracts/subarray-max-sum.js\",\"server\":\"home\"}}],[\"scripts/contract-finder.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from 'scripts/utils/servers';\\nimport { solve } from 'scripts/contracts/index';\\nexport const findContracts = (ns) => {\\n    const servers = getAllServers(ns);\\n    const allContracts = [];\\n    for (const server of servers) {\\n        const contracts = ns.ls(server.host, '.cct');\\n        for (const filename of contracts) {\\n            allContracts.push({\\n                host: server.host,\\n                filename,\\n            });\\n        }\\n    }\\n    return allContracts;\\n};\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    while (true) {\\n        ns.print('Looking for contracts...');\\n        const contracts = findContracts(ns);\\n        for (const contract of contracts) {\\n            ns.print(`Attempting to solve ${contract.filename} at ${contract.host}...`);\\n            solve(ns, contract.host, contract.filename);\\n        }\\n        await ns.sleep(15000);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJhY3QtZmluZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NjcmlwdHMvY29udHJhY3QtZmluZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQTtBQUNyRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0seUJBQXlCLENBQUE7QUFPL0MsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQUMsRUFBTSxFQUFFLEVBQUU7SUFDdEMsTUFBTSxPQUFPLEdBQUcsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBRWpDLE1BQU0sWUFBWSxHQUFlLEVBQUUsQ0FBQTtJQUVuQyxLQUFLLE1BQU0sTUFBTSxJQUFJLE9BQU8sRUFBRTtRQUM1QixNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUE7UUFFNUMsS0FBSyxNQUFNLFFBQVEsSUFBSSxTQUFTLEVBQUU7WUFDaEMsWUFBWSxDQUFDLElBQUksQ0FBQztnQkFDaEIsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJO2dCQUNqQixRQUFRO2FBQ1QsQ0FBQyxDQUFBO1NBQ0g7S0FDRjtJQUVELE9BQU8sWUFBWSxDQUFBO0FBQ3JCLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUVwQixPQUFPLElBQUksRUFBRTtRQUNYLEVBQUUsQ0FBQyxLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQTtRQUVwQyxNQUFNLFNBQVMsR0FBRyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUE7UUFFbkMsS0FBSyxNQUFNLFFBQVEsSUFBSSxTQUFTLEVBQUU7WUFDaEMsRUFBRSxDQUFDLEtBQUssQ0FDTix1QkFBdUIsUUFBUSxDQUFDLFFBQVEsT0FBTyxRQUFRLENBQUMsSUFBSSxLQUFLLENBQ2xFLENBQUE7WUFFRCxLQUFLLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1NBQzVDO1FBRUQsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/contract-finder.js\",\"server\":\"home\"}}],[\"scripts/contracts/subarray-max-sum.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = [\\n    -9, 8, -10, 9, 2, -9, -7, -5, 6, 9, 3, 2, 1, -1, 2, -9, 8, 5, -6, -6, 3, -3,\\n    6, 7, -1, 5, -7, -1,\\n];\\nexport const solve = (arr) => {\\n    let best = arr[0];\\n    let sum = 0;\\n    for (const x of arr) {\\n        sum += x;\\n        if (sum > best) {\\n            best = sum;\\n        }\\n        if (sum < 0) {\\n            sum = 0;\\n        }\\n    }\\n    console.log(best);\\n};\\nsolve(input);\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ViYXJyYXktbWF4LXN1bS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvbnRyYWN0cy9zdWJhcnJheS1tYXgtc3VtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sS0FBSyxHQUFHO0lBQ1osQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzNFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUNwQixDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLENBQUMsR0FBYSxFQUFFLEVBQUU7SUFDckMsSUFBSSxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ2pCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQTtJQUVYLEtBQUssTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFO1FBQ25CLEdBQUcsSUFBSSxDQUFDLENBQUE7UUFFUixJQUFJLEdBQUcsR0FBRyxJQUFJLEVBQUU7WUFDZCxJQUFJLEdBQUcsR0FBRyxDQUFBO1NBQ1g7UUFFRCxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUU7WUFDWCxHQUFHLEdBQUcsQ0FBQyxDQUFBO1NBQ1I7S0FDRjtJQUVELE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDbkIsQ0FBQyxDQUFBO0FBRUQsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBIn0=\",\"filename\":\"scripts/contracts/subarray-max-sum.js\",\"server\":\"home\"}}],[\"scripts/contracts/unique-paths.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\nconst grid = [\\n    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,\\n    0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\\n];\\nconst n = 8;\\nconst m = 6;\\nconst solve = () => {\\n    const check = (r, c) => grid[r * m + c];\\n    const dp = [...new Array(n)].map(() => new Array(m).fill(0));\\n    dp[0][0] = 1;\\n    for (let r = 0; r < n; r++) {\\n        for (let c = r === 0 ? 1 : 0; c < m; c++) {\\n            if (check(r, c) === 1) {\\n                continue;\\n            }\\n            dp[r][c] = (r === 0 ? 0 : dp[r - 1][c]) + (c === 0 ? 0 : dp[r][c - 1]);\\n        }\\n    }\\n    console.log(dp);\\n    console.log(dp[n - 1][m - 1]);\\n};\\nsolve();\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pcXVlLXBhdGhzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29udHJhY3RzL3VuaXF1ZS1wYXRocy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxJQUFJLEdBQUc7SUFDWCxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztJQUM1RSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO0NBQ2pFLENBQUE7QUFFRCxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7QUFDWCxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7QUFFWCxNQUFNLEtBQUssR0FBRyxHQUFHLEVBQUU7SUFDakIsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFTLEVBQUUsQ0FBUyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUV2RCxNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUcsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFFNUQsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNaLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDMUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3hDLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ3JCLFNBQVE7YUFDVDtZQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FDdkU7S0FDRjtJQUVELE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDZixPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDL0IsQ0FBQyxDQUFBO0FBRUQsS0FBSyxFQUFFLENBQUEifQ==\",\"filename\":\"scripts/contracts/unique-paths.js\",\"server\":\"home\"}}],[\"exploits/alter-reality.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// @ts-nocheck\\nexport async function main(ns) {\\n    ns.alterReality();\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWx0ZXItcmVhbGl0eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leHBsb2l0cy9hbHRlci1yZWFsaXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWM7QUFXZCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQTtBQUNuQixDQUFDIn0=\",\"filename\":\"exploits/alter-reality.js\",\"server\":\"home\"}}],[\"exploits/bypass.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// @ts-nocheck\\nexport async function main(ns) {\\n    const doc = eval('document');\\n    ns.bypass(doc);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnlwYXNzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2V4cGxvaXRzL2J5cGFzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxjQUFjO0FBSWQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDNUIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQTtBQUNoQixDQUFDIn0=\",\"filename\":\"exploits/bypass.js\",\"server\":\"home\"}}],[\"exploits/exploit.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// @ts-nocheck\\nexport async function main(ns) {\\n    ns.exploit();\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwbG9pdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leHBsb2l0cy9leHBsb2l0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWM7QUFJZCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtBQUNkLENBQUMifQ==\",\"filename\":\"exploits/exploit.js\",\"server\":\"home\"}}],[\"exploits/rainbow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// @ts-nocheck\\nexport async function main(ns) {\\n    ns.rainbow('noodles');\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFpbmJvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leHBsb2l0cy9yYWluYm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWM7QUFJZCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUE7QUFDdkIsQ0FBQyJ9\",\"filename\":\"exploits/rainbow.js\",\"server\":\"home\"}}],[\"exploits/tampering.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main() {\\n    const old = Number.prototype.toExponential;\\n    Number.prototype.toExponential = () => 'a';\\n    setTimeout(() => {\\n        Number.prototype.toExponential = old;\\n    }, 16 * 60 * 1000);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFtcGVyaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2V4cGxvaXRzL3RhbXBlcmluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUk7SUFDeEIsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUE7SUFDMUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxhQUFhLEdBQUcsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFBO0lBRTFDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxNQUFNLENBQUMsU0FBUyxDQUFDLGFBQWEsR0FBRyxHQUFHLENBQUE7SUFDdEMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUE7QUFDcEIsQ0FBQyJ9\",\"filename\":\"exploits/tampering.js\",\"server\":\"home\"}}],[\"exploits/time-compression.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main() {\\n    const oldNow = performance.now;\\n    performance.now = () => 42;\\n    setTimeout(() => {\\n        performance.now = oldNow;\\n    }, 2000);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1jb21wcmVzc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leHBsb2l0cy90aW1lLWNvbXByZXNzaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSTtJQUN4QixNQUFNLE1BQU0sR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFBO0lBQzlCLFdBQVcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFBO0lBQzFCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxXQUFXLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQTtJQUMxQixDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUE7QUFDVixDQUFDIn0=\",\"filename\":\"exploits/time-compression.js\",\"server\":\"home\"}}],[\"exploits/unclickable.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main() {\\n    const doc = eval('document');\\n    const el = doc.getElementById('unclickable');\\n    el.style.display = 'block';\\n    el.style.visibility = 'visible';\\n    el.style.height = '20px';\\n    el.style.zIndex = '100';\\n    el.style.backgroundColor = 'red';\\n    el.onmouseup = () => {\\n        el.style.display = 'none';\\n        el.style.visibility = 'hidden';\\n        console.log('mouseup');\\n    };\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5jbGlja2FibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZXhwbG9pdHMvdW5jbGlja2FibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJO0lBQ3hCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUM1QixNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBRSxDQUFBO0lBRTdDLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQTtJQUMxQixFQUFFLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUE7SUFDL0IsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFBO0lBQ3hCLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQTtJQUN2QixFQUFFLENBQUMsS0FBSyxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUE7SUFFaEMsRUFBRSxDQUFDLFNBQVMsR0FBRyxHQUFHLEVBQUU7UUFDbEIsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFBO1FBQ3pCLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLFFBQVEsQ0FBQTtRQUM5QixPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBQ3hCLENBQUMsQ0FBQTtBQUNILENBQUMifQ==\",\"filename\":\"exploits/unclickable.js\",\"server\":\"home\"}}],[\"scripts/scp-all.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HOSTS } from 'scripts/utils/constants';\\nexport async function main(ns) {\\n    const dest = ns.args[0] ?? ns.getHostname();\\n    if (!dest) {\\n        ns.tprint('Missing destination argument');\\n        ns.exit();\\n    }\\n    const files = ns.ls(HOSTS.HOME).filter((f) => f.endsWith('.js'));\\n    ns.scp(files, dest, HOSTS.HOME);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NwLWFsbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NjcC1hbGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBRS9DLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUE7SUFFdkQsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsOEJBQThCLENBQUMsQ0FBQTtRQUN6QyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO0lBRWhFLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDakMsQ0FBQyJ9\",\"filename\":\"scripts/scp-all.js\",\"server\":\"home\"}}],[\"scripts/contracts/stock-trader.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = [2, [16, 188, 133, 38, 163, 94, 43, 43, 135, 17, 107, 39, 78, 199, 84, 78, 158, 72, 158, 71, 6, 123, 145, 55, 87, 127, 32, 29, 26, 164, 142, 141, 166]];\\nexport const solve = (input) => {\\n    const [k, arr] = input;\\n    const n = arr.length;\\n    const dp = [...Array(k + 1)].map(() => Array(n).fill(0));\\n    for (let kk = 1; kk <= k; kk++) {\\n        for (let i = 1; i < n; i++) {\\n            dp[kk][i] = Math.max(dp[kk][i - 1], dp[kk - 1][i]);\\n            for (let j = i - 1; j >= 0; j--) {\\n                if (arr[i] > arr[j]) {\\n                    dp[kk][i] = Math.max(dp[kk][i], dp[kk - 1][j] + arr[i] - arr[j]);\\n                }\\n            }\\n        }\\n    }\\n    return dp[k][n - 1];\\n};\\nexport const solvers = {\\n    'Algorithmic Stock Trader IV': solve,\\n    'Algorithmic Stock Trader III': (input) => solve([2, input]),\\n    'Algorithmic Stock Trader II': (input) => solve([input.length, input]),\\n    'Algorithmic Stock Trader I': (input) => solve([1, input]),\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvY2stdHJhZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29udHJhY3RzL3N0b2NrLXRyYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxNQUFNLEtBQUssR0FBVSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQTtBQUU1SyxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxLQUFZLEVBQUUsRUFBRTtJQUNwQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQTtJQUN0QixNQUFNLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFBO0lBRXBCLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUV4RCxLQUFLLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFO1FBQzlCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDMUIsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDbEQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQy9CLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtvQkFDbkIsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO2lCQUNqRTthQUNGO1NBQ0Y7S0FDRjtJQUVELE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtBQUNyQixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUc7SUFDckIsNkJBQTZCLEVBQUUsS0FBSztJQUNwQyw4QkFBOEIsRUFBRSxDQUFDLEtBQWUsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3RFLDZCQUE2QixFQUFFLENBQUMsS0FBZSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2hGLDRCQUE0QixFQUFFLENBQUMsS0FBZSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDckUsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUN6QixDQUFDIn0=\",\"filename\":\"scripts/contracts/stock-trader.js\",\"server\":\"home\"}}],[\"scripts/contracts/ways-to-sum.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = {\\n    n: 115,\\n    vals: [1, 2, 4, 5, 8, 9, 10, 11, 13, 14, 16],\\n};\\nexport const solve = (input) => {\\n    const { n, vals } = input;\\n    const dp = Array(n + 1).fill(0);\\n    dp[0] = 1;\\n    for (const val of vals) {\\n        for (let i = val; i <= n; i++) {\\n            dp[i] += dp[i - val];\\n        }\\n    }\\n    return dp[n];\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\nconsole.log(solve(input));\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2F5cy10by1zdW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9jb250cmFjdHMvd2F5cy10by1zdW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBT0EsTUFBTSxLQUFLLEdBQUc7SUFDWixDQUFDLEVBQUUsR0FBRztJQUNOLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUM7Q0FDN0MsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLEtBQVksRUFBRSxFQUFFO0lBQ3BDLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFBO0lBRXpCLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQy9CLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7SUFFVCxLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksRUFBRTtRQUN0QixLQUFLLElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzdCLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFBO1NBQ3JCO0tBQ0Y7SUFFRCxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUNkLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUN6QixDQUFDO0FBRUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQSJ9\",\"filename\":\"scripts/contracts/ways-to-sum.js\",\"server\":\"home\"}}],[\"scripts/contracts/index.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as proper2ColoringOfAGraph from 'scripts/contracts/proper-2-coloring-of-a-graph';\\nimport * as algorithmicStockTrader from 'scripts/contracts/algorithmic-stock-trader';\\nimport * as rleCompression from 'scripts/contracts/rle-compression';\\nimport * as lzCompression from 'scripts/contracts/lz-compression';\\nimport * as findAllValidMathExpressions from 'scripts/contracts/find-all-valid-math-expressions';\\nimport * as totalWaysToSum from 'scripts/contracts/total-ways-to-sum';\\nimport * as findLargestPrimeFactor from 'scripts/contracts/find-largest-prime-factor';\\nimport * as generateIPAddresses from 'scripts/contracts/generate-ip-addresses';\\nimport * as uniquePathsInAGrid from 'scripts/contracts/unique-paths-in-a-grid';\\nimport * as subarrayWithMaximumSum from 'scripts/contracts/subarray-with-maximum-sum';\\nimport * as viginereCipher from 'scripts/contracts/vigenere-cipher';\\nimport * as hammingCodes from 'scripts/contracts/hamming-codes';\\nimport * as arrayJumpingGame from 'scripts/contracts/array-jumping-game';\\nimport * as caesarCipher from 'scripts/contracts/caesar-cipher';\\nimport * as spiralizeMatrix from 'scripts/contracts/spiralize-matrix';\\nimport * as mergeOverlappingIntervals from 'scripts/contracts/merge-overlapping-intervals';\\nimport * as shortestPathInAGrid from 'scripts/contracts/shortest-path-in-a-grid';\\nimport * as sanitizeParenthesisInExpression from 'scripts/contracts/sanitize-parenthesis-in-expression';\\nimport * as minimumPathSumInATriangle from 'scripts/contracts/minimum-path-sum-in-a-triangle';\\nconst solvers = {\\n    ...proper2ColoringOfAGraph.solvers,\\n    ...algorithmicStockTrader.solvers,\\n    ...rleCompression.solvers,\\n    ...lzCompression.solvers,\\n    ...findAllValidMathExpressions.solvers,\\n    ...totalWaysToSum.solvers,\\n    ...findLargestPrimeFactor.solvers,\\n    ...generateIPAddresses.solvers,\\n    ...uniquePathsInAGrid.solvers,\\n    ...subarrayWithMaximumSum.solvers,\\n    ...viginereCipher.solvers,\\n    ...hammingCodes.solvers,\\n    ...arrayJumpingGame.solvers,\\n    ...caesarCipher.solvers,\\n    ...spiralizeMatrix.solvers,\\n    ...mergeOverlappingIntervals.solvers,\\n    ...shortestPathInAGrid.solvers,\\n    ...sanitizeParenthesisInExpression.solvers,\\n    ...minimumPathSumInATriangle.solvers,\\n};\\nexport const solve = (ns, host, filename) => {\\n    const name = ns.codingcontract.getContractType(filename, host);\\n    const data = ns.codingcontract.getData(filename, host);\\n    const solver = solvers[name];\\n    if (!solver) {\\n        ns.toast(`Solver for contract \\\"${name}\\\" not implemented.`, 'warning', 5000);\\n        return;\\n    }\\n    const reward = ns.codingcontract.attempt(solver(data), filename, host);\\n    if (reward) {\\n        ns.toast(`Correctly solved contract. Reward: ${reward}`, 'success', 5000);\\n    }\\n    else {\\n        ns.toast('Failed to solve contract.', 'error', 5000);\\n        ns.tprint(`Failed to solve ${filename} at ${host}`);\\n        ns.exit();\\n    }\\n};\\nexport async function main(ns) {\\n    const [host, filename] = ns.args;\\n    if (!host || !filename) {\\n        ns.tprint('Missing host or filename argument');\\n        ns.exit();\\n    }\\n    solve(ns, host, filename);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9jb250cmFjdHMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxLQUFLLHVCQUF1QixNQUFNLGdEQUFnRCxDQUFBO0FBQ3pGLE9BQU8sS0FBSyxzQkFBc0IsTUFBTSw0Q0FBNEMsQ0FBQTtBQUNwRixPQUFPLEtBQUssY0FBYyxNQUFNLG1DQUFtQyxDQUFBO0FBQ25FLE9BQU8sS0FBSyxhQUFhLE1BQU0sa0NBQWtDLENBQUE7QUFDakUsT0FBTyxLQUFLLDJCQUEyQixNQUFNLG1EQUFtRCxDQUFBO0FBQ2hHLE9BQU8sS0FBSyxjQUFjLE1BQU0scUNBQXFDLENBQUE7QUFDckUsT0FBTyxLQUFLLHNCQUFzQixNQUFNLDZDQUE2QyxDQUFBO0FBQ3JGLE9BQU8sS0FBSyxtQkFBbUIsTUFBTSx5Q0FBeUMsQ0FBQTtBQUM5RSxPQUFPLEtBQUssa0JBQWtCLE1BQU0sMENBQTBDLENBQUE7QUFDOUUsT0FBTyxLQUFLLHNCQUFzQixNQUFNLDZDQUE2QyxDQUFBO0FBQ3JGLE9BQU8sS0FBSyxjQUFjLE1BQU0sbUNBQW1DLENBQUE7QUFDbkUsT0FBTyxLQUFLLFlBQVksTUFBTSxpQ0FBaUMsQ0FBQTtBQUMvRCxPQUFPLEtBQUssZ0JBQWdCLE1BQU0sc0NBQXNDLENBQUE7QUFDeEUsT0FBTyxLQUFLLFlBQVksTUFBTSxpQ0FBaUMsQ0FBQTtBQUMvRCxPQUFPLEtBQUssZUFBZSxNQUFNLG9DQUFvQyxDQUFBO0FBQ3JFLE9BQU8sS0FBSyx5QkFBeUIsTUFBTSwrQ0FBK0MsQ0FBQTtBQUMxRixPQUFPLEtBQUssbUJBQW1CLE1BQU0sMkNBQTJDLENBQUE7QUFDaEYsT0FBTyxLQUFLLCtCQUErQixNQUFNLHNEQUFzRCxDQUFBO0FBQ3ZHLE9BQU8sS0FBSyx5QkFBeUIsTUFBTSxrREFBa0QsQ0FBQTtBQUU3RixNQUFNLE9BQU8sR0FBNEM7SUFDdkQsR0FB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\",\"filename\":\"scripts/contracts/index.js\",\"server\":\"home\"}}],[\"scripts/ui/timer.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatTime } from 'scripts/utils/time';\\nconst CONTAINER_ID = 'custom-ui-container';\\nconst init = () => {\\n    const doc = eval('document');\\n    if (doc.getElementById(CONTAINER_ID)) {\\n        return;\\n    }\\n    const container = doc.createElement('div');\\n    container.id = CONTAINER_ID;\\n    container.style.position = 'fixed';\\n    container.style.bottom = '2rem';\\n    container.style.right = '0';\\n    container.style.display = 'flex';\\n    container.style.flexDirection = 'column';\\n    container.style.alignItems = 'end';\\n    container.style.fontFamily =\\n        '\\\"Lucida Console\\\", \\\"Lucida Sans Unicode\\\", \\\"Fira Mono\\\", Consolas, \\\"Courier New\\\", Courier, monospace, \\\"Times New Roman\\\"';\\n    container.style.zIndex = '100';\\n    container.style.color = '#0c0';\\n    doc.body.append(container);\\n};\\nexport const createTimer = (label, time) => {\\n    const doc = eval('document');\\n    init();\\n    const now = performance.now();\\n    const target = now + time;\\n    const el = doc.createElement('div');\\n    el.style.padding = '1rem 0.5rem';\\n    el.style.borderStyle = 'solid';\\n    el.style.borderColor = 'rgb(128, 128, 128)';\\n    el.style.borderWidth = '1px';\\n    const container = doc.getElementById(CONTAINER_ID);\\n    const refresh = () => {\\n        const remTime = target - performance.now();\\n        if (remTime < 0) {\\n            container?.removeChild(el);\\n            return;\\n        }\\n        el.innerText = `${label}: ${formatTime(remTime)}`;\\n        setTimeout(refresh, 100);\\n    };\\n    refresh();\\n    container?.append(el);\\n};\\nexport async function main() {\\n    init();\\n    createTimer('Test', 30000);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy91aS90aW1lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sb0JBQW9CLENBQUE7QUFFL0MsTUFBTSxZQUFZLEdBQUcscUJBQXFCLENBQUE7QUFFMUMsTUFBTSxJQUFJLEdBQUcsR0FBRyxFQUFFO0lBQ2hCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQWEsQ0FBQTtJQUV4QyxJQUFJLEdBQUcsQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLEVBQUU7UUFDcEMsT0FBTTtLQUNQO0lBRUQsTUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUMxQyxTQUFTLENBQUMsRUFBRSxHQUFHLFlBQVksQ0FBQTtJQUMzQixTQUFTLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUE7SUFDbEMsU0FBUyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFBO0lBQy9CLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQTtJQUMzQixTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUE7SUFDaEMsU0FBUyxDQUFDLEtBQUssQ0FBQyxhQUFhLEdBQUcsUUFBUSxDQUFBO0lBQ3hDLFNBQVMsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQTtJQUNsQyxTQUFTLENBQUMsS0FBSyxDQUFDLFVBQVU7UUFDeEIsc0hBQXNILENBQUE7SUFDeEgsU0FBUyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFBO0lBQzlCLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQTtJQUU5QixHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQTtBQUM1QixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsQ0FBQyxLQUFhLEVBQUUsSUFBWSxFQUFFLEVBQUU7SUFDekQsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBYSxDQUFBO0lBRXhDLElBQUksRUFBRSxDQUFBO0lBRU4sTUFBTSxHQUFHLEdBQUcsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFBO0lBQzdCLE1BQU0sTUFBTSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUE7SUFFekIsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUNuQyxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxhQUFhLENBQUE7SUFDaEMsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFBO0lBQzlCLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFHLG9CQUFvQixDQUFBO0lBQzNDLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQTtJQUU1QixNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFBO0lBRWxELE1BQU0sT0FBTyxHQUFHLEdBQUcsRUFBRTtRQUNuQixNQUFNLE9BQU8sR0FBRyxNQUFNLEdBQUcsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFBO1FBRTFDLElBQUksT0FBTyxHQUFHLENBQUMsRUFBRTtZQUNmLFNBQVMsRUFBRSxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUE7WUFDMUIsT0FBTTtTQUNQO1FBRUQsRUFBRSxDQUFDLFNBQVMsR0FBRyxHQUFHLEtBQUssS0FBSyxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQTtRQUNqRCxVQUFVLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFBO0lBQzFCLENBQUMsQ0FBQTtJQUVELE9BQU8sRUFBRSxDQUFBO0lBRVQsU0FBUyxFQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQTtBQUN2QixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUk7SUFDeEIsSUFBSSxFQUFFLENBQUE7SUFFTixXQUFXLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFBO0FBQzVCLENBQUMifQ==\",\"filename\":\"scripts/ui/timer.js\",\"server\":\"home\"}}],[\"scripts/hack-v4.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\n * Improves v3 implementing a HGW strategy and a UI with server stats\\n */\\nimport { SCRIPTS } from 'scripts/utils/constants';\\nimport { formatTime } from 'scripts/utils/time';\\nconst REGISTRATION_TIME_MS = 5000;\\nconst OFFSET_MS = 1000;\\nclass Barrier {\\n    static status = {};\\n    static init(barrierId) {\\n        if (!this.status[barrierId]) {\\n            this.status[barrierId] = {\\n                busy: false,\\n                registering: false,\\n                participants: new Set(),\\n                members: new Set(),\\n            };\\n        }\\n    }\\n    static join(id, barrierId) {\\n        this.init(barrierId);\\n        const status = this.status[barrierId];\\n        status.members.add(id);\\n    }\\n    static leave(ns, id, barrierId, ui) {\\n        this.init(barrierId);\\n        const status = this.status[barrierId];\\n        status.members.delete(id);\\n        if (status.members.size === 0) {\\n            ui.destroy();\\n        }\\n        if (status.participants.has(id)) {\\n            this.finish(ns, id, barrierId);\\n        }\\n    }\\n    static async register(ns, id, barrierId) {\\n        this.init(barrierId);\\n        const status = this.status[barrierId];\\n        while (status.busy) {\\n            ns.print('Waiting for barrier');\\n            await ns.sleep(1000);\\n        }\\n        let isManager = false;\\n        if (!status.registering) {\\n            status.registering = true;\\n            isManager = true;\\n            setTimeout(() => {\\n                status.busy = true;\\n                status.registering = false;\\n            }, REGISTRATION_TIME_MS);\\n        }\\n        status.participants.add(id);\\n        return isManager;\\n    }\\n    static finish(ns, id, barrierId) {\\n        const status = this.status[barrierId];\\n        if (!status) {\\n            ns.print('Warning: Trying to finish in barrier that does not exist, which is a no-op.');\\n            return;\\n        }\\n        if (!status.participants.has(id)) {\\n            ns.print('Warning: Trying to finish an element that is not in the barrier, which is a no-op.');\\n            return;\\n        }\\n        status.participants.delete(id);\\n        if (status.participants.size === 0) {\\n            status.busy = false;\\n        }\\n    }\\n}\\nclass UI {\\n    id;\\n    containerId;\\n    securityId;\\n    moneyId;\\n    timersId;\\n    minSecurity;\\n    maxMoney;\\n    ns;\\n    constructor(ns, id, stats) {\\n        this.ns = ns;\\n        this.id = id;\\n        this.containerId = `hack-status-${id}`;\\n        this.securityId = this.containerId + '--security';\\n        this.moneyId = this.containerId + '--money';\\n        this.timersId = this.containerId + '--timers';\\n        this.minSecurity = stats.minSecurity;\\n        this.maxMoney = stats.maxMoney;\\n        this.init();\\n    }\\n    destroy() {\\n        const doc = eval('document');\\n        const container = doc.getElementById(this.containerId);\\n        if (container) {\\n            doc.body.removeChild(container);\\n        }\\n    }\\n    init() {\\n        const doc = eval('document');\\n        if (doc.getElementById(this.containerId)) {\\n            return;\\n        }\\n        const container = doc.createElement('div');\\n        container.id = this.containerId;\\n        container.style.position = 'fixed';\\n        container.style.bottom = '2rem';\\n        container.style.right = '0';\\n        container.style.display = 'flex';\\n        container.style.flexDirection = 'column';\\n        container.style.fontFamily =\\n            '\\\"Lucida Console\\\", \\\"Lucida Sans Unicode\\\", \\\"Fira Mono\\\", Consolas, \\\"Courier New\\\", Courier, monospace, \\\"Times New Roman\\\"';\\n        container.style.zIndex = '100';\\n        container.style.color = '#0c0';\\n        container.style.borderStyle = 'solid';\\n        container.style.borderColor = 'rgb(128, 128, 128)';\\n        container.style.borderWidth = '1px';\\n        container.style.padding = '0.5rem';\\n        const title = doc.createElement('div');\\n        title.style.padding = '0.5rem';\\n        title.style.alignSelf = 'center';\\n        title.innerText = 'Hack v4';\\n        title.style.fontWeight = 'bold';\\n        container.append(title);\\n        const target = doc.createElement('div');\\n        target.innerText = `Target: ${this.id}`;\\n        container.append(target);\\n        const security = doc.createElement('div');\\n        security.id = this.securityId;\\n        security.innerText = 'Security: 0 (min: 0)';\\n        container.append(security);\\n        const money = doc.createElement('div');\\n        money.id = this.moneyId;\\n        money.innerText = 'Money: 0 (max: 0)';\\n        container.append(money);\\n        const timers = doc.createElement('div');\\n        timers.id = this.timersId;\\n        timers.style.marginTop = '1rem';\\n        container.append(timers);\\n        doc.body.append(container);\\n    }\\n    setSecurity(security) {\\n        const doc = eval('document');\\n        const el = doc.getElementById(this.securityId);\\n        if (el) {\\n            el.innerText = `Security: ${security.toFixed(3)} (min: ${this.minSecurity})`;\\n        }\\n    }\\n    setMoney(money) {\\n        const doc = eval('document');\\n        const el = doc.getElementById(this.moneyId);\\n        if (el) {\\n            el.innerText = `Money: ${this.ns.formatNumber(money)} (max: ${this.ns.formatNumber(this.maxMoney)})`;\\n        }\\n    }\\n    addTimer(label, time) {\\n        const doc = eval('document');\\n        const now = performance.now();\\n        const target = now + time;\\n        const el = doc.createElement('div');\\n        const container = doc.getElementById(this.timersId);\\n        const refresh = () => {\\n            const remTime = target - performance.now();\\n            if (remTime < 0) {\\n                container?.removeChild(el);\\n                return;\\n            }\\n            el.innerText = `${label}: ${formatTime(remTime)}`;\\n            setTimeout(refresh, 200);\\n        };\\n        refresh();\\n        container?.append(el);\\n    }\\n}\\nexport async function main(ns) {\\n    const host = ns.getHostname();\\n    const target = ns.args[0];\\n    if (!target) {\\n        ns.print('Missing target argument');\\n        ns.exit();\\n    }\\n    const getHostAvailableRam = () => ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\n    const hackRam = ns.getScriptRam(SCRIPTS.SIMPLE_HACK);\\n    const growRam = ns.getScriptRam(SCRIPTS.SIMPLE_GROW);\\n    const weakenRam = ns.getScriptRam(SCRIPTS.SIMPLE_WEAKEN);\\n    if (getHostAvailableRam() < 4 * hackRam) {\\n        ns.print(`Host ${host} does not have enough RAM for this script, aborting.`);\\n        ns.exit();\\n    }\\n    ns.atExit(() => {\\n        Barrier.leave(ns, host, target, ui);\\n    });\\n    Barrier.join(host, target);\\n    const minSecurity = ns.getServerMinSecurityLevel(target);\\n    const maxMoney = ns.getServerMaxMoney(target);\\n    const ui = new UI(ns, target, { minSecurity, maxMoney });\\n    while (true) {\\n        const isManager = await Barrier.register(ns, host, target);\\n        const curSecurity = ns.getServerSecurityLevel(target);\\n        const curMoney = ns.getServerMoneyAvailable(target);\\n        const availableRam = getHostAvailableRam();\\n        isManager && ui.setSecurity(curSecurity);\\n        isManager && ui.setMoney(curMoney);\\n        const events = [];\\n        if (curSecurity > minSecurity) {\\n            const weakenThreads = Math.floor(availableRam / weakenRam);\\n            const weakenTime = ns.getWeakenTime(target);\\n            if (isManager) {\\n                ui.addTimer('Weaken', weakenTime);\\n            }\\n            events.push({\\n                type: 'script-start',\\n                script: 'weaken',\\n                threads: weakenThreads,\\n                t: 0,\\n            });\\n            events.push({\\n                type: 'script-end',\\n                script: 'weaken',\\n                t: weakenTime,\\n            });\\n        }\\n        else if (curMoney < maxMoney) {\\n            const growThreads = Math.floor(availableRam / 2 / growRam);\\n            const growTime = ns.getGrowTime(target);\\n            const weakenThreads = Math.floor((availableRam - growThreads * growRam) / weakenRam);\\n            const weakenTime = ns.getWeakenTime(target);\\n            const weakenDelay = Math.max(0, growTime - weakenTime + OFFSET_MS);\\n            if (isManager) {\\n                ui.addTimer('Grow', growTime);\\n                ui.addTimer('Weaken', weakenDelay + weakenTime);\\n            }\\n            events.push({\\n                type: 'script-start',\\n                script: 'grow',\\n                threads: growThreads,\\n                t: 0,\\n            });\\n            events.push({\\n                type: 'script-end',\\n                script: 'grow',\\n                t: growTime,\\n            });\\n            events.push({\\n                type: 'script-start',\\n                script: 'weaken',\\n                threads: weakenThreads,\\n                t: weakenDelay,\\n            });\\n            events.push({\\n                type: 'script-end',\\n                script: 'weaken',\\n                t: weakenDelay + weakenTime,\\n            });\\n        }\\n        else {\\n            const hackThreads = Math.floor(availableRam / 4 / hackRam);\\n            const hackTime = ns.getHackTime(target);\\n            const growThreads = Math.floor(availableRam / 4 / growRam);\\n            const growTime = ns.getGrowTime(target);\\n            const weakenThreads = Math.floor((availableRam - hackThreads * hackRam - growThreads * growRam) /\\n                weakenRam);\\n            const weakenTime = ns.getWeakenTime(target);\\n            const growDelay = Math.max(0, hackTime - growTime + OFFSET_MS);\\n            const weakenDelay = Math.max(0, growDelay + growTime - weakenTime + OFFSET_MS);\\n            if (isManager) {\\n                ui.addTimer('Hack', hackTime);\\n                ui.addTimer('Grow', growDelay + growTime);\\n                ui.addTimer('Weaken', weakenDelay + weakenTime);\\n            }\\n            events.push({\\n                type: 'script-start',\\n                script: 'hack',\\n                threads: hackThreads,\\n                t: 0,\\n            });\\n            events.push({\\n                type: 'script-end',\\n                script: 'hack',\\n                t: hackTime,\\n            });\\n            events.push({\\n                type: 'script-start',\\n                script: 'grow',\\n                threads: growThreads,\\n                t: growDelay,\\n            });\\n            events.push({\\n                type: 'script-end',\\n                script: 'grow',\\n                t: growDelay + growTime,\\n            });\\n            events.push({\\n                type: 'script-start',\\n                script: 'weaken',\\n                threads: weakenThreads,\\n                t: weakenDelay,\\n            });\\n            events.push({\\n                type: 'script-end',\\n                script: 'weaken',\\n                t: weakenDelay + weakenTime,\\n            });\\n        }\\n        events.sort((a, b) => a.t - b.t);\\n        let elapsedTime = 0;\\n        for (const event of events) {\\n            await ns.sleep(event.t - elapsedTime);\\n            elapsedTime = event.t;\\n            if (event.type === 'script-start') {\\n                const script = event.script === 'grow'\\n                    ? SCRIPTS.SIMPLE_GROW\\n                    : event.script === 'hack'\\n                        ? SCRIPTS.SIMPLE_HACK\\n                        : SCRIPTS.SIMPLE_WEAKEN;\\n                ns.exec(script, host, event.threads, target);\\n            }\\n            else {\\n                if (event.script === 'grow' || event.script === 'hack') {\\n                    ui.setMoney(ns.getServerMoneyAvailable(target));\\n                }\\n                ui.setSecurity(ns.getServerSecurityLevel(target));\\n            }\\n        }\\n        while (ns.scriptRunning(SCRIPTS.SIMPLE_GROW, host) ||\\n            ns.scriptRunning(SCRIPTS.SIMPLE_HACK, host) ||\\n            ns.scriptRunning(SCRIPTS.SIMPLE_WEAKEN, host)) {\\n            await ns.sleep(500);\\n        }\\n        Barrier.finish(ns, host, target);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay12NC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL2hhY2stdjQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0dBRUc7QUFJSCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0seUJBQXlCLENBQUE7QUFDakQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG9CQUFvQixDQUFBO0FBRS9DLE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxDQUFBO0FBQ2pDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQTtBQXdCdEIsTUFBTSxPQUFPO0lBQ1gsTUFBTSxDQUFDLE1BQU0sR0FBa0MsRUFBRSxDQUFBO0lBRWpELE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBaUI7UUFDM0IsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDM0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRztnQkFDdkIsSUFBSSxFQUFFLEtBQUs7Z0JBQ1gsV0FBVyxFQUFFLEtBQUs7Z0JBQ2xCLFlBQVksRUFBRSxJQUFJLEdBQUcsRUFBRTtnQkFDdkIsT0FBTyxFQUFFLElBQUksR0FBRyxFQUFFO2FBQ25CLENBQUE7U0FDRjtJQUNILENBQUM7SUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQVUsRUFBRSxTQUFpQjtRQUN2QyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQ3BCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUE7UUFDckMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDeEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBTSxFQUFFLEVBQVUsRUFBRSxTQUFpQixFQUFFLEVBQU07UUFDeEQsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUNwQixNQUFNLE1B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\",\"filename\":\"scripts/hack-v4.js\",\"server\":\"home\"}}],[\"scripts/utils/time.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const formatTime = (timeMs) => {\\n    const seconds = Math.floor(timeMs / 1000);\\n    const minutes = Math.floor(seconds / 60);\\n    const remSeconds = seconds - minutes * 60;\\n    return `${minutes.toString().padStart(2, '0')}:${remSeconds\\n        .toString()\\n        .padStart(2, '0')}`;\\n};\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL3V0aWxzL3RpbWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsTUFBYyxFQUFFLEVBQUU7SUFDM0MsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLENBQUE7SUFDekMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDLENBQUE7SUFDeEMsTUFBTSxVQUFVLEdBQUcsT0FBTyxHQUFHLE9BQU8sR0FBRyxFQUFFLENBQUE7SUFDekMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLFVBQVU7U0FDeEQsUUFBUSxFQUFFO1NBQ1YsUUFBUSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFBO0FBQ3ZCLENBQUMsQ0FBQSJ9\",\"filename\":\"scripts/utils/time.js\",\"server\":\"home\"}}],[\"scripts/contracts/proper-2-coloring-of-a-graph.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = [\\n    4,\\n    [\\n        [0, 2],\\n        [0, 3],\\n        [1, 2],\\n        [1, 3],\\n    ],\\n];\\nconst solve = (arr) => {\\n    const [n, edges] = arr;\\n    const ans = Array(n).fill(-1);\\n    const adj = [...Array(n)].map(() => []);\\n    for (const [u, v] of edges) {\\n        adj[u].push(v);\\n        adj[v].push(u);\\n    }\\n    const dfs = (v, c = 0) => {\\n        ans[v] = c;\\n        for (const w of adj[v]) {\\n            if (ans[w] === c) {\\n                return false;\\n            }\\n            else if (ans[w] === -1) {\\n                if (!dfs(w, 1 - c)) {\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    };\\n    for (let v = 0; v < n; v++) {\\n        if (ans[v] === -1) {\\n            if (!dfs(v)) {\\n                return [];\\n            }\\n        }\\n    }\\n    return ans;\\n};\\nexport const solvers = {\\n    'Proper 2-Coloring of a Graph': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcGVyLTItY29sb3Jpbmctb2YtYS1ncmFwaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvbnRyYWN0cy9wcm9wZXItMi1jb2xvcmluZy1vZi1hLWdyYXBoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE1BQU0sS0FBSyxHQUFVO0lBQ25CLENBQUM7SUFDRDtRQUNFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNOLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNOLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNOLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNQO0NBQ0YsQ0FBQTtBQUVELE1BQU0sS0FBSyxHQUFHLENBQUMsR0FBVSxFQUFFLEVBQUU7SUFDM0IsTUFBTSxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUE7SUFDdEIsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQzdCLE1BQU0sR0FBRyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBYyxDQUFDLENBQUE7SUFFbkQsS0FBSyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEtBQUssRUFBRTtRQUMxQixHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUNmO0lBRUQsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFTLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFO1FBQy9CLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDVixLQUFLLE1BQU0sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUN0QixJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ2hCLE9BQU8sS0FBSyxDQUFBO2FBQ2I7aUJBQU0sSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7Z0JBQ3hCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtvQkFDbEIsT0FBTyxLQUFLLENBQUE7aUJBQ2I7YUFDRjtTQUNGO1FBQ0QsT0FBTyxJQUFJLENBQUE7SUFDYixDQUFDLENBQUE7SUFFRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzFCLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ1gsT0FBTyxFQUFFLENBQUE7YUFDVjtTQUNGO0tBQ0Y7SUFFRCxPQUFPLEdBQUcsQ0FBQTtBQUNaLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRztJQUNyQiw4QkFBOEIsRUFBRSxLQUFLO0NBQ3RDLENBQUE7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7QUFDekIsQ0FBQyJ9\",\"filename\":\"scripts/contracts/proper-2-coloring-of-a-graph.js\",\"server\":\"home\"}}],[\"scripts/contracts/algorithmic-stock-trader.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = [\\n    2,\\n    [\\n        16, 188, 133, 38, 163, 94, 43, 43, 135, 17, 107, 39, 78, 199, 84, 78, 158,\\n        72, 158, 71, 6, 123, 145, 55, 87, 127, 32, 29, 26, 164, 142, 141, 166,\\n    ],\\n];\\nexport const solve = (input) => {\\n    const [k, arr] = input;\\n    const n = arr.length;\\n    const dp = [...Array(k + 1)].map(() => Array(n).fill(0));\\n    for (let kk = 1; kk <= k; kk++) {\\n        for (let i = 1; i < n; i++) {\\n            dp[kk][i] = Math.max(dp[kk][i - 1], dp[kk - 1][i]);\\n            for (let j = i - 1; j >= 0; j--) {\\n                if (arr[i] > arr[j]) {\\n                    dp[kk][i] = Math.max(dp[kk][i], dp[kk - 1][j] + arr[i] - arr[j]);\\n                }\\n            }\\n        }\\n    }\\n    return dp[k][n - 1];\\n};\\nexport const solvers = {\\n    'Algorithmic Stock Trader IV': solve,\\n    'Algorithmic Stock Trader III': (input) => solve([2, input]),\\n    'Algorithmic Stock Trader II': (input) => solve([input.length, input]),\\n    'Algorithmic Stock Trader I': (input) => solve([1, input]),\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxnb3JpdGhtaWMtc3RvY2stdHJhZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29udHJhY3RzL2FsZ29yaXRobWljLXN0b2NrLXRyYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxNQUFNLEtBQUssR0FBVTtJQUNuQixDQUFDO0lBQ0Q7UUFDRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRztRQUN6RSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHO0tBQ3RFO0NBQ0YsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLEtBQVksRUFBRSxFQUFFO0lBQ3BDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFBO0lBQ3RCLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUE7SUFFcEIsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBRXhELEtBQUssSUFBSSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUU7UUFDOUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMxQixFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUNsRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDL0IsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFO29CQUNuQixFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7aUJBQ2pFO2FBQ0Y7U0FDRjtLQUNGO0lBRUQsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0FBQ3JCLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRztJQUNyQiw2QkFBNkIsRUFBRSxLQUFLO0lBQ3BDLDhCQUE4QixFQUFFLENBQUMsS0FBZSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDdEUsNkJBQTZCLEVBQUUsQ0FBQyxLQUFlLEVBQUUsRUFBRSxDQUNqRCxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzlCLDRCQUE0QixFQUFFLENBQUMsS0FBZSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDckUsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUN6QixDQUFDIn0=\",\"filename\":\"scripts/contracts/algorithmic-stock-trader.js\",\"server\":\"home\"}}],[\"scripts/contracts/rle-compression.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = 'zzzzzzzzzzzzzzzzzzz';\\nexport const solve = (input) => {\\n    let lastChar = '';\\n    let lastCnt = 0;\\n    const ans = [];\\n    for (const c of input) {\\n        if (c !== lastChar || lastCnt === 9) {\\n            if (lastCnt > 0) {\\n                ans.push(lastCnt);\\n                ans.push(lastChar);\\n            }\\n            lastCnt = 0;\\n            lastChar = c;\\n        }\\n        lastCnt++;\\n    }\\n    ans.push(lastCnt);\\n    ans.push(lastChar);\\n    return ans.join('');\\n};\\nexport const solvers = {\\n    'Compression I: RLE Compression': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmxlLWNvbXByZXNzaW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29udHJhY3RzL3JsZS1jb21wcmVzc2lvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxNQUFNLEtBQUssR0FBVSxxQkFBcUIsQ0FBQTtBQUUxQyxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxLQUFZLEVBQUUsRUFBRTtJQUNwQyxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUE7SUFDakIsSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFBO0lBRWYsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFBO0lBRWQsS0FBSyxNQUFNLENBQUMsSUFBSSxLQUFLLEVBQUU7UUFDckIsSUFBSSxDQUFDLEtBQUssUUFBUSxJQUFJLE9BQU8sS0FBSyxDQUFDLEVBQUU7WUFDbkMsSUFBSSxPQUFPLEdBQUcsQ0FBQyxFQUFFO2dCQUNmLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7Z0JBQ2pCLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUE7YUFDbkI7WUFDRCxPQUFPLEdBQUcsQ0FBQyxDQUFBO1lBQ1gsUUFBUSxHQUFHLENBQUMsQ0FBQTtTQUNiO1FBQ0QsT0FBTyxFQUFFLENBQUE7S0FDVjtJQUVELEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDakIsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUNsQixPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7QUFDckIsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHO0lBQ3JCLGdDQUFnQyxFQUFFLEtBQUs7Q0FDeEMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUN6QixDQUFDIn0=\",\"filename\":\"scripts/contracts/rle-compression.js\",\"server\":\"home\"}}],[\"scripts/contracts/lz-compression.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = 'XbaaaaaaaatuiW1vLatu0kLatuLatuLatu3QErNGNGNMuzZ03G7Ko1gfs7fut0eLgfuitOY7mM';\\nconst decompress = (input) => {\\n    const ans = [];\\n    let cur = 0;\\n    for (let k = 0; cur < input.length; k ^= 1) {\\n        const n = parseInt(input[cur++]);\\n        if (n === 0) {\\n            continue;\\n        }\\n        if (k === 0) {\\n            for (let i = 0; i < n; i++) {\\n                ans.push(input[cur++]);\\n            }\\n        }\\n        else {\\n            const m = parseInt(input[cur++]);\\n            for (let i = 0; i < n; i++) {\\n                ans.push(ans[ans.length - m]);\\n            }\\n        }\\n    }\\n    return ans.join('');\\n};\\nconst compress = (input) => {\\n    const n = input.length;\\n    const dp = [...Array(2)].map(() => Array(n).fill(Infinity));\\n    const op = [...Array(2)].map(() => Array(n).fill(''));\\n    dp[0][n] = dp[1][n] = 0;\\n    for (let i = n - 1; i >= 0; i--) {\\n        // 0\\n        for (let j = 1; j <= 9 && i + j <= n; j++) {\\n            const val = 1 + j + dp[1][i + j];\\n            if (val < dp[0][i]) {\\n                dp[0][i] = val;\\n                op[0][i] = `${j}`;\\n            }\\n        }\\n        // 1\\n        for (let j = 1; j <= 9 && i - j >= 0; j++) {\\n            for (let k = 1; k <= 9 && i + k <= n; k++) {\\n                if (input[i + k - 1] === input[i - j + k - 1]) {\\n                    const val = 2 + dp[0][i + k];\\n                    if (val < dp[1][i]) {\\n                        dp[1][i] = val;\\n                        op[1][i] = `${k}${j}`;\\n                    }\\n                }\\n                else {\\n                    break;\\n                }\\n            }\\n        }\\n        // consider 0\\n        if (dp[0][i] < dp[1][i]) {\\n            dp[1][i] = 1 + dp[0][i];\\n            op[1][i] = '0';\\n        }\\n        else if (dp[1][i] < dp[0][i]) {\\n            dp[0][i] = 1 + dp[1][i];\\n            op[0][i] = '0';\\n        }\\n    }\\n    const ans = [];\\n    let curN = 0;\\n    let curT = 0;\\n    while (curN < n) {\\n        if (curT === 0) {\\n            ans.push(op[curT][curN]);\\n            const cnt = parseInt(op[curT][curN]);\\n            for (let i = 0; i < cnt; i++) {\\n                ans.push(input[curN + i]);\\n            }\\n            curN += cnt;\\n        }\\n        else {\\n            ans.push(op[curT][curN]);\\n            curN += parseInt(op[curT][curN][0]);\\n        }\\n        curT ^= 1;\\n    }\\n    return ans.join('');\\n};\\nexport const solvers = {\\n    'Compression II: LZ Decompression': decompress,\\n    'Compression III: LZ Compression': compress,\\n};\\nexport async function main(ns) {\\n    ns.tprint(input);\\n    ns.tprint(compress(input));\\n    ns.tprint(decompress(compress(input)));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHotY29tcHJlc3Npb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9jb250cmFjdHMvbHotY29tcHJlc3Npb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsTUFBTSxLQUFLLEdBQ1QsNEVBQTRFLENBQUE7QUFFOUUsTUFBTSxVQUFVLEdBQUcsQ0FBQyxLQUFZLEVBQUUsRUFBRTtJQUNsQyxNQUFNLEdBQUcsR0FBYSxFQUFFLENBQUE7SUFDeEIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFBO0lBRVgsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUMxQyxNQUFNLENBQUMsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUVoQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDWCxTQUFRO1NBQ1Q7UUFFRCxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDWCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUMxQixHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUE7YUFDdkI7U0FDRjthQUFNO1lBQ0wsTUFBTSxDQUFDLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUE7WUFFaEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDMUIsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO2FBQzlCO1NBQ0Y7S0FDRjtJQUVELE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtBQUNyQixDQUFDLENBQUE7QUFFRCxNQUFNLFFBQVEsR0FBRyxDQUFDLEtBQVksRUFBRSxFQUFFO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUE7SUFDdEIsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUE7SUFDM0QsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFFckQsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7SUFFdkIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDL0IsSUFBSTtRQUNKLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDekMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO1lBRWhDLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDbEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FB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\",\"filename\":\"scripts/contracts/lz-compression.js\",\"server\":\"home\"}}],[\"scripts/contracts/find-all-valid-math-expressions.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = ['259213024439', 86];\\nconst solve = (input) => {\\n    const [s, target] = input;\\n    const exp = [];\\n    for (const c of s) {\\n        exp.push('');\\n        exp.push(c);\\n    }\\n    const ans = [];\\n    const doit = (i) => {\\n        if (i === s.length) {\\n            const res = exp.join('');\\n            if (eval(res) === target) {\\n                ans.push(res);\\n            }\\n            return;\\n        }\\n        let ops = ['', '+', '-', '*'];\\n        if (s[i] === '0') {\\n            // single zero\\n            ['+', '-', '*'].forEach((op) => {\\n                exp[2 * i] = op;\\n                if (i + 1 < s.length) {\\n                    ['+', '-', '*'].forEach((op2) => {\\n                        exp[2 * (i + 1)] = op2;\\n                        doit(i + 2);\\n                    });\\n                }\\n                else {\\n                    doit(i + 1);\\n                }\\n            });\\n            // prevent leading zero\\n            ops = [''];\\n        }\\n        if (i === 0) {\\n            ops = [''];\\n        }\\n        ops.forEach((op) => {\\n            exp[2 * i] = op;\\n            doit(i + 1);\\n        });\\n    };\\n    doit(0);\\n    return ans;\\n};\\nexport const solvers = {\\n    'Find All Valid Math Expressions': solve,\\n};\\nexport async function main(ns) {\\n    const res = solve(input);\\n    ns.tprint(res.length);\\n    ns.tprint(new Set(res).size);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmluZC1hbGwtdmFsaWQtbWF0aC1leHByZXNzaW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvbnRyYWN0cy9maW5kLWFsbC12YWxpZC1tYXRoLWV4cHJlc3Npb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE1BQU0sS0FBSyxHQUFVLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0FBRXpDLE1BQU0sS0FBSyxHQUFHLENBQUMsS0FBWSxFQUFFLEVBQUU7SUFDN0IsTUFBTSxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUE7SUFFekIsTUFBTSxHQUFHLEdBQWEsRUFBRSxDQUFBO0lBQ3hCLEtBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ2pCLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7UUFDWixHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQ1o7SUFFRCxNQUFNLEdBQUcsR0FBYSxFQUFFLENBQUE7SUFFeEIsTUFBTSxJQUFJLEdBQUcsQ0FBQyxDQUFTLEVBQUUsRUFBRTtRQUN6QixJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxFQUFFO1lBQ2xCLE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7WUFDeEIsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssTUFBTSxFQUFFO2dCQUN4QixHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO2FBQ2Q7WUFFRCxPQUFNO1NBQ1A7UUFFRCxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFBO1FBRTdCLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsRUFBRTtZQUNoQixjQUFjO1lBQ2QsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFO2dCQUM3QixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtnQkFDZixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRTtvQkFDcEIsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO3dCQUM5QixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFBO3dCQUN0QixJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO29CQUNiLENBQUMsQ0FBQyxDQUFBO2lCQUNIO3FCQUFNO29CQUNMLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7aUJBQ1o7WUFDSCxDQUFDLENBQUMsQ0FBQTtZQUVGLHVCQUF1QjtZQUN2QixHQUFHLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQTtTQUNYO1FBRUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ1gsR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUE7U0FDWDtRQUVELEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRTtZQUNqQixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtZQUNmLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7UUFDYixDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQTtJQUVELElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUNQLE9BQU8sR0FBRyxDQUFBO0FBQ1osQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHO0lBQ3JCLGlDQUFpQyxFQUFFLEtBQUs7Q0FDekMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ3hCLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDOUIsQ0FBQyJ9\",\"filename\":\"scripts/contracts/find-all-valid-math-expressions.js\",\"server\":\"home\"}}],[\"scripts/contracts/total-ways-to-sum.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = [5, [1, 2]];\\nexport const solve = (input) => {\\n    const [n, arr] = input;\\n    const dp = Array(n + 1).fill(0);\\n    dp[0] = 1;\\n    for (const x of arr) {\\n        for (let i = x; i <= n; i++) {\\n            dp[i] += dp[i - x];\\n        }\\n    }\\n    return dp[n];\\n};\\nexport const solvers = {\\n    'Total Ways to Sum': (input) => solve([input, [...Array(input - 1)].map((_, idx) => idx + 1)]),\\n    'Total Ways to Sum II': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG90YWwtd2F5cy10by1zdW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9jb250cmFjdHMvdG90YWwtd2F5cy10by1zdW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxLQUFLLEdBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUVoQyxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxLQUFZLEVBQUUsRUFBRTtJQUNwQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQTtJQUV0QixNQUFNLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUMvQixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBRVQsS0FBSyxNQUFNLENBQUMsSUFBSSxHQUFHLEVBQUU7UUFDbkIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMzQixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtTQUNuQjtLQUNGO0lBRUQsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDZCxDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUc7SUFDckIsbUJBQW1CLEVBQUUsQ0FBQyxLQUFhLEVBQUUsRUFBRSxDQUNyQyxLQUFLLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRSxzQkFBc0IsRUFBRSxLQUFLO0NBQzlCLENBQUE7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7QUFDekIsQ0FBQyJ9\",\"filename\":\"scripts/contracts/total-ways-to-sum.js\",\"server\":\"home\"}}],[\"scripts/contracts/find-largest-prime-factor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = 13;\\nexport const solve = (input) => {\\n    let ans = 1;\\n    let cur = 2;\\n    while (cur <= input) {\\n        while (input % cur === 0) {\\n            ans = cur;\\n            input = Math.round(input / cur);\\n        }\\n        cur++;\\n    }\\n    return ans;\\n};\\nexport const solvers = {\\n    'Find Largest Prime Factor': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmluZC1sYXJnZXN0LXByaW1lLWZhY3Rvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvbnRyYWN0cy9maW5kLWxhcmdlc3QtcHJpbWUtZmFjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sS0FBSyxHQUFVLEVBQUUsQ0FBQTtBQUl2QixNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxLQUFZLEVBQUUsRUFBRTtJQUNwQyxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUE7SUFDWCxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUE7SUFFWCxPQUFPLEdBQUcsSUFBSSxLQUFLLEVBQUU7UUFDbkIsT0FBTyxLQUFLLEdBQUcsR0FBRyxLQUFLLENBQUMsRUFBRTtZQUN4QixHQUFHLEdBQUcsR0FBRyxDQUFBO1lBQ1QsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxDQUFBO1NBQ2hDO1FBQ0QsR0FBRyxFQUFFLENBQUE7S0FDTjtJQUVELE9BQU8sR0FBRyxDQUFBO0FBQ1osQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHO0lBQ3JCLDJCQUEyQixFQUFFLEtBQUs7Q0FDbkMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUN6QixDQUFDIn0=\",\"filename\":\"scripts/contracts/find-largest-prime-factor.js\",\"server\":\"home\"}}],[\"scripts/contracts/generate-ip-addresses.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = '12615128104';\\nexport const solve = (input) => {\\n    const ip = [];\\n    const ans = [];\\n    for (const c of input) {\\n        ip.push(c);\\n        ip.push('');\\n    }\\n    ip.pop();\\n    const rec = (i, cnt, last) => {\\n        if (cnt > 3 || i - last > 3) {\\n            return;\\n        }\\n        if (i === input.length - 1) {\\n            if (cnt === 3 && parseInt(input.substring(last + 1, i + 1)) < 256) {\\n                ans.push(ip.join(''));\\n            }\\n            return;\\n        }\\n        ip[2 * i + 1] = '';\\n        rec(i + 1, cnt, last);\\n        if (parseInt(input.substring(last + 1, i + 1)) < 256) {\\n            if (input[last + 1] !== '0' || i - last === 1) {\\n                ip[2 * i + 1] = '.';\\n                rec(i + 1, cnt + 1, i);\\n            }\\n        }\\n    };\\n    rec(0, 0, -1);\\n    return ans;\\n};\\nexport const solvers = {\\n    'Generate IP Addresses': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGUtaXAtYWRkcmVzc2VzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29udHJhY3RzL2dlbmVyYXRlLWlwLWFkZHJlc3Nlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLEtBQUssR0FBVSxhQUFhLENBQUE7QUFJbEMsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLENBQUMsS0FBWSxFQUFFLEVBQUU7SUFDcEMsTUFBTSxFQUFFLEdBQWEsRUFBRSxDQUFBO0lBQ3ZCLE1BQU0sR0FBRyxHQUFhLEVBQUUsQ0FBQTtJQUV4QixLQUFLLE1BQU0sQ0FBQyxJQUFJLEtBQUssRUFBRTtRQUNyQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ1YsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtLQUNaO0lBRUQsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFBO0lBRVIsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFTLEVBQUUsR0FBVyxFQUFFLElBQVksRUFBRSxFQUFFO1FBQ25ELElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsRUFBRTtZQUMzQixPQUFNO1NBQ1A7UUFFRCxJQUFJLENBQUMsS0FBSyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUMxQixJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEVBQUU7Z0JBQ2pFLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO2FBQ3RCO1lBQ0QsT0FBTTtTQUNQO1FBRUQsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFBO1FBQ2xCLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQTtRQUVyQixJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxFQUFFO1lBQ3BELElBQUksS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksS0FBSyxDQUFDLEVBQUU7Z0JBQzdDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQTtnQkFDbkIsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTthQUN2QjtTQUNGO0lBQ0gsQ0FBQyxDQUFBO0lBRUQsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUViLE9BQU8sR0FBRyxDQUFBO0FBQ1osQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHO0lBQ3JCLHVCQUF1QixFQUFFLEtBQUs7Q0FDL0IsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUN6QixDQUFDIn0=\",\"filename\":\"scripts/contracts/generate-ip-addresses.js\",\"server\":\"home\"}}],[\"scripts/contracts/unique-paths-in-a-grid.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = [\\n    [0, 0, 0],\\n    [0, 1, 0],\\n    [0, 0, 0],\\n];\\nexport const solve = (input) => {\\n    const n = input.length;\\n    const m = input[0].length;\\n    const dp = [...new Array(n)].map(() => new Array(m).fill(0));\\n    dp[0][0] = 1;\\n    for (let r = 0; r < n; r++) {\\n        for (let c = r === 0 ? 1 : 0; c < m; c++) {\\n            if (input[r][c] === 1) {\\n                continue;\\n            }\\n            dp[r][c] = (r === 0 ? 0 : dp[r - 1][c]) + (c === 0 ? 0 : dp[r][c - 1]);\\n        }\\n    }\\n    return dp[n - 1][m - 1];\\n};\\nexport const solvers = {\\n    'Unique Paths in a Grid I': ([n, m]) => solve([...Array(n)].map(() => Array(m).fill(0))),\\n    'Unique Paths in a Grid II': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pcXVlLXBhdGhzLWluLWEtZ3JpZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvbnRyYWN0cy91bmlxdWUtcGF0aHMtaW4tYS1ncmlkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE1BQU0sS0FBSyxHQUFVO0lBQ25CLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDVCxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ1QsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUNWLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxLQUFZLEVBQUUsRUFBRTtJQUNwQyxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFBO0lBQ3RCLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUE7SUFFekIsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBRTVELEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDWixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzFCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN4QyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ3JCLFNBQVE7YUFDVDtZQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FDdkU7S0FDRjtJQUVELE9BQU8sRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7QUFDekIsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHO0lBQ3JCLDBCQUEwQixFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFXLEVBQUUsRUFBRSxDQUMvQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEQsMkJBQTJCLEVBQUUsS0FBSztDQUNuQyxDQUFBO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO0FBQ3pCLENBQUMifQ==\",\"filename\":\"scripts/contracts/unique-paths-in-a-grid.js\",\"server\":\"home\"}}],[\"scripts/contracts/subarray-with-maximum-sum.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = [\\n    -9, 8, -10, 9, 2, -9, -7, -5, 6, 9, 3, 2, 1, -1, 2, -9, 8, 5, -6, -6, 3, -3,\\n    6, 7, -1, 5, -7, -1,\\n];\\nconst solve = (input) => {\\n    let best = input[0];\\n    let sum = 0;\\n    for (const x of input) {\\n        sum += x;\\n        if (sum > best) {\\n            best = sum;\\n        }\\n        if (sum < 0) {\\n            sum = 0;\\n        }\\n    }\\n    return best;\\n};\\nexport const solvers = {\\n    'Subarray with Maximum Sum': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ViYXJyYXktd2l0aC1tYXhpbXVtLXN1bS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvbnRyYWN0cy9zdWJhcnJheS13aXRoLW1heGltdW0tc3VtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE1BQU0sS0FBSyxHQUFVO0lBQ25CLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMzRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7Q0FDcEIsQ0FBQTtBQUVELE1BQU0sS0FBSyxHQUFHLENBQUMsS0FBWSxFQUFFLEVBQUU7SUFDN0IsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ25CLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQTtJQUVYLEtBQUssTUFBTSxDQUFDLElBQUksS0FBSyxFQUFFO1FBQ3JCLEdBQUcsSUFBSSxDQUFDLENBQUE7UUFFUixJQUFJLEdBQUcsR0FBRyxJQUFJLEVBQUU7WUFDZCxJQUFJLEdBQUcsR0FBRyxDQUFBO1NBQ1g7UUFFRCxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUU7WUFDWCxHQUFHLEdBQUcsQ0FBQyxDQUFBO1NBQ1I7S0FDRjtJQUVELE9BQU8sSUFBSSxDQUFBO0FBQ2IsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHO0lBQ3JCLDJCQUEyQixFQUFFLEtBQUs7Q0FDbkMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUN6QixDQUFDIn0=\",\"filename\":\"scripts/contracts/subarray-with-maximum-sum.js\",\"server\":\"home\"}}],[\"scripts/contracts/vigenere-cipher.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = ['DASHBOAD', 'LINUX'];\\nconst solve = (input) => {\\n    const getLetter = (a, b) => {\\n        const base = 'A'.charCodeAt(0);\\n        const ba = a.charCodeAt(0) - base;\\n        const bb = b.charCodeAt(0) - base;\\n        return String.fromCharCode(((ba + bb) % 26) + base);\\n    };\\n    const [s, k] = input;\\n    const ans = [];\\n    for (let i = 0; i < s.length; i++) {\\n        ans.push(getLetter(s[i], k[i % k.length]));\\n    }\\n    return ans.join('');\\n};\\nexport const solvers = {\\n    'Encryption II: Vigenère Cipher': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlnZW5lcmUtY2lwaGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29udHJhY3RzL3ZpZ2VuZXJlLWNpcGhlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxNQUFNLEtBQUssR0FBVSxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQTtBQUUxQyxNQUFNLEtBQUssR0FBRyxDQUFDLEtBQVksRUFBRSxFQUFFO0lBQzdCLE1BQU0sU0FBUyxHQUFHLENBQUMsQ0FBUyxFQUFFLENBQVMsRUFBRSxFQUFFO1FBQ3pDLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDOUIsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUE7UUFDakMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUE7UUFDakMsT0FBTyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUE7SUFDckQsQ0FBQyxDQUFBO0lBRUQsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUE7SUFFcEIsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFBO0lBRWQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDakMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUMzQztJQUVELE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtBQUNyQixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUc7SUFDckIsZ0NBQWdDLEVBQUUsS0FBSztDQUN4QyxDQUFBO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO0FBQ3pCLENBQUMifQ==\",\"filename\":\"scripts/contracts/vigenere-cipher.js\",\"server\":\"home\"}}],[\"scripts/contracts/hamming-codes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const isPow2 = (n) => (n & -n) === n;\\nexport const encode = (input) => {\\n    const bin = input.toString(2);\\n    const ans = [];\\n    let cur = 0;\\n    let largestPow = -2;\\n    for (let i = 0; cur < bin.length; i++) {\\n        if (isPow2(i)) {\\n            ans.push(0);\\n            largestPow++;\\n        }\\n        else {\\n            ans.push(parseInt(bin.charAt(cur++)));\\n        }\\n    }\\n    for (let i = largestPow; i >= 0; i--) {\\n        for (let j = 0; j < ans.length; j++) {\\n            if (j & (1 << i)) {\\n                ans[1 << i] ^= ans[j];\\n            }\\n        }\\n    }\\n    for (let j = 0; j < ans.length; j++) {\\n        ans[0] ^= ans[j];\\n    }\\n    return ans.join('');\\n};\\nexport const decode = (input) => {\\n    const s = input.split('').map((x) => x.charCodeAt(0) - '0'.charCodeAt(0));\\n    let err = 0;\\n    for (let i = 0; i < input.length; i++) {\\n        if (s[i] === 1) {\\n            err ^= i;\\n        }\\n    }\\n    s[err] ^= 1;\\n    const ans = [];\\n    for (let i = 0; i < input.length; i++) {\\n        if (!isPow2(i)) {\\n            ans.push(s[i]);\\n        }\\n    }\\n    return parseInt(ans.join(''), 2);\\n};\\nexport const solvers = {\\n    'HammingCodes: Integer to Encoded Binary': encode,\\n    'HammingCodes: Encoded Binary to Integer': decode,\\n};\\nexport async function main(ns) {\\n    ns.tprint(decode('10110000'));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFtbWluZy1jb2Rlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvbnRyYWN0cy9oYW1taW5nLWNvZGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUU1QyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxLQUFhLEVBQUUsRUFBRTtJQUN0QyxNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQzdCLE1BQU0sR0FBRyxHQUFhLEVBQUUsQ0FBQTtJQUV4QixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUE7SUFFWCxJQUFJLFVBQVUsR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUVuQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNyQyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNiLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDWCxVQUFVLEVBQUUsQ0FBQTtTQUNiO2FBQU07WUFDTCxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO1NBQ3RDO0tBQ0Y7SUFFRCxLQUFLLElBQUksQ0FBQyxHQUFHLFVBQVUsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3BDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ25DLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFO2dCQUNoQixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTthQUN0QjtTQUNGO0tBQ0Y7SUFFRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNuQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQ2pCO0lBRUQsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0FBQ3JCLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxDQUFDLEtBQWEsRUFBRSxFQUFFO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUN6RSxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUE7SUFFWCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNyQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDZCxHQUFHLElBQUksQ0FBQyxDQUFBO1NBQ1Q7S0FDRjtJQUVELENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7SUFFWCxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUE7SUFDZCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNyQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ2QsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUNmO0tBQ0Y7SUFFRCxPQUFPLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQ2xDLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRztJQUNyQix5Q0FBeUMsRUFBRSxNQUFNO0lBQ2pELHlDQUF5QyxFQUFFLE1BQU07Q0FDbEQsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQTtBQUMvQixDQUFDIn0=\",\"filename\":\"scripts/contracts/hamming-codes.js\",\"server\":\"home\"}}],[\"scripts/contracts/array-jumping-game.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const solve = (input) => {\\n    const n = input.length;\\n    const dp = input.map(() => Infinity);\\n    dp[n - 1] = 0;\\n    for (let i = n - 2; i >= 0; i--) {\\n        for (let j = 1; j <= input[i] && i + j < n; j++) {\\n            dp[i] = Math.min(dp[i], 1 + dp[i + j]);\\n        }\\n    }\\n    return dp[0] === Infinity ? 0 : dp[0];\\n};\\nexport const solvers = {\\n    'Array Jumping Game': (input) => (solve(input) ? 1 : 0),\\n    'Array Jumping Game II': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve([1, 2, 0]));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJyYXktanVtcGluZy1nYW1lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29udHJhY3RzL2FycmF5LWp1bXBpbmctZ2FtZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxLQUFlLEVBQUUsRUFBRTtJQUN2QyxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFBO0lBQ3RCLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUE7SUFFcEMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7SUFFYixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUMvQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQy9DLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO1NBQ3ZDO0tBQ0Y7SUFFRCxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ3ZDLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRztJQUNyQixvQkFBb0IsRUFBRSxDQUFDLEtBQWUsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2pFLHVCQUF1QixFQUFFLEtBQUs7Q0FDL0IsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUM3QixDQUFDIn0=\",\"filename\":\"scripts/contracts/array-jumping-game.js\",\"server\":\"home\"}}],[\"scripts/contracts/caesar-cipher.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const solve = (input) => {\\n    const shift = input[1] % 26;\\n    const solveWord = (w) => w\\n        .split('')\\n        .map((c) => String.fromCharCode(((c.charCodeAt(0) - 'A'.charCodeAt(0) - shift + 2 * 26) % 26) +\\n        'A'.charCodeAt(0)))\\n        .join('');\\n    return input[0].split(' ').map(solveWord).join(' ');\\n};\\nexport const solvers = {\\n    'Encryption I: Caesar Cipher': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(['DE A', 3]));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Flc2FyLWNpcGhlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvbnRyYWN0cy9jYWVzYXItY2lwaGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLEtBQXVCLEVBQUUsRUFBRTtJQUMvQyxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFBO0lBRTNCLE1BQU0sU0FBUyxHQUFHLENBQUMsQ0FBUyxFQUFFLEVBQUUsQ0FDOUIsQ0FBQztTQUNFLEtBQUssQ0FBQyxFQUFFLENBQUM7U0FDVCxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUNULE1BQU0sQ0FBQyxZQUFZLENBQ2pCLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDM0QsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FDcEIsQ0FDRjtTQUNBLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUViLE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQ3JELENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRztJQUNyQiw2QkFBNkIsRUFBRSxLQUFLO0NBQ3JDLENBQUE7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUMvQixDQUFDIn0=\",\"filename\":\"scripts/contracts/caesar-cipher.js\",\"server\":\"home\"}}],[\"scripts/contracts/spiralize-matrix.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const solve = (input) => {\\n    const rotate = (mat) => {\\n        const n = mat.length;\\n        if (n === 0) {\\n            return [];\\n        }\\n        const m = mat[0].length;\\n        const res = [...Array(m)].map(() => []);\\n        for (let c = 0; c < m; c++) {\\n            for (let r = 0; r < n; r++) {\\n                res[c].push(mat[r].pop());\\n            }\\n        }\\n        return res;\\n    };\\n    let ans = [];\\n    while (input.length > 0) {\\n        ans = ans.concat(input[0]);\\n        input = rotate(input.slice(1));\\n    }\\n    return ans;\\n};\\nexport const solvers = {\\n    'Spiralize Matrix': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve([\\n        [1, 2, 3, 4],\\n        [5, 6, 7, 8],\\n        [9, 10, 11, 12],\\n    ]));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BpcmFsaXplLW1hdHJpeC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvbnRyYWN0cy9zcGlyYWxpemUtbWF0cml4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLEtBQWlCLEVBQUUsRUFBRTtJQUN6QyxNQUFNLE1BQU0sR0FBRyxDQUFDLEdBQWUsRUFBRSxFQUFFO1FBQ2pDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUE7UUFFcEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ1gsT0FBTyxFQUFFLENBQUE7U0FDVjtRQUVELE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUE7UUFFdkIsTUFBTSxHQUFHLEdBQWUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUVuRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzFCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQzFCLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRyxDQUFDLENBQUE7YUFDM0I7U0FDRjtRQUVELE9BQU8sR0FBRyxDQUFBO0lBQ1osQ0FBQyxDQUFBO0lBRUQsSUFBSSxHQUFHLEdBQWEsRUFBRSxDQUFBO0lBRXRCLE9BQU8sS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDdkIsR0FBRyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDMUIsS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDL0I7SUFFRCxPQUFPLEdBQUcsQ0FBQTtBQUNaLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRztJQUNyQixrQkFBa0IsRUFBRSxLQUFLO0NBQzFCLENBQUE7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxNQUFNLENBQ1AsS0FBSyxDQUFDO1FBQ0osQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDWixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNaLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDO0tBQ2hCLENBQUMsQ0FDSCxDQUFBO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/contracts/spiralize-matrix.js\",\"server\":\"home\"}}],[\"scripts/contracts/merge-overlapping-intervals.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const solve = (input) => {\\n    if (input.length === 0) {\\n        return [];\\n    }\\n    input.sort(([a], [b]) => a - b);\\n    const ans = [];\\n    let [curL, curR] = input[0];\\n    for (const [l, r] of input) {\\n        if (l > curR) {\\n            ans.push([curL, curR]);\\n            curL = l;\\n        }\\n        curR = Math.max(curR, r);\\n    }\\n    ans.push([curL, curR]);\\n    return ans;\\n};\\nexport const solvers = {\\n    'Merge Overlapping Intervals': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve([\\n        [4, 8],\\n        [9, 12],\\n        [15, 18],\\n        [7, 16],\\n        [4, 11],\\n        [23, 30],\\n        [13, 21],\\n        [25, 35],\\n        [10, 11],\\n        [23, 32],\\n        [5, 10],\\n        [16, 26],\\n        [13, 19],\\n        [10, 20],\\n        [7, 9],\\n        [21, 22],\\n        [25, 33],\\n        [25, 26],\\n    ]));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVyZ2Utb3ZlcmxhcHBpbmctaW50ZXJ2YWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29udHJhY3RzL21lcmdlLW92ZXJsYXBwaW5nLWludGVydmFscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxLQUFpQixFQUFFLEVBQUU7SUFDekMsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUN0QixPQUFPLEVBQUUsQ0FBQTtLQUNWO0lBRUQsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0lBRS9CLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQTtJQUVkLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBRTNCLEtBQUssTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxLQUFLLEVBQUU7UUFDMUIsSUFBSSxDQUFDLEdBQUcsSUFBSSxFQUFFO1lBQ1osR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFBO1lBQ3RCLElBQUksR0FBRyxDQUFDLENBQUE7U0FDVDtRQUVELElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQTtLQUN6QjtJQUVELEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQTtJQUN0QixPQUFPLEdBQUcsQ0FBQTtBQUNaLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRztJQUNyQiw2QkFBNkIsRUFBRSxLQUFLO0NBQ3JDLENBQUE7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxNQUFNLENBQ1AsS0FBSyxDQUFDO1FBQ0osQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ04sQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ1AsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ1AsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ1AsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ1AsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ04sQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO0tBQ1QsQ0FBQyxDQUNILENBQUE7QUFDSCxDQUFDIn0=\",\"filename\":\"scripts/contracts/merge-overlapping-intervals.js\",\"server\":\"home\"}}],[\"scripts/contracts/shortest-path-in-a-grid.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const solve = (input) => {\\n    const dirs = [\\n        [1, 0, 'U'],\\n        [-1, 0, 'D'],\\n        [0, 1, 'L'],\\n        [0, -1, 'R'],\\n    ];\\n    const n = input.length;\\n    const m = input[0].length;\\n    if (input[0][0] === 1 || input[n - 1][m - 1] === 1) {\\n        return '';\\n    }\\n    const d = input.map((a) => a.map(() => Infinity));\\n    const op = input.map((a) => a.map(() => ''));\\n    const prv = input.map((a) => a.map(() => []));\\n    d[n - 1][m - 1] = 0;\\n    let q = [[n - 1, m - 1]];\\n    while (q.length > 0) {\\n        const [r, c] = q[0];\\n        q = q.slice(1);\\n        for (const [dr, dc, dir] of dirs) {\\n            const nr = r + dr;\\n            const nc = c + dc;\\n            if (nr < 0 ||\\n                nc < 0 ||\\n                nr >= n ||\\n                nc >= m ||\\n                d[nr][nc] !== Infinity ||\\n                input[nr][nc] === 1) {\\n                continue;\\n            }\\n            d[nr][nc] = d[r][c] + 1;\\n            op[nr][nc] = dir;\\n            prv[nr][nc] = [r, c];\\n            q.push([nr, nc]);\\n        }\\n    }\\n    if (d[0][0] === Infinity) {\\n        return '';\\n    }\\n    const ans = [];\\n    let cr = 0;\\n    let cc = 0;\\n    while (cr !== n - 1 || cc !== m - 1) {\\n        ans.push(op[cr][cc]);\\n        const [nr, nc] = prv[cr][cc];\\n        cr = nr;\\n        cc = nc;\\n    }\\n    return ans.join('');\\n};\\nexport const solvers = {\\n    'Shortest Path in a Grid': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve([\\n        [0, 1, 0, 0, 0],\\n        [0, 0, 0, 1, 0],\\n    ]));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvcnRlc3QtcGF0aC1pbi1hLWdyaWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9jb250cmFjdHMvc2hvcnRlc3QtcGF0aC1pbi1hLWdyaWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLENBQUMsS0FBaUIsRUFBRSxFQUFFO0lBQ3pDLE1BQU0sSUFBSSxHQUFHO1FBQ1gsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQztRQUNYLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQztRQUNaLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUM7UUFDWCxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUM7S0FDSixDQUFBO0lBRVYsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQTtJQUN0QixNQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFBO0lBRXpCLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDbEQsT0FBTyxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQTtJQUNqRCxNQUFNLEVBQUUsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFD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\",\"filename\":\"scripts/contracts/shortest-path-in-a-grid.js\",\"server\":\"home\"}}],[\"scripts/contracts/sanitize-parenthesis-in-expression.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const solve = (input) => {\\n    const n = input.length;\\n    const expr = input.split('');\\n    const ans = new Set();\\n    let minCnt = 0;\\n    let s = 0;\\n    for (const c of input) {\\n        if (c === '(') {\\n            s++;\\n        }\\n        else if (c === ')') {\\n            if (s === 0) {\\n                minCnt++;\\n            }\\n            else {\\n                s--;\\n            }\\n        }\\n    }\\n    minCnt += s;\\n    const rec = (i, s, cnt) => {\\n        if (s < 0 || cnt > minCnt) {\\n            return;\\n        }\\n        if (i === n) {\\n            if (s === 0) {\\n                ans.add(expr.join(''));\\n            }\\n            return;\\n        }\\n        switch (input[i]) {\\n            case '(':\\n                expr[i] = input[i];\\n                rec(i + 1, s + 1, cnt);\\n                expr[i] = '';\\n                rec(i + 1, s, cnt + 1);\\n                break;\\n            case ')':\\n                expr[i] = input[i];\\n                rec(i + 1, s - 1, cnt);\\n                expr[i] = '';\\n                rec(i + 1, s, cnt + 1);\\n                break;\\n            default:\\n                expr[i] = input[i];\\n                rec(i + 1, s, cnt);\\n                break;\\n        }\\n    };\\n    rec(0, 0, 0);\\n    return [...ans];\\n};\\nexport const solvers = {\\n    'Sanitize Parentheses in Expression': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(')('));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuaXRpemUtcGFyZW50aGVzaXMtaW4tZXhwcmVzc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvbnRyYWN0cy9zYW5pdGl6ZS1wYXJlbnRoZXNpcy1pbi1leHByZXNzaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLEtBQWEsRUFBRSxFQUFFO0lBQ3JDLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUE7SUFDdEIsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUM1QixNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsRUFBVSxDQUFBO0lBRTdCLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQTtJQUNkLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUVULEtBQUssTUFBTSxDQUFDLElBQUksS0FBSyxFQUFFO1FBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRTtZQUNiLENBQUMsRUFBRSxDQUFBO1NBQ0o7YUFBTSxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUU7WUFDcEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUNYLE1BQU0sRUFBRSxDQUFBO2FBQ1Q7aUJBQU07Z0JBQ0wsQ0FBQyxFQUFFLENBQUE7YUFDSjtTQUNGO0tBQ0Y7SUFFRCxNQUFNLElBQUksQ0FBQyxDQUFBO0lBRVgsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFTLEVBQUUsQ0FBUyxFQUFFLEdBQVcsRUFBRSxFQUFFO1FBQ2hELElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLEdBQUcsTUFBTSxFQUFFO1lBQ3pCLE9BQU07U0FDUDtRQUVELElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNYLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDWCxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTthQUN2QjtZQUNELE9BQU07U0FDUDtRQUVELFFBQVEsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ2hCLEtBQUssR0FBRztnQkFDTixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO2dCQUNsQixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFBO2dCQUN0QixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFBO2dCQUNaLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUE7Z0JBQ3RCLE1BQUs7WUFFUCxLQUFLLEdBQUc7Z0JBQ04sSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtnQkFDbEIsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQTtnQkFDdEIsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtnQkFDWixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFBO2dCQUN0QixNQUFLO1lBRVA7Z0JBQ0UsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtnQkFDbEIsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFBO2dCQUNsQixNQUFLO1NBQ1I7SUFDSCxDQUFDLENBQUE7SUFFRCxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUVaLE9BQU8sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFBO0FBQ2pCLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRztJQUNyQixvQ0FBb0MsRUFBRSxLQUFLO0NBQzVDLENBQUE7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7QUFDeEIsQ0FBQyJ9\",\"filename\":\"scripts/contracts/sanitize-parenthesis-in-expression.js\",\"server\":\"home\"}}],[\"scripts/weaken-all.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { FILES, HOSTS, SCRIPTS } from 'scripts/utils/constants';\\nimport { getPurchasedServerName } from 'scripts/buy-servers';\\nimport { getServersByPort } from 'scripts/utils/servers';\\nimport { LOOP_FLAG } from 'scripts/simple-weaken';\\nimport { nuke } from 'scripts/nuke';\\nconst PROGRAMS_LIST = Object.values(FILES);\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const FILES_TO_COPY = [SCRIPTS.SIMPLE_WEAKEN];\\n    const getAvailableRam = (host) => ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\n    const weakRam = ns.getScriptRam(SCRIPTS.SIMPLE_WEAKEN);\\n    const runScript = (host) => {\\n        ns.scp(FILES_TO_COPY, host, HOSTS.HOME);\\n        const threads = Math.floor(getAvailableRam(host) / weakRam);\\n        if (threads > 0) {\\n            ns.exec(SCRIPTS.SIMPLE_WEAKEN, host, threads, target, LOOP_FLAG);\\n        }\\n    };\\n    for (let i = 0; i < ns.getPurchasedServerLimit(); i++) {\\n        const host = getPurchasedServerName(i);\\n        if (ns.serverExists(host)) {\\n            runScript(host);\\n        }\\n    }\\n    const servers = getServersByPort(ns);\\n    const getRemServersCount = (lists) => lists.reduce((sum, list) => sum + list.length, 0);\\n    while (getRemServersCount(servers) > 0) {\\n        const programCount = PROGRAMS_LIST.reduce((cnt, file) => cnt + (ns.fileExists(file, HOSTS.HOME) ? 1 : 0), 0);\\n        for (let i = 0; i <= programCount; i++) {\\n            if (servers[i].length > 0 &&\\n                ns.getHackingLevel() >= servers[i][0].reqHack) {\\n                nuke(ns, servers[i][0].host);\\n                runScript(servers[i][0].host);\\n                servers[i] = servers[i].slice(1);\\n            }\\n        }\\n        await ns.sleep(1000);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLWFsbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3dlYWtlbi1hbGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLE1BQU0seUJBQXlCLENBQUE7QUFDL0QsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0scUJBQXFCLENBQUE7QUFDNUQsT0FBTyxFQUFFLGdCQUFnQixFQUFlLE1BQU0sdUJBQXVCLENBQUE7QUFDckUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHVCQUF1QixDQUFBO0FBQ2pELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUE7QUFFbkMsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUUxQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFbkMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUE7SUFFN0MsTUFBTSxlQUFlLEdBQUcsQ0FBQyxJQUFZLEVBQUUsRUFBRSxDQUN2QyxFQUFFLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUV0RCxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQTtJQUV0RCxNQUFNLFNBQVMsR0FBRyxDQUFDLElBQVksRUFBRSxFQUFFO1FBQ2pDLEVBQUUsQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDdkMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUE7UUFDM0QsSUFBSSxPQUFPLEdBQUcsQ0FBQyxFQUFFO1lBQ2YsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFBO1NBQ2pFO0lBQ0gsQ0FBQyxDQUFBO0lBRUQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3JELE1BQU0sSUFBSSxHQUFHLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3RDLElBQUksRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN6QixTQUFTLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDaEI7S0FDRjtJQUVELE1BQU0sT0FBTyxHQUFHLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBRXBDLE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxLQUFpQixFQUFFLEVBQUUsQ0FDL0MsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBRW5ELE9BQU8sa0JBQWtCLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ3RDLE1BQU0sWUFBWSxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQ3ZDLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUM5RCxDQUFDLENBQ0YsQ0FBQTtRQUVELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxZQUFZLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDdEMsSUFDRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUM7Z0JBQ3JCLEVBQUUsQ0FBQyxlQUFlLEVBQUUsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUM3QztnQkFDQSxJQUFJLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtnQkFDNUIsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtnQkFDN0IsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7YUFDakM7U0FDRjtRQUVELE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtLQUNyQjtBQUNILENBQUMifQ==\",\"filename\":\"scripts/weaken-all.js\",\"server\":\"home\"}}],[\"scripts/loop-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    while (true) {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9vcC13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9sb29wLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/loop-weaken.js\",\"server\":\"home\"}}],[\"scripts/contracts/minimum-path-sum-in-a-triangle.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const solve = (input) => {\\n    const n = input.length;\\n    const dp = input.map((row) => row.map(() => Infinity));\\n    dp[n - 1] = input[n - 1];\\n    for (let row = n - 2; row >= 0; row--) {\\n        for (let col = 0; col <= row; col++) {\\n            [col, col + 1]\\n                .filter((x) => x <= row + 1)\\n                .forEach((c) => (dp[row][col] = Math.min(dp[row][col], dp[row + 1][c] + input[row][col])));\\n        }\\n    }\\n    return dp[0][0];\\n};\\nexport const solvers = {\\n    'Minimum Path Sum in a Triangle': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve([[2], [3, 4], [6, 5, 7], [4, 1, 8, 3]]));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWluaW11bS1wYXRoLXN1bS1pbi1hLXRyaWFuZ2xlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29udHJhY3RzL21pbmltdW0tcGF0aC1zdW0taW4tYS10cmlhbmdsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLEtBQUssR0FBRyxDQUFDLEtBQWlCLEVBQUUsRUFBRTtJQUNsQyxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFBO0lBRXRCLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQTtJQUN0RCxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7SUFFeEIsS0FBSyxJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUU7UUFDckMsS0FBSyxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUNuQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDO2lCQUNYLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUM7aUJBQzNCLE9BQU8sQ0FDTixDQUFDLENBQUMsRUFBRSxFQUFFLENBQ0osQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FDdEIsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUNaLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUNqQyxDQUFDLENBQ0wsQ0FBQTtTQUNKO0tBQ0Y7SUFFRCxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUNqQixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUc7SUFDckIsZ0NBQWdDLEVBQUUsS0FBSztDQUN4QyxDQUFBO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDMUQsQ0FBQyJ9\",\"filename\":\"scripts/contracts/minimum-path-sum-in-a-triangle.js\",\"server\":\"home\"}}],[\"scripts/hack-all.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\n * v5 of the hacking script\\n * This version implements a single main script that manages the execution of\\n * hack/grow/weaken scripts in every server and also tries to optimize the\\n * ratio of hack/grow/weaken threads.\\n */\\nimport { UI } from 'scripts/hack-ui';\\nimport { getAllServers } from 'scripts/utils/servers';\\nimport { FILES, HOSTS, SCRIPTS } from 'scripts/utils/constants';\\nconst OFFSET_MS = 500;\\nconst SCRIPT_FINISH_WAIT_TIME_MS = 100;\\nconst HOME_RESERVED_RAM_GB = 6;\\nconst nukeServers = (ns, activeServers) => {\\n    const PORT_PROGRAMS = [\\n        {\\n            filename: FILES.BRUTE_SSH,\\n            cmd: ns.brutessh,\\n        },\\n        {\\n            filename: FILES.FTP_CRACK,\\n            cmd: ns.ftpcrack,\\n        },\\n        {\\n            filename: FILES.RELAY_SMTP,\\n            cmd: ns.relaysmtp,\\n        },\\n        {\\n            filename: FILES.HTTP_WORM,\\n            cmd: ns.httpworm,\\n        },\\n        {\\n            filename: FILES.SQL_INJECT,\\n            cmd: ns.sqlinject,\\n        },\\n    ];\\n    const FILES_TO_COPY = [\\n        SCRIPTS.SIMPLE_GROW,\\n        SCRIPTS.SIMPLE_HACK,\\n        SCRIPTS.SIMPLE_WEAKEN,\\n    ];\\n    const curPrograms = PORT_PROGRAMS.filter(({ filename }) => ns.fileExists(filename, HOSTS.HOME));\\n    const remainingServers = getAllServers(ns).filter((server) => !activeServers.some((s) => s.host === server.host));\\n    const newServers = [];\\n    for (const server of remainingServers) {\\n        if (!ns.hasRootAccess(server.host)) {\\n            if (ns.getServerRequiredHackingLevel(server.host) < ns.getHackingLevel() &&\\n                ns.getServerNumPortsRequired(server.host) <= curPrograms.length) {\\n                curPrograms.forEach((prog) => prog.cmd(server.host));\\n                ns.nuke(server.host);\\n            }\\n        }\\n        if (ns.hasRootAccess(server.host)) {\\n            newServers.push(server);\\n            ns.scp(FILES_TO_COPY, server.host, HOSTS.HOME);\\n        }\\n    }\\n    if (newServers.length > 0) {\\n        ns.toast(`New servers available for hacking: ${newServers\\n            .map((s) => s.host)\\n            .join(', ')}`);\\n    }\\n    return newServers;\\n};\\nconst countServerThreads = (ns, server) => {\\n    const scriptRam = Math.max(ns.getScriptRam(SCRIPTS.SIMPLE_GROW, server), ns.getScriptRam(SCRIPTS.SIMPLE_HACK, server), ns.getScriptRam(SCRIPTS.SIMPLE_WEAKEN, server));\\n    let availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n    if (server === HOSTS.HOME) {\\n        availableRam = Math.max(0, availableRam - HOME_RESERVED_RAM_GB);\\n    }\\n    return Math.floor(availableRam / scriptRam);\\n};\\nconst countThreads = (ns, servers) => servers.reduce((acc, server) => acc + countServerThreads(ns, server.host), 0);\\nconst getThreadsForGrow = (totalThreads) => {\\n    // TODO: Implement logic when Formulas API is available\\n    const growThreads = Math.floor((11 * totalThreads) / 12);\\n    const weakenThreads = totalThreads - growThreads;\\n    return { growThreads, weakenThreads };\\n};\\nconst getThreadsForHack = (totalThreads) => {\\n    // TODO: Implement logic when Formulas API is available\\n    const hackThreads = Math.floor((1 * totalThreads) / 36);\\n    const growThreads = Math.floor((32 * totalThreads) / 36);\\n    const weakenThreads = totalThreads - hackThreads - growThreads;\\n    return {\\n        hackThreads,\\n        growThreads,\\n        weakenThreads,\\n    };\\n};\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    const target = ns.args[0];\\n    if (!target) {\\n        ns.tprint('Missing target argument');\\n        ns.exit();\\n    }\\n    const activeServers = [];\\n    const minSecurity = ns.getServerMinSecurityLevel(target);\\n    const maxMoney = ns.getServerMaxMoney(target);\\n    const ui = new UI(ns, target, { minSecurity, maxMoney }, 'Hack v5');\\n    ns.atExit(() => {\\n        ui.destroy();\\n    });\\n    while (true) {\\n        ns.print('Looking for new servers...');\\n        const newServers = nukeServers(ns, activeServers);\\n        activeServers.push(...newServers);\\n        if (newServers.length > 0) {\\n            ns.print(`Found ${newServers.length} new servers: ${newServers\\n                .map((s) => s.host)\\n                .join(', ')}`);\\n        }\\n        else {\\n            ns.print('No new servers found');\\n        }\\n        const totalThreads = countThreads(ns, activeServers);\\n        const curSecurity = ns.getServerSecurityLevel(target);\\n        const curMoney = ns.getServerMoneyAvailable(target);\\n        ui.setSecurity(curSecurity);\\n        ui.setMoney(curMoney);\\n        if (totalThreads === 0) {\\n            // Happens when hack-all.js is killed while hacking scripts are running\\n            ns.print('No threads available. Waiting...');\\n            ns.sleep(1000);\\n            continue;\\n        }\\n        const events = [];\\n        const pushEvent = (script, threads, startT, endT) => {\\n            events.push({\\n                type: 'script-start',\\n                script,\\n                threads,\\n                t: startT,\\n            });\\n            events.push({\\n                type: 'script-end',\\n                script,\\n                t: endT,\\n            });\\n        };\\n        if (curSecurity > minSecurity) {\\n            const weakenTime = ns.getWeakenTime(target);\\n            ui.addTimer(`Weaken (${totalThreads})`, weakenTime);\\n            pushEvent('weaken', totalThreads, 0, weakenTime);\\n        }\\n        else if (curMoney < maxMoney) {\\n            const { growThreads, weakenThreads } = getThreadsForGrow(totalThreads);\\n            const growTime = ns.getGrowTime(target);\\n            const weakenTime = ns.getWeakenTime(target);\\n            const weakenDelay = Math.max(0, growTime - weakenTime + OFFSET_MS);\\n            ui.addTimer(`Grow (${growThreads})`, growTime);\\n            ui.addTimer(`Weaken (${weakenThreads})`, weakenDelay + weakenTime);\\n            pushEvent('grow', growThreads, 0, growTime);\\n            pushEvent('weaken', weakenThreads, weakenDelay, weakenDelay + weakenTime);\\n        }\\n        else {\\n            const { hackThreads, growThreads, weakenThreads } = getThreadsForHack(totalThreads);\\n            const hackTime = ns.getHackTime(target);\\n            const growTime = ns.getGrowTime(target);\\n            const weakenTime = ns.getWeakenTime(target);\\n            const growDelay = Math.max(0, hackTime - growTime + OFFSET_MS);\\n            const weakenDelay = Math.max(0, growDelay + growTime - weakenTime + OFFSET_MS);\\n            ui.addTimer(`Hack (${hackThreads})`, hackTime);\\n            ui.addTimer(`Grow (${growThreads})`, growDelay + growTime);\\n            ui.addTimer(`Weaken (${weakenThreads})`, weakenDelay + weakenTime);\\n            pushEvent('hack', hackThreads, 0, hackTime);\\n            pushEvent('grow', growThreads, growDelay, growDelay + growTime);\\n            pushEvent('weaken', weakenThreads, weakenDelay, weakenDelay + weakenTime);\\n        }\\n        events.sort((a, b) => a.t - b.t);\\n        let elapsedTime = 0;\\n        for (const event of events) {\\n            await ns.sleep(event.t - elapsedTime);\\n            elapsedTime = event.t;\\n            const script = event.script === 'grow'\\n                ? SCRIPTS.SIMPLE_GROW\\n                : event.script === 'hack'\\n                    ? SCRIPTS.SIMPLE_HACK\\n                    : SCRIPTS.SIMPLE_WEAKEN;\\n            if (event.type === 'script-start') {\\n                let threadCnt = 0;\\n                for (const server of activeServers) {\\n                    const availableThreads = countServerThreads(ns, server.host);\\n                    const nThreads = Math.min(availableThreads, event.threads - threadCnt);\\n                    nThreads > 0 && ns.exec(script, server.host, nThreads, target);\\n                    threadCnt += nThreads;\\n                }\\n                ns.print(`Started ${script} with ${threadCnt} threads (expected: ${event.threads})`);\\n            }\\n            else {\\n                // Wait for all scripts to finish\\n                for (const server of activeServers) {\\n                    if (ns.isRunning(script, server.host, target)) {\\n                        await ns.sleep(SCRIPT_FINISH_WAIT_TIME_MS);\\n                        elapsedTime += SCRIPT_FINISH_WAIT_TIME_MS;\\n                    }\\n                }\\n                if (event.script === 'grow' || event.script === 'hack') {\\n                    ui.setMoney(ns.getServerMoneyAvailable(target));\\n                }\\n                ui.setSecurity(ns.getServerSecurityLevel(target));\\n                ns.print(`Finished running ${script}`);\\n            }\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay1hbGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9oYWNrLWFsbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7R0FLRztBQUlILE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQTtBQUNwQyxPQUFPLEVBQUUsYUFBYSxFQUFVLE1BQU0sdUJBQXVCLENBQUE7QUFDN0QsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLE1BQU0seUJBQXlCLENBQUE7QUFpQi9ELE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQTtBQUNyQixNQUFNLDBCQUEwQixHQUFHLEdBQUcsQ0FBQTtBQUN0QyxNQUFNLG9CQUFvQixHQUFHLENBQUMsQ0FBQTtBQUU5QixNQUFNLFdBQVcsR0FBRyxDQUFDLEVBQU0sRUFBRSxhQUF1QixFQUFFLEVBQUU7SUFDdEQsTUFBTSxhQUFhLEdBQUc7UUFDcEI7WUFDRSxRQUFRLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDekIsR0FBRyxFQUFFLEVBQUUsQ0FBQyxRQUFRO1NBQ2pCO1FBQ0Q7WUFDRSxRQUFRLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDekIsR0FBRyxFQUFFLEVBQUUsQ0FBQyxRQUFRO1NBQ2pCO1FBQ0Q7WUFDRSxRQUFRLEVBQUUsS0FBSyxDQUFDLFVBQVU7WUFDMUIsR0FBRyxFQUFFLEVBQUUsQ0FBQyxTQUFTO1NBQ2xCO1FBQ0Q7WUFDRSxRQUFRLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDekIsR0FBRyxFQUFFLEVBQUUsQ0FBQyxRQUFRO1NBQ2pCO1FBQ0Q7WUFDRSxRQUFRLEVBQUUsS0FBSyxDQUFDLFVBQVU7WUFDMUIsR0FBRyxFQUFFLEVBQUUsQ0FBQyxTQUFTO1NBQ2xCO0tBQ0YsQ0FBQTtJQUVELE1BQU0sYUFBYSxHQUFHO1FBQ3BCLE9BQU8sQ0FBQyxXQUFXO1FBQ25CLE9BQU8sQ0FBQyxXQUFXO1FBQ25CLE9BQU8sQ0FBQyxh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\",\"filename\":\"scripts/hack-all.js\",\"server\":\"home\"}}],[\"scripts/hack-ui.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatTime } from 'scripts/utils/time';\\nexport class UI {\\n    id;\\n    containerId;\\n    securityId;\\n    moneyId;\\n    timersId;\\n    minSecurity;\\n    maxMoney;\\n    ns;\\n    title;\\n    constructor(ns, id, stats, title) {\\n        this.ns = ns;\\n        this.id = id;\\n        this.containerId = `hack-status-${id}`;\\n        this.securityId = this.containerId + '--security';\\n        this.moneyId = this.containerId + '--money';\\n        this.timersId = this.containerId + '--timers';\\n        this.minSecurity = stats.minSecurity;\\n        this.maxMoney = stats.maxMoney;\\n        this.title = title;\\n        this.init();\\n    }\\n    destroy() {\\n        const doc = eval('document');\\n        const container = doc.getElementById(this.containerId);\\n        if (container) {\\n            doc.body.removeChild(container);\\n        }\\n    }\\n    init() {\\n        const doc = eval('document');\\n        if (doc.getElementById(this.containerId)) {\\n            return;\\n        }\\n        // TODO: Make this draggable\\n        const container = doc.createElement('div');\\n        container.id = this.containerId;\\n        container.style.position = 'fixed';\\n        container.style.bottom = '2rem';\\n        container.style.right = '0';\\n        container.style.display = 'flex';\\n        container.style.flexDirection = 'column';\\n        container.style.fontFamily =\\n            '\\\"Lucida Console\\\", \\\"Lucida Sans Unicode\\\", \\\"Fira Mono\\\", Consolas, \\\"Courier New\\\", Courier, monospace, \\\"Times New Roman\\\"';\\n        container.style.zIndex = '100';\\n        container.style.color = '#0c0';\\n        container.style.borderStyle = 'solid';\\n        container.style.borderColor = 'rgb(128, 128, 128)';\\n        container.style.borderWidth = '1px';\\n        container.style.padding = '0.5rem';\\n        const title = doc.createElement('div');\\n        title.style.padding = '0.5rem';\\n        title.style.alignSelf = 'center';\\n        title.innerText = this.title;\\n        title.style.fontWeight = 'bold';\\n        container.append(title);\\n        const target = doc.createElement('div');\\n        target.innerText = `Target: ${this.id}`;\\n        container.append(target);\\n        const security = doc.createElement('div');\\n        security.id = this.securityId;\\n        security.innerText = `Security: 0 (min: ${this.minSecurity})`;\\n        container.append(security);\\n        const money = doc.createElement('div');\\n        money.id = this.moneyId;\\n        money.innerText = `Money: 0 (max: ${this.maxMoney})`;\\n        container.append(money);\\n        const timers = doc.createElement('div');\\n        timers.id = this.timersId;\\n        timers.style.marginTop = '1rem';\\n        container.append(timers);\\n        doc.body.append(container);\\n    }\\n    setSecurity(security) {\\n        const doc = eval('document');\\n        const el = doc.getElementById(this.securityId);\\n        if (el) {\\n            el.innerText = `Security: ${security.toFixed(3)} (min: ${this.minSecurity})`;\\n        }\\n    }\\n    setMoney(money) {\\n        const doc = eval('document');\\n        const el = doc.getElementById(this.moneyId);\\n        if (el) {\\n            el.innerText = `Money: ${this.ns.formatNumber(money)} (max: ${this.ns.formatNumber(this.maxMoney)})`;\\n        }\\n    }\\n    addTimer(label, time) {\\n        const doc = eval('document');\\n        const now = performance.now();\\n        const target = now + time;\\n        const el = doc.createElement('div');\\n        const container = doc.getElementById(this.timersId);\\n        const refresh = () => {\\n            const remTime = target - performance.now();\\n            if (remTime < 0) {\\n                container?.removeChild(el);\\n                return;\\n            }\\n            el.innerText = `${label}: ${formatTime(remTime)}`;\\n            setTimeout(refresh, 200);\\n        };\\n        refresh();\\n        container?.append(el);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay11aS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL2hhY2stdWkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG9CQUFvQixDQUFBO0FBRS9DLE1BQU0sT0FBTyxFQUFFO0lBQ2IsRUFBRSxDQUFRO0lBQ1YsV0FBVyxDQUFRO0lBQ25CLFVBQVUsQ0FBUTtJQUNsQixPQUFPLENBQVE7SUFDZixRQUFRLENBQVE7SUFDaEIsV0FBVyxDQUFRO0lBQ25CLFFBQVEsQ0FBUTtJQUNoQixFQUFFLENBQUk7SUFDTixLQUFLLENBQVE7SUFFYixZQUNFLEVBQU0sRUFDTixFQUFVLEVBQ1YsS0FBZ0QsRUFDaEQsS0FBYTtRQUViLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFBO1FBQ1osSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUE7UUFDWixJQUFJLENBQUMsV0FBVyxHQUFHLGVBQWUsRUFBRSxFQUFFLENBQUE7UUFDdEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsV0FBVyxHQUFHLFlBQVksQ0FBQTtRQUNqRCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLEdBQUcsU0FBUyxDQUFBO1FBQzNDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUE7UUFDN0MsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFBO1FBQ3BDLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQTtRQUM5QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQTtRQUVsQixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUE7SUFDYixDQUFDO0lBRUQsT0FBTztRQUNMLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQWEsQ0FBQTtRQUN4QyxNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUV0RCxJQUFJLFNBQVMsRUFBRTtZQUNiLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFBO1NBQ2hDO0lBQ0gsQ0FBQztJQUVELElBQUk7UUFDRixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFhLENBQUE7UUFFeEMsSUFBSSxHQUFHLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRTtZQUN4QyxPQUFNO1NBQ1A7UUFFRCw0QkFBNEI7UUFDNUIsTUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUMxQyxTQUFTLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUE7UUFDL0IsU0FBUyxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFBO1FBQ2xDLFNBQVMsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQTtRQUMvQixTQUFTLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUE7UUFDM0IsU0FBUyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFBO1FBQ2hDLFNBQVMsQ0FBQyxLQUFLLENBQUMsYUFBYSxHQUFHLFFBQVEsQ0FBQTtRQUN4QyxTQUFTLENBQUMsS0FBSyxDQUFDLFVBQVU7WUFDeEIsc0hBQXNILENBQUE7UUFDeEgsU0FBUyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFBO1FBQzlCLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQTtRQUM5QixTQUFTLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUE7UUFDckMsU0FBUyxDQUFDLEtBQUssQ0FBQyxXQUFXLEdBQUcsb0JBQW9CLENBQUE7UUFDbEQsU0FBUyxDQUFDLEtBQUssQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFBO1FBQ25DLFNBQVMsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQTtRQUVsQyxNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQ3RDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQTtRQUM5QixLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUE7UUFDaEMsS0FBSyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFBO1FBQzVCLEtBQUssQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQTtRQUMvQixTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBRXZCLE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDdkMsTUFBTSxDQUFDLFNBQVMsR0FBRyxXQUFXLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQTtRQUN2QyxTQUFTLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBRXhCLE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDekMsUUFBUSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFBO1FBQzdCLFFBQVEsQ0FBQyxTQUFTLEdBQUcscUJBQXFCLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQTtRQUM3RCxTQUFTLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBRTFCLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDdEMsS0FBSyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFBO1FBQ3ZCLEtBQUssQ0FBQyxTQUFTLEdBQUcsa0JBQWtCLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQTtRQUNwRCxTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBRXZCLE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDdkMsTUFBTSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFBO1FBQ3pCLE1BQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQTtRQUMvQixTQUFTLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBRXhCLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBQzVCLENBQUM7SUFFRCxXQUFXLENBQUMsUUFBZ0I7UUFDMUIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBYSxDQUFBO1FBRXhDLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBRTlDLElBQUksRUFBRSxFQUFFO1lBQ04sRUFBRSxDQUFDLFNBQVMsR0FBRyxhQUFhLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFVBQzdDLElBQUksQ0FBQyxXQUNQLEdBQUcsQ0FBQTtTQUNKO0lBQ0gsQ0FBQztJQUVELFFBQVEsQ0FBQyxLQUFhO1FBQ3BCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQWEsQ0FBQTtRQUV4QyxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUUzQyxJQUFJLEVBQUUsRUFBRTtZQUNOLEVBQUUsQ0FBQyxTQUFTLEdBQUcsVUFBVSxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FDM0MsS0FBSyxDQUNOLFVBQVUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUE7U0FDbEQ7SUFDSCxDQUFDO0lBRUQsUUFBUSxDQUFDLEtBQWEsRUFBRSxJQUFZO1FBQ2xDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQWEsQ0FBQTtRQUV4QyxNQUFNLEdBQUcsR0FBRyxXQUFXLENBQUMsR0FBRyxFQUFFLENBQUE7UUFDN0IsTUFBTSxNQUFNLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQTtRQUV6QixNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQ25DLE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBRW5ELE1BQU0sT0FBTyxHQUFHLEdBQUcsRUFBRTtZQUNuQixNQUFNLE9BQU8sR0FBRyxNQUFNLEdBQUcsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFBO1lBRTFDLElBQUksT0FBTyxHQUFHLENBQUMsRUFBRTtnQkFDZixTQUFTLEVBQUUsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFBO2dCQUMxQixPQUFNO2FBQ1A7WUFFRCxFQUFFLENBQUMsU0FBUyxHQUFHLEdBQUcsS0FBSyxLQUFLLFVBQVUsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFBO1lBQ2pELFVBQVUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUE7UUFDMUIsQ0FBQyxDQUFBO1FBRUQsT0FBTyxFQUFFLENBQUE7UUFDVCxTQUFTLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ3ZCLENBQUM7Q0FDRiJ9\",\"filename\":\"scripts/hack-ui.js\",\"server\":\"home\"}}],[\"scripts/hack-tracker.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay10cmFja2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NjcmlwdHMvaGFjay10cmFja2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIifQ==\",\"filename\":\"scripts/hack-tracker.js\",\"server\":\"home\"}}],[\"scripts/corporations/tea.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { maximizeMoraleAndEnergy, waitForCycle, } from 'scripts/corporations/utils';\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    while (true) {\\n        const industries = ns.args.length > 0\\n            ? ns.args\\n            : [\\n                ...new Set(ns.corporation\\n                    .getCorporation()\\n                    .divisions.map((divName) => ns.corporation.getDivision(divName).type)),\\n            ];\\n        await maximizeMoraleAndEnergy(ns, industries);\\n        await waitForCycle(ns);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29ycG9yYXRpb25zL3RlYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLFlBQVksR0FDYixNQUFNLDRCQUE0QixDQUFBO0FBRW5DLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUVwQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sVUFBVSxHQUNkLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUM7WUFDaEIsQ0FBQyxDQUFFLEVBQUUsQ0FBQyxJQUEyQjtZQUNqQyxDQUFDLENBQUM7Z0JBQ0UsR0FBRyxJQUFJLEdBQUcsQ0FDUixFQUFFLENBQUMsV0FBVztxQkFDWCxjQUFjLEVBQUU7cUJBQ2hCLFNBQVMsQ0FBQyxHQUFHLENBQ1osQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDdEQsQ0FDSjthQUNGLENBQUE7UUFFUCxNQUFNLHVCQUF1QixDQUFDLEVBQUUsRUFBRSxVQUFVLENBQUMsQ0FBQTtRQUM3QyxNQUFNLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQTtLQUN2QjtBQUNILENBQUMifQ==\",\"filename\":\"scripts/corporations/tea.js\",\"server\":\"home\"}}],[\"scripts/corporations/constants.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CITIES = {\\n    SECTOR_12: 'Sector-12',\\n    AEVUM: 'Aevum',\\n    CHONGQING: 'Chongqing',\\n    NEW_TOKYO: 'New Tokyo',\\n    ISHIMA: 'Ishima',\\n    VOLHAVEN: 'Volhaven',\\n};\\nexport const CITY_NAMES = Object.values(CITIES);\\nexport const MATERIALS = {\\n    MINERALS: 'Minerals',\\n    ORE: 'Ore',\\n    WATER: 'Water',\\n    FOOD: 'Food',\\n    PLANTS: 'Plants',\\n    METAL: 'Metal',\\n    HARDWARE: 'Hardware',\\n    CHEMICALS: 'Chemicals',\\n    DRUGS: 'Drugs',\\n    ROBOTS: 'Robots',\\n    AI_CORES: 'AI Cores',\\n    REAL_ESTATE: 'Real Estate',\\n};\\nexport const EMPLOYEE_POSITIONS = {\\n    UNASSIGNED: 'Unassigned',\\n    OPERATIONS: 'Operations',\\n    ENGINEER: 'Engineer',\\n    BUSINESS: 'Business',\\n    MANAGEMENT: 'Management',\\n    R_AND_D: 'Research & Development',\\n    INTERN: 'Intern',\\n};\\nexport const UNLOCKABLES = {\\n    EXPORT: 'Export',\\n};\\nexport const UPGRADES = {\\n    WILSON_ANALYTICS: 'Wilson Analytics',\\n    ABC_SALESBOTS: 'ABC SalesBots',\\n    SMART_STORAGE: 'Smart Storage',\\n    FOCUS_WIRES: 'FocusWires',\\n    NEURAL_ACCELERATORS: 'Neural Accelerators',\\n    PROJECT_INSIGHT: 'Project Insight',\\n    NNII: 'Nuoptimal Nootropic Injector Implants',\\n    SMART_FACTORIES: 'Smart Factories',\\n};\\nexport const INDUSTRIES = {\\n    RESTAURANT: 'Restaurant',\\n    TOBACCO: 'Tobacco',\\n    AGRICULTURE: 'Agriculture',\\n    CHEMICAL: 'Chemical',\\n};\\nexport const RESEARCHES = {\\n    HI_TECH: 'Hi-Tech R&D Laboratory',\\n    MARKET_TA_I: 'Market-TA.I',\\n    MARKET_TA_II: 'Market-TA.II',\\n};\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29ycG9yYXRpb25zL2NvbnN0YW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFPQSxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUc7SUFDcEIsU0FBUyxFQUFFLFdBQVc7SUFDdEIsS0FBSyxFQUFFLE9BQU87SUFDZCxTQUFTLEVBQUUsV0FBVztJQUN0QixTQUFTLEVBQUUsV0FBVztJQUN0QixNQUFNLEVBQUUsUUFBUTtJQUNoQixRQUFRLEVBQUUsVUFBVTtDQUM0QixDQUFBO0FBRWxELE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBRS9DLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRztJQUN2QixRQUFRLEVBQUUsVUFBVTtJQUNwQixHQUFHLEVBQUUsS0FBSztJQUNWLEtBQUssRUFBRSxPQUFPO0lBQ2QsSUFBSSxFQUFFLE1BQU07SUFDWixNQUFNLEVBQUUsUUFBUTtJQUNoQixLQUFLLEVBQUUsT0FBTztJQUNkLFFBQVEsRUFBRSxVQUFVO0lBQ3BCLFNBQVMsRUFBRSxXQUFXO0lBQ3RCLEtBQUssRUFBRSxPQUFPO0lBQ2QsTUFBTSxFQUFFLFFBQVE7SUFDaEIsUUFBUSxFQUFFLFVBQVU7SUFDcEIsV0FBVyxFQUFFLGFBQWE7Q0FDeUIsQ0FBQTtBQUVyRCxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRztJQUNoQyxVQUFVLEVBQUUsWUFBWTtJQUN4QixVQUFVLEVBQUUsWUFBWTtJQUN4QixRQUFRLEVBQUUsVUFBVTtJQUNwQixRQUFRLEVBQUUsVUFBVTtJQUNwQixVQUFVLEVBQUUsWUFBWTtJQUN4QixPQUFPLEVBQUUsd0JBQXdCO0lBQ2pDLE1BQU0sRUFBRSxRQUFRO0NBQ3VDLENBQUE7QUFFekQsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHO0lBQ3pCLE1BQU0sRUFBRSxRQUFRO0NBQ1IsQ0FBQTtBQUVWLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRztJQUN0QixnQkFBZ0IsRUFBRSxrQkFBa0I7SUFDcEMsYUFBYSxFQUFFLGVBQWU7SUFDOUIsYUFBYSxFQUFFLGVBQWU7SUFDOUIsV0FBVyxFQUFFLFlBQVk7SUFDekIsbUJBQW1CLEVBQUUscUJBQXFCO0lBQzFDLGVBQWUsRUFBRSxpQkFBaUI7SUFDbEMsSUFBSSxFQUFFLHVDQUF1QztJQUM3QyxlQUFlLEVBQUUsaUJBQWlCO0NBQzFCLENBQUE7QUFFVixNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUc7SUFDeEIsVUFBVSxFQUFFLFlBQVk7SUFDeEIsT0FBTyxFQUFFLFNBQVM7SUFDbEIsV0FBVyxFQUFFLGFBQWE7SUFDMUIsUUFBUSxFQUFFLFVBQVU7Q0FDK0IsQ0FBQTtBQUVyRCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUc7SUFDeEIsT0FBTyxFQUFFLHdCQUF3QjtJQUNqQyxXQUFXLEVBQUUsYUFBYTtJQUMxQixZQUFZLEVBQUUsY0FBYztDQUNwQixDQUFBIn0=\",\"filename\":\"scripts/corporations/constants.js\",\"server\":\"home\"}}],[\"scripts/corporations/fraud.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { MATERIALS } from 'scripts/corporations/constants';\\nconst getCurState = (ns) => ns.corporation.getCorporation().state;\\nexport const waitForCycle = async (ns) => {\\n    const curState = getCurState(ns);\\n    while (curState === getCurState(ns)) {\\n        await ns.sleep(100);\\n    }\\n    while (curState !== getCurState(ns)) {\\n        await ns.sleep(100);\\n    }\\n};\\nexport const commitFraud = async (ns) => {\\n    for (const divisionName of ns.corporation.getCorporation().divisions) {\\n        const division = ns.corporation.getDivision(divisionName);\\n        for (const cityName of division.cities) {\\n            const warehouse = ns.corporation.getWarehouse(divisionName, cityName);\\n            const freeSpace = warehouse.size - warehouse.sizeUsed;\\n            const realEstateObj = ns.corporation.getMaterialData(MATERIALS.REAL_ESTATE);\\n            const buyAmt = freeSpace / realEstateObj.size;\\n            ns.corporation.buyMaterial(divisionName, cityName, realEstateObj.name, buyAmt / 10);\\n            ns.print(`Set ${realEstateObj.name} buy amount in ${cityName} to ${buyAmt}`);\\n        }\\n    }\\n    ns.print('Waiting for cycle');\\n    await waitForCycle(ns);\\n    for (const divisionName of ns.corporation.getCorporation().divisions) {\\n        const division = ns.corporation.getDivision(divisionName);\\n        for (const cityName of division.cities) {\\n            ns.corporation.buyMaterial(divisionName, cityName, MATERIALS.REAL_ESTATE, 0);\\n            ns.print(`Set ${MATERIALS.REAL_ESTATE} buy amount in ${cityName} to 0`);\\n        }\\n    }\\n};\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    await commitFraud(ns);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJhdWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9jb3Jwb3JhdGlvbnMvZnJhdWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdDQUFnQyxDQUFBO0FBRTFELE1BQU0sV0FBVyxHQUFHLENBQUMsRUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLGNBQWMsRUFBRSxDQUFDLEtBQUssQ0FBQTtBQUVyRSxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsS0FBSyxFQUFFLEVBQU0sRUFBRSxFQUFFO0lBQzNDLE1BQU0sUUFBUSxHQUFHLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUVoQyxPQUFPLFFBQVEsS0FBSyxXQUFXLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFDbkMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0tBQ3BCO0lBRUQsT0FBTyxRQUFRLEtBQUssV0FBVyxDQUFDLEVBQUUsQ0FBQyxFQUFFO1FBQ25DLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtLQUNwQjtBQUNILENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxLQUFLLEVBQUUsRUFBTSxFQUFFLEVBQUU7SUFDMUMsS0FBSyxNQUFNLFlBQVksSUFBSSxFQUFFLENBQUMsV0FBVyxDQUFDLGNBQWMsRUFBRSxDQUFDLFNBQVMsRUFBRTtRQUNwRSxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQTtRQUN6RCxLQUFLLE1BQU0sUUFBUSxJQUFJLFFBQVEsQ0FBQyxNQUFNLEVBQUU7WUFDdEMsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQyxDQUFBO1lBQ3JFLE1BQU0sU0FBUyxHQUFHLFNBQVMsQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQTtZQUNyRCxNQUFNLGFBQWEsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FDbEQsU0FBUyxDQUFDLFdBQVcsQ0FDdEIsQ0FBQTtZQUNELE1BQU0sTUFBTSxHQUFHLFNBQVMsR0FBRyxhQUFhLENBQUMsSUFBSSxDQUFBO1lBRTdDLEVBQUUsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUN4QixZQUFZLEVBQ1osUUFBUSxFQUNSLGFBQWEsQ0FBQyxJQUFJLEVBQ2xCLE1BQU0sR0FBRyxFQUFFLENBQ1osQ0FBQTtZQUVELEVBQUUsQ0FBQyxLQUFLLENBQ04sT0FBTyxhQUFhLENBQUMsSUFBSSxrQkFBa0IsUUFBUSxPQUFPLE1BQU0sRUFBRSxDQUNuRSxDQUFBO1NBQ0Y7S0FDRjtJQUVELEVBQUUsQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQTtJQUM3QixNQUFNLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUV0QixLQUFLLE1BQU0sWUFBWSxJQUFJLEVBQUUsQ0FBQyxXQUFXLENBQUMsY0FBYyxFQUFFLENBQUMsU0FBUyxFQUFFO1FBQ3BFLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFBO1FBQ3pELEtBQUssTUFBTSxRQUFRLElBQUksUUFBUSxDQUFDLE1BQU0sRUFBRTtZQUN0QyxFQUFFLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FDeEIsWUFBWSxFQUNaLFFBQVEsRUFDUixTQUFTLENBQUMsV0FBVyxFQUNyQixDQUFDLENBQ0YsQ0FBQTtZQUNELEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxTQUFTLENBQUMsV0FBVyxrQkFBa0IsUUFBUSxPQUFPLENBQUMsQ0FBQTtTQUN4RTtLQUNGO0FBQ0gsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ3BCLE1BQU0sV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0FBQ3ZCLENBQUMifQ==\",\"filename\":\"scripts/corporations/fraud.js\",\"server\":\"home\"}}],[\"scripts/corporations/main.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Round1 from 'scripts/corporations/round-1';\\nimport * as Round2 from 'scripts/corporations/round-2';\\nimport * as Round3 from 'scripts/corporations/round-3';\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    const roundsToDo = ns.args;\\n    for (const round of roundsToDo) {\\n        switch (round) {\\n            case 1:\\n                await Round1.doit(ns);\\n                break;\\n            case 2:\\n                await Round2.doit(ns);\\n                break;\\n            case 3:\\n                await Round3.doit(ns);\\n                break;\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvcnBvcmF0aW9ucy9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sS0FBSyxNQUFNLE1BQU0sOEJBQThCLENBQUE7QUFDdEQsT0FBTyxLQUFLLE1BQU0sTUFBTSw4QkFBOEIsQ0FBQTtBQUN0RCxPQUFPLEtBQUssTUFBTSxNQUFNLDhCQUE4QixDQUFBO0FBRXRELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUVwQixNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFBO0lBRTFCLEtBQUssTUFBTSxLQUFLLElBQUksVUFBVSxFQUFFO1FBQzlCLFFBQVEsS0FBSyxFQUFFO1lBQ2IsS0FBSyxDQUFDO2dCQUNKLE1BQU0sTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtnQkFDckIsTUFBSztZQUVQLEtBQUssQ0FBQztnQkFDSixNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7Z0JBQ3JCLE1BQUs7WUFFUCxLQUFLLENBQUM7Z0JBQ0osTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO2dCQUNyQixNQUFLO1NBQ1I7S0FDRjtBQUNILENBQUMifQ==\",\"filename\":\"scripts/corporations/main.js\",\"server\":\"home\"}}],[\"scripts/corporations/round-1.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\n * Implements corporation management strategy for 1st investment round.\\n * Expects corporation in initial state.\\n * As of 2.3.1, this should get an offer between 16t and 18t.\\n */\\nimport { CITY_NAMES, EMPLOYEE_POSITIONS, INDUSTRIES, MATERIALS, UPGRADES, } from 'scripts/corporations/constants';\\nimport { expandToAllCities, expandWarehouse, findInvestors, hireEmployees, maximizeMoraleAndEnergy, upgradeToLevel, waitForCycle, } from 'scripts/corporations/utils';\\nconst DIVISION_NAME = 'Nepfoods';\\nconst INDUSTRY = 'Restaurant';\\nconst WAREHOUSE_CAP = 200;\\nconst N_EMPLOYEES = 6;\\nconst WILSON_ANALYTICS_UPGRADES = 1;\\nconst ABC_SALESBOTS_UPGRADES = 2;\\nconst N_ADVERT_HIRES = 27;\\nexport const doit = async (ns) => {\\n    ns.print('Creating new Restaurant division');\\n    ns.corporation.expandIndustry(INDUSTRY, DIVISION_NAME);\\n    ns.print('Expanding to all cities');\\n    expandToAllCities(ns, DIVISION_NAME);\\n    ns.print('Expanding warehouses');\\n    for (const cityName of CITY_NAMES) {\\n        expandWarehouse(ns, DIVISION_NAME, cityName, WAREHOUSE_CAP);\\n    }\\n    ns.print('Hiring employees');\\n    for (const cityName of CITY_NAMES) {\\n        hireEmployees(ns, DIVISION_NAME, cityName, N_EMPLOYEES);\\n        ns.corporation.setAutoJobAssignment(DIVISION_NAME, cityName, EMPLOYEE_POSITIONS.BUSINESS, N_EMPLOYEES);\\n    }\\n    ns.print('Buying upgrades');\\n    upgradeToLevel(ns, UPGRADES.WILSON_ANALYTICS, WILSON_ANALYTICS_UPGRADES);\\n    upgradeToLevel(ns, UPGRADES.ABC_SALESBOTS, ABC_SALESBOTS_UPGRADES);\\n    ns.print('Hiring AdVert');\\n    for (let i = 0; i < N_ADVERT_HIRES; i++) {\\n        ns.corporation.hireAdVert(DIVISION_NAME);\\n    }\\n    ns.print('Maximizing employee morale and energy');\\n    await maximizeMoraleAndEnergy(ns, [INDUSTRIES.RESTAURANT]);\\n    ns.print('Filling warehouses with Real Estate');\\n    for (const cityName of CITY_NAMES) {\\n        const warehouse = ns.corporation.getWarehouse(DIVISION_NAME, cityName);\\n        const freeSpace = warehouse.size - warehouse.sizeUsed;\\n        const realEstateObj = ns.corporation.getMaterialData(MATERIALS.REAL_ESTATE);\\n        const buyAmt = freeSpace / realEstateObj.size;\\n        ns.corporation.buyMaterial(DIVISION_NAME, cityName, realEstateObj.name, buyAmt / 10);\\n    }\\n    await waitForCycle(ns);\\n    for (const cityName of CITY_NAMES) {\\n        ns.corporation.buyMaterial(DIVISION_NAME, cityName, MATERIALS.REAL_ESTATE, 0);\\n    }\\n    ns.print('Starting fraud');\\n    for (const cityName of CITY_NAMES) {\\n        ns.corporation.sellMaterial(DIVISION_NAME, cityName, MATERIALS.REAL_ESTATE, 'MAX', 'MP');\\n    }\\n    return await findInvestors(ns);\\n};\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91bmQtMS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvcnBvcmF0aW9ucy9yb3VuZC0xLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7QUFJSCxPQUFPLEVBQ0wsVUFBVSxFQUNWLGtCQUFrQixFQUNsQixVQUFVLEVBQ1YsU0FBUyxFQUNULFFBQVEsR0FDVCxNQUFNLGdDQUFnQyxDQUFBO0FBQ3ZDLE9BQU8sRUFDTCxpQkFBaUIsRUFDakIsZUFBZSxFQUNmLGFBQWEsRUFDYixhQUFhLEVBQ2IsdUJBQXVCLEVBQ3ZCLGNBQWMsRUFDZCxZQUFZLEdBQ2IsTUFBTSw0QkFBNEIsQ0FBQTtBQUVuQyxNQUFNLGFBQWEsR0FBRyxVQUFVLENBQUE7QUFDaEMsTUFBTSxRQUFRLEdBQXFCLFlBQVksQ0FBQTtBQUMvQyxNQUFNLGFBQWEsR0FBRyxHQUFHLENBQUE7QUFDekIsTUFBTSxXQUFXLEdBQUcsQ0FBQyxDQUFBO0FBQ3JCLE1BQU0seUJBQXlCLEdBQUcsQ0FBQyxDQUFBO0FBQ25DLE1BQU0sc0JBQXNCLEdBQUcsQ0FBQyxDQUFBO0FBQ2hDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQTtBQUV6QixNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUcsS0FBSyxFQUFFLEVBQU0sRUFBRSxFQUFFO0lBQ25DLEVBQUUsQ0FBQyxLQUFLLENBQUMsa0NBQWtDLENBQUMsQ0FBQTtJQUM1QyxFQUFFLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQUE7SUFFdEQsRUFBRSxDQUFDLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFBO0lBQ25DLGlCQUFpQixDQUFDLEVBQUUsRUFBRSxhQUFhLENBQUMsQ0FBQTtJQUVwQyxFQUFFLENBQUMsS0FBSyxDQUFDLHNCQUFzQixDQUFDLENBQUE7SUFDaEMsS0FBSyxNQUFNLFFBQVEsSUFBSSxVQUFVLEVBQUU7UUFDakMsZUFBZSxDQUFD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\",\"filename\":\"scripts/corporations/round-1.js\",\"server\":\"home\"}}],[\"scripts/corporations/utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CITY_NAMES } from 'scripts/corporations/constants';\\nconst getCurState = (ns) => ns.corporation.getCorporation().state;\\nexport const waitForCycle = async (ns) => {\\n    const curState = getCurState(ns);\\n    while (curState === getCurState(ns)) {\\n        await ns.sleep(100);\\n    }\\n    while (curState !== getCurState(ns)) {\\n        await ns.sleep(100);\\n    }\\n};\\nexport const upgradeToLevel = (ns, name, level) => {\\n    const curLevel = ns.corporation.getUpgradeLevel(name);\\n    for (let i = curLevel; i < level; i++) {\\n        ns.corporation.levelUpgrade(name);\\n    }\\n};\\nexport const expandWarehouse = (ns, division, city, capacity) => {\\n    if (!ns.corporation.hasWarehouse(division, city)) {\\n        ns.corporation.purchaseWarehouse(division, city);\\n    }\\n    while (ns.corporation.getWarehouse(division, city).size < capacity) {\\n        ns.corporation.upgradeWarehouse(division, city);\\n    }\\n};\\nexport const expandToAllCities = (ns, division) => {\\n    const curCities = ns.corporation.getDivision(division)\\n        .cities;\\n    for (const cityName of CITY_NAMES) {\\n        if (!curCities.includes(cityName)) {\\n            ns.corporation.expandCity(division, cityName);\\n        }\\n    }\\n};\\nexport const getDivisions = (ns, industries) => ns.corporation\\n    .getCorporation()\\n    .divisions.filter((divName) => industries.includes(ns.corporation.getDivision(divName).type));\\nexport const getDivisionsAndCities = (ns, industries) => {\\n    const dnc = [];\\n    const divisions = getDivisions(ns, industries);\\n    for (const divisionName of divisions) {\\n        for (const cityName of ns.corporation.getDivision(divisionName).cities) {\\n            dnc.push([divisionName, cityName]);\\n        }\\n    }\\n    return dnc;\\n};\\nexport const hireEmployees = (ns, division, city, desiredEmployees) => {\\n    const positionsToOpen = desiredEmployees - ns.corporation.getOffice(division, city).size;\\n    if (positionsToOpen > 0) {\\n        const reqCost = ns.corporation.getOfficeSizeUpgradeCost(division, city, positionsToOpen);\\n        if (reqCost > ns.corporation.getCorporation().funds) {\\n            throw new Error('Insufficient funds to hire employees');\\n        }\\n        ns.corporation.upgradeOfficeSize(division, city, positionsToOpen);\\n    }\\n    while (ns.corporation.getOffice(division, city).numEmployees < desiredEmployees) {\\n        if (!ns.corporation.hireEmployee(division, city)) {\\n            throw new Error('Failed to hire employee');\\n        }\\n    }\\n};\\nexport const buyTeaAndThrowParties = (ns, industries) => {\\n    let minStat = 100;\\n    for (const [divisionName, cityName] of getDivisionsAndCities(ns, industries)) {\\n        const { avgEnergy, avgMorale } = ns.corporation.getOffice(divisionName, cityName);\\n        minStat = Math.min(minStat, avgEnergy, avgMorale);\\n        if (!ns.corporation.buyTea(divisionName, cityName)) {\\n            return -1;\\n        }\\n        const amt = (100.5 - avgMorale) * 100000;\\n        if (!ns.corporation.throwParty(divisionName, cityName, amt)) {\\n            return -1;\\n        }\\n    }\\n    return minStat;\\n};\\nexport const maximizeMoraleAndEnergy = async (ns, industries) => {\\n    while (true) {\\n        const minStat = buyTeaAndThrowParties(ns, industries);\\n        if (minStat < 0) {\\n            return;\\n        }\\n        else if (minStat > 99) {\\n            break;\\n        }\\n        else {\\n            ns.print(`-- Buying tea and throwing parties (min stat: ${minStat.toFixed(3)})`);\\n        }\\n        await waitForCycle(ns);\\n    }\\n};\\nexport const findInvestors = async (ns) => {\\n    let lastOffer = 0;\\n    for (let i = 0;; i++) {\\n        await waitForCycle(ns);\\n        const offer = ns.corporation.getInvestmentOffer();\\n        ns.print(`Offer after cycle ${i + 1}: ${ns.formatNumber(offer.funds)}`);\\n        if (offer.funds <= lastOffer) {\\n            ns.corporation.acceptInvestmentOffer();\\n            ns.print(`Accepted offer of ${ns.formatNumber(offer.funds)}`);\\n            lastOffer = offer.funds;\\n            break;\\n        }\\n        lastOffer = offer.funds;\\n    }\\n    return lastOffer;\\n};\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9jb3Jwb3JhdGlvbnMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdDQUFnQyxDQUFBO0FBRTNELE1BQU0sV0FBVyxHQUFHLENBQUMsRUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLGNBQWMsRUFBRSxDQUFDLEtBQUssQ0FBQTtBQUVyRSxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsS0FBSyxFQUFFLEVBQU0sRUFBRSxFQUFFO0lBQzNDLE1BQU0sUUFBUSxHQUFHLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUVoQyxPQUFPLFFBQVEsS0FBSyxXQUFXLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFDbkMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0tBQ3BCO0lBRUQsT0FBTyxRQUFRLEtBQUssV0FBVyxDQUFDLEVBQUUsQ0FBQyxFQUFFO1FBQ25DLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtLQUNwQjtBQUNILENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxDQUFDLEVBQU0sRUFBRSxJQUFZLEVBQUUsS0FBYSxFQUFFLEVBQUU7SUFDcEUsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUE7SUFFckQsS0FBSyxJQUFJLENBQUMsR0FBRyxRQUFRLEVBQUUsQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNyQyxFQUFFLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQTtLQUNsQztBQUNILENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxDQUM3QixFQUFNLEVBQ04sUUFB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\",\"filename\":\"scripts/corporations/utils.js\",\"server\":\"home\"}}],[\"scripts/corporations/round-2.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\n * Implements corporation management strategy for 2nd investment round.\\n * Expects corporation to have no divisions.\\n * As of 2.3.1, this should get about 20q funds in investment, assuming\\n * round 1 got at least 16t.\\n */\\nimport { EMPLOYEE_POSITIONS, INDUSTRIES, MATERIALS, UPGRADES, } from 'scripts/corporations/constants';\\nimport { expandToAllCities, expandWarehouse, findInvestors, getDivisions, getDivisionsAndCities, hireEmployees, maximizeMoraleAndEnergy, upgradeToLevel, waitForCycle, } from 'scripts/corporations/utils';\\nconst N_DIVISIONS = 20;\\nconst DIVISON_NAME = 'Nepfoods';\\nconst WAREHOUSE_CAP = 1200;\\nconst SMART_STORAGE_LVL = 20;\\nconst WILSON_ANALYTICS_LVL = 10;\\nconst N_EMPLOYEES = 12;\\nconst getRestaurantDivisions = (ns) => getDivisions(ns, [INDUSTRIES.RESTAURANT]);\\nconst getRestaurantCities = (ns) => getDivisionsAndCities(ns, [INDUSTRIES.RESTAURANT]);\\nexport const doit = async (ns) => {\\n    while (ns.corporation.getCorporation().divisions.length > 0) {\\n        ns.print('Please sell all existing divisions');\\n        await ns.sleep(2000);\\n    }\\n    ns.print('Creating Restaurant divisions');\\n    const curRestaurantCnt = getRestaurantDivisions(ns).length;\\n    for (let i = curRestaurantCnt; i < N_DIVISIONS; i++) {\\n        ns.corporation.expandIndustry(INDUSTRIES.RESTAURANT, `${DIVISON_NAME} ${i + 1}`);\\n    }\\n    ns.print('Expanding to all cities');\\n    for (const divisionName of getRestaurantDivisions(ns)) {\\n        expandToAllCities(ns, divisionName);\\n    }\\n    ns.print('Buying upgrades');\\n    upgradeToLevel(ns, UPGRADES.SMART_STORAGE, SMART_STORAGE_LVL);\\n    upgradeToLevel(ns, UPGRADES.WILSON_ANALYTICS, WILSON_ANALYTICS_LVL);\\n    ns.print('Expanding warehouses');\\n    for (const [divisionName, cityName] of getRestaurantCities(ns)) {\\n        expandWarehouse(ns, divisionName, cityName, WAREHOUSE_CAP);\\n    }\\n    ns.print('Hiring employees');\\n    for (const [divisionName, cityName] of getRestaurantCities(ns)) {\\n        hireEmployees(ns, divisionName, cityName, N_EMPLOYEES);\\n        ns.corporation.setAutoJobAssignment(divisionName, cityName, EMPLOYEE_POSITIONS.BUSINESS, N_EMPLOYEES);\\n    }\\n    ns.print('Maximizing employee morale and energy');\\n    await maximizeMoraleAndEnergy(ns, [INDUSTRIES.RESTAURANT]);\\n    ns.print('Hiring AdVert');\\n    let advertCnt = 0;\\n    for (;; advertCnt++) {\\n        const divisionsToHire = getRestaurantDivisions(ns).filter((div) => ns.corporation.getHireAdVertCount(div) <= advertCnt);\\n        const cost = divisionsToHire.reduce((acc, div) => acc + ns.corporation.getHireAdVertCost(div), 0);\\n        if (cost > ns.corporation.getCorporation().funds) {\\n            break;\\n        }\\n        for (const divisionName of divisionsToHire) {\\n            ns.corporation.hireAdVert(divisionName);\\n        }\\n    }\\n    ns.print(`Hired AdVert ${advertCnt} times`);\\n    ns.print('Upgrading FocusWires');\\n    let focusWiresCnt = 0;\\n    while (ns.corporation.getUpgradeLevelCost(UPGRADES.FOCUS_WIRES) <\\n        ns.corporation.getCorporation().funds) {\\n        ns.corporation.levelUpgrade(UPGRADES.FOCUS_WIRES);\\n        focusWiresCnt += 1;\\n    }\\n    ns.print(`Upgraded FocusWires ${focusWiresCnt} times`);\\n    ns.print(`${ns.formatNumber(ns.corporation.getCorporation().funds)} leftover funds before fraud`);\\n    ns.print('Filling warehouses with Real Estate');\\n    for (const [divisionName, cityName] of getRestaurantCities(ns)) {\\n        const warehouse = ns.corporation.getWarehouse(divisionName, cityName);\\n        const freeSpace = warehouse.size - warehouse.sizeUsed;\\n        const buyAmt = freeSpace / ns.corporation.getMaterialData(MATERIALS.REAL_ESTATE).size;\\n        ns.corporation.buyMaterial(divisionName, cityName, MATERIALS.REAL_ESTATE, buyAmt / 10);\\n    }\\n    await waitForCycle(ns);\\n    for (const [divisionName, cityName] of getRestaurantCities(ns)) {\\n        ns.corporation.buyMaterial(divisionName, cityName, MATERIALS.REAL_ESTATE, 0);\\n    }\\n    ns.print(`Starting fraud (leftover funds: ${ns.formatNumber(ns.corporation.getCorporation().funds)})`);\\n    for (const [divisionName, cityName] of getRestaurantCities(ns)) {\\n        ns.corporation.sellMaterial(divisionName, cityName, MATERIALS.REAL_ESTATE, 'MAX', 'MP');\\n    }\\n    return await findInvestors(ns);\\n};\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91bmQtMi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvcnBvcmF0aW9ucy9yb3VuZC0yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7OztHQUtHO0FBSUgsT0FBTyxFQUNMLGtCQUFrQixFQUNsQixVQUFVLEVBQ1YsU0FBUyxFQUNULFFBQVEsR0FDVCxNQUFNLGdDQUFnQyxDQUFBO0FBQ3ZDLE9BQU8sRUFDTCxpQkFBaUIsRUFDakIsZUFBZSxFQUNmLGFBQWEsRUFDYixZQUFZLEVBQ1oscUJBQXFCLEVBQ3JCLGFBQWEsRUFDYix1QkFBdUIsRUFDdkIsY0FBYyxFQUNkLFlBQVksR0FDYixNQUFNLDRCQUE0QixDQUFBO0FBRW5DLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQTtBQUN0QixNQUFNLFlBQVksR0FBRyxVQUFVLENBQUE7QUFDL0IsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFBO0FBQzFCLE1BQU0saUJBQWlCLEdBQUcsRUFBRSxDQUFBO0FBQzVCLE1BQU0sb0JBQW9CLEdBQUcsRUFBRSxDQUFBO0FBQy9CLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQTtBQUV0QixNQUFNLHNCQUFzQixHQUFHLENBQUMsRUFBTSxFQUFFLEVBQUUsQ0FDeEMsWUFBWSxDQUFDLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFBO0FBRTNDLE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxFQUFNLEVBQUUsRUFBRSxDQUNyQyxxQkFBcUIsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQTtBQUVwRCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUcsS0FBSyxFQUFFLEVBQU0sRUFBRSxFQUFFO0lBQ25DLE9BQU8sRUFBRSxDQUFDLFdBQVcsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUMzRCxFQUFFLENBQUMs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\",\"filename\":\"scripts/corporations/round-2.js\",\"server\":\"home\"}}],[\"scripts/corporations/round-3.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CITIES, CITY_NAMES, EMPLOYEE_POSITIONS, INDUSTRIES, MATERIALS, RESEARCHES, UNLOCKABLES, UPGRADES, } from 'scripts/corporations/constants';\\nimport { buyTeaAndThrowParties, expandToAllCities, expandWarehouse, getDivisionsAndCities, hireEmployees, maximizeMoraleAndEnergy, upgradeToLevel, } from 'scripts/corporations/utils';\\nimport { CycleManager } from 'scripts/corporations/cycle-manager';\\nconst TOBACCO_DIV_NAME = 'Nepsmokes';\\nconst AGRICULTURE_DIV_NAME = 'Nepplants';\\nconst CHEM_DIV_NAME = 'Nepchem';\\nconst N_EMPLOYEES = 204;\\nconst WAREHOUSE_CAP = 24000;\\nconst WILSON_ANALYTICS_LVL = 20;\\nconst FOCUS_WIRES_LVL = 60;\\nconst NEURAL_ACCELERATORS_LVL = 60;\\nconst PROJECT_INSIGHT_LVL = 20;\\nconst NNII_LVL = 60;\\nconst SMART_FACTORIES_LVL = 60;\\nconst SMART_STORAGE_LVL = 50;\\nconst AGRICULTURE_REAL_ESTATE = 3e6;\\nconst CHEM_REAL_ESTATE = 1e6;\\nconst CHEM_ROBOTS = 30e3;\\nconst TOBACCO_REAL_ESTATE = 1e6;\\nconst TOBACCO_ROBOTS = 30e3;\\nconst PLANT_PRODUCTION = 3800;\\nconst HI_TECH_RESEARCH = 5000;\\nconst MARKET_TA_II_RESEARCH = 70000;\\nconst PRODUCT_NAME = 'Neparette';\\nconst PRODUCT_INVESTMENT = 10e9;\\nconst LOOP_INDUSTRIES = [\\n    { industry: INDUSTRIES.AGRICULTURE, divisionName: AGRICULTURE_DIV_NAME },\\n    { industry: INDUSTRIES.CHEMICAL, divisionName: CHEM_DIV_NAME },\\n];\\nconst ALL_INDUSTRIES = [\\n    ...LOOP_INDUSTRIES,\\n    { industry: INDUSTRIES.TOBACCO, divisionName: TOBACCO_DIV_NAME },\\n];\\nconst ALL_INDUSTRY_NAMES = ALL_INDUSTRIES.map((industry) => industry.industry);\\nconst LOOP_INDUSTRY_NAMES = LOOP_INDUSTRIES.map((industry) => industry.industry);\\nconst getProductName = (version) => `${PRODUCT_NAME} ${version}`;\\nconst createProductManager = (ns) => {\\n    let curVersion = 0;\\n    const inDevelopment = new Set();\\n    const develop = (version) => {\\n        const name = getProductName(version);\\n        ns.print(`Starting development of ${name}`);\\n        ns.corporation.makeProduct(TOBACCO_DIV_NAME, CITIES.SECTOR_12, name, PRODUCT_INVESTMENT, PRODUCT_INVESTMENT);\\n        inDevelopment.add(name);\\n    };\\n    for (let i = 0; i < 3; i++) {\\n        develop(curVersion++);\\n    }\\n    return () => {\\n        for (const name of inDevelopment) {\\n            const product = ns.corporation.getProduct(TOBACCO_DIV_NAME, CITIES.SECTOR_12, name);\\n            if (product.developmentProgress === 100) {\\n                inDevelopment.delete(name);\\n                ns.print(`Finished developing ${name}`);\\n                ns.print(`Activating Market-TA.II for ${name}`);\\n                ns.corporation.setProductMarketTA2(TOBACCO_DIV_NAME, name, true);\\n                if (inDevelopment.size === 0) {\\n                    const discontinued = getProductName(curVersion - 3);\\n                    ns.print(`Discontinuing ${discontinued}`);\\n                    ns.corporation.discontinueProduct(TOBACCO_DIV_NAME, discontinued);\\n                    develop(curVersion++);\\n                }\\n            }\\n        }\\n    };\\n};\\nexport const doit = async (ns) => {\\n    const cycleManager = new CycleManager(ns);\\n    while (ns.corporation.getCorporation().divisions.length > 0) {\\n        ns.print('Please sell all existing divisions');\\n        await ns.sleep(2000);\\n    }\\n    ns.print('Creating Tobacco, Agriculture and Chemical divisions');\\n    for (const { industry, divisionName } of ALL_INDUSTRIES) {\\n        ns.corporation.expandIndustry(industry, divisionName);\\n    }\\n    ns.print('Expanding divisions to all cities');\\n    for (const { divisionName } of ALL_INDUSTRIES) {\\n        expandToAllCities(ns, divisionName);\\n    }\\n    ns.print('Hiring employees');\\n    for (const [divisionName, cityName] of getDivisionsAndCities(ns, ALL_INDUSTRY_NAMES)) {\\n        hireEmployees(ns, divisionName, cityName, N_EMPLOYEES);\\n    }\\n    ns.print('Assigning all Tobacco employees to R&D');\\n    for (const cityName of CITY_NAMES) {\\n        ns.corporation.setAutoJobAssignment(TOBACCO_DIV_NAME, cityName, EMPLOYEE_POSITIONS.R_AND_D, N_EMPLOYEES);\\n    }\\n    ns.print('Assigning Agriculture and Chemical employees to Operations, Engineer, Management and R&D');\\n    const loopPositions = [\\n        EMPLOYEE_POSITIONS.OPERATIONS,\\n        EMPLOYEE_POSITIONS.ENGINEER,\\n        EMPLOYEE_POSITIONS.MANAGEMENT,\\n        EMPLOYEE_POSITIONS.R_AND_D,\\n    ];\\n    for (const [divisionName, cityName] of getDivisionsAndCities(ns, LOOP_INDUSTRY_NAMES)) {\\n        for (const position of loopPositions) {\\n            ns.corporation.setAutoJobAssignment(divisionName, cityName, position, Math.round(N_EMPLOYEES / 4));\\n        }\\n    }\\n    ns.print('Buying export unlockable');\\n    // For some reason the script is able to set export without this unlockable.\\n    // Must be a bug (v2.3.1).\\n    ns.corporation.purchaseUnlock(UNLOCKABLES.EXPORT);\\n    ns.print('Leveling upgrades');\\n    upgradeToLevel(ns, UPGRADES.WILSON_ANALYTICS, WILSON_ANALYTICS_LVL);\\n    upgradeToLevel(ns, UPGRADES.FOCUS_WIRES, FOCUS_WIRES_LVL);\\n    upgradeToLevel(ns, UPGRADES.NEURAL_ACCELERATORS, NEURAL_ACCELERATORS_LVL);\\n    upgradeToLevel(ns, UPGRADES.PROJECT_INSIGHT, PROJECT_INSIGHT_LVL);\\n    upgradeToLevel(ns, UPGRADES.NNII, NNII_LVL);\\n    upgradeToLevel(ns, UPGRADES.SMART_FACTORIES, SMART_FACTORIES_LVL);\\n    upgradeToLevel(ns, UPGRADES.SMART_STORAGE, SMART_STORAGE_LVL);\\n    ns.print('Maximizing employee morale and energy');\\n    await maximizeMoraleAndEnergy(ns, ALL_INDUSTRY_NAMES);\\n    cycleManager.registerRecurrentFunction(() => buyTeaAndThrowParties(ns, ALL_INDUSTRY_NAMES));\\n    ns.print('Expanding warehouses');\\n    for (const [divisionName, cityName] of getDivisionsAndCities(ns, ALL_INDUSTRY_NAMES)) {\\n        expandWarehouse(ns, divisionName, cityName, WAREHOUSE_CAP);\\n    }\\n    ns.print('Setting up loop exports');\\n    for (const cityName of CITY_NAMES) {\\n        // Buy initial chemicals to start agriculture for 2 cycles\\n        ns.corporation.buyMaterial(AGRICULTURE_DIV_NAME, cityName, MATERIALS.CHEMICALS, (2 * PLANT_PRODUCTION) / 5);\\n        // Production boosting materials\\n        ns.corporation.buyMaterial(TOBACCO_DIV_NAME, cityName, MATERIALS.REAL_ESTATE, TOBACCO_REAL_ESTATE / 10);\\n        ns.corporation.buyMaterial(TOBACCO_DIV_NAME, cityName, MATERIALS.ROBOTS, TOBACCO_ROBOTS / 10);\\n        ns.corporation.buyMaterial(AGRICULTURE_DIV_NAME, cityName, MATERIALS.REAL_ESTATE, AGRICULTURE_REAL_ESTATE / 10);\\n        ns.corporation.buyMaterial(CHEM_DIV_NAME, cityName, MATERIALS.REAL_ESTATE, CHEM_REAL_ESTATE / 10);\\n        ns.corporation.buyMaterial(CHEM_DIV_NAME, cityName, MATERIALS.ROBOTS, CHEM_ROBOTS / 10);\\n    }\\n    await cycleManager.waitForCycle();\\n    for (const cityName of CITY_NAMES) {\\n        ns.corporation.buyMaterial(AGRICULTURE_DIV_NAME, cityName, MATERIALS.CHEMICALS, 0);\\n        ns.corporation.buyMaterial(TOBACCO_DIV_NAME, cityName, MATERIALS.REAL_ESTATE, 0);\\n        ns.corporation.buyMaterial(TOBACCO_DIV_NAME, cityName, MATERIALS.ROBOTS, 0);\\n        ns.corporation.buyMaterial(AGRICULTURE_DIV_NAME, cityName, MATERIALS.REAL_ESTATE, 0);\\n        ns.corporation.buyMaterial(CHEM_DIV_NAME, cityName, MATERIALS.REAL_ESTATE, 0);\\n        ns.corporation.buyMaterial(CHEM_DIV_NAME, cityName, MATERIALS.ROBOTS, 0);\\n    }\\n    for (const cityName of CITY_NAMES) {\\n        ns.corporation.buyMaterial(AGRICULTURE_DIV_NAME, cityName, MATERIALS.WATER, PLANT_PRODUCTION / 2);\\n        ns.corporation.buyMaterial(CHEM_DIV_NAME, cityName, MATERIALS.WATER, PLANT_PRODUCTION / 10);\\n        // Setup exports\\n        ns.corporation.exportMaterial(AGRICULTURE_DIV_NAME, cityName, CHEM_DIV_NAME, cityName, MATERIALS.PLANTS, PLANT_PRODUCTION / 5);\\n        ns.corporation.exportMaterial(CHEM_DIV_NAME, cityName, AGRICULTURE_DIV_NAME, cityName, MATERIALS.CHEMICALS, PLANT_PRODUCTION / 5);\\n        // Sell leftovers\\n        ns.corporation.sellMaterial(AGRICULTURE_DIV_NAME, cityName, MATERIALS.FOOD, 'MAX', '0');\\n        ns.corporation.sellMaterial(AGRICULTURE_DIV_NAME, cityName, MATERIALS.PLANTS, 'MAX', '0');\\n    }\\n    await cycleManager.waitForCycle();\\n    ns.print('Waiting for Hi-Tech research in Tobacco');\\n    while (true) {\\n        if (ns.corporation.getDivision(TOBACCO_DIV_NAME).researchPoints >\\n            HI_TECH_RESEARCH) {\\n            ns.corporation.research(TOBACCO_DIV_NAME, RESEARCHES.HI_TECH);\\n            ns.print('Purchased Hi-Tech research in Tobacco');\\n            break;\\n        }\\n        await cycleManager.waitForCycle();\\n    }\\n    ns.print('Waiting for Hi-Tech research in loop divisions');\\n    while (true) {\\n        if (ns.corporation.getDivision(AGRICULTURE_DIV_NAME).researchPoints >\\n            HI_TECH_RESEARCH &&\\n            ns.corporation.getDivision(CHEM_DIV_NAME).researchPoints >\\n                HI_TECH_RESEARCH) {\\n            ns.corporation.research(AGRICULTURE_DIV_NAME, RESEARCHES.HI_TECH);\\n            ns.corporation.research(CHEM_DIV_NAME, RESEARCHES.HI_TECH);\\n            ns.print('Purchased Hi-Tech research in loop divisions');\\n            break;\\n        }\\n        await cycleManager.waitForCycle();\\n    }\\n    ns.print('Waiting for Market-TA.II in Tobacco');\\n    while (true) {\\n        if (ns.corporation.getDivision(TOBACCO_DIV_NAME).researchPoints >\\n            MARKET_TA_II_RESEARCH) {\\n            ns.corporation.research(TOBACCO_DIV_NAME, RESEARCHES.MARKET_TA_I);\\n            ns.corporation.research(TOBACCO_DIV_NAME, RESEARCHES.MARKET_TA_II);\\n            ns.print('Purchased Market-TA.II in Tobacco');\\n            break;\\n        }\\n        await cycleManager.waitForCycle();\\n    }\\n    ns.print('Reassigning Tobacco employees');\\n    for (const cityName of CITY_NAMES) {\\n        for (const position of Object.values(EMPLOYEE_POSITIONS)) {\\n            if (position !== 'Unassigned') {\\n                ns.corporation.setAutoJobAssignment(TOBACCO_DIV_NAME, cityName, position, 0);\\n            }\\n        }\\n        await cycleManager.waitForCycle();\\n        if (cityName === CITIES.SECTOR_12) {\\n            const thirdEmployees = Math.round(N_EMPLOYEES / 3);\\n            ns.corporation.setAutoJobAssignment(TOBACCO_DIV_NAME, cityName, EMPLOYEE_POSITIONS.OPERATIONS, thirdEmployees);\\n            ns.corporation.setAutoJobAssignment(TOBACCO_DIV_NAME, cityName, EMPLOYEE_POSITIONS.ENGINEER, thirdEmployees);\\n            ns.corporation.setAutoJobAssignment(TOBACCO_DIV_NAME, cityName, EMPLOYEE_POSITIONS.MANAGEMENT, thirdEmployees);\\n        }\\n        else {\\n            const fourthEmployees = Math.round(N_EMPLOYEES / 4);\\n            ns.corporation.setAutoJobAssignment(TOBACCO_DIV_NAME, cityName, EMPLOYEE_POSITIONS.OPERATIONS, fourthEmployees);\\n            ns.corporation.setAutoJobAssignment(TOBACCO_DIV_NAME, cityName, EMPLOYEE_POSITIONS.ENGINEER, fourthEmployees);\\n            ns.corporation.setAutoJobAssignment(TOBACCO_DIV_NAME, cityName, EMPLOYEE_POSITIONS.MANAGEMENT, fourthEmployees);\\n            ns.corporation.setAutoJobAssignment(TOBACCO_DIV_NAME, cityName, EMPLOYEE_POSITIONS.R_AND_D, fourthEmployees);\\n        }\\n    }\\n    cycleManager.registerRecurrentFunction(createProductManager(ns));\\n    ns.print('Waiting for first product to be completed');\\n    while (ns.corporation.getProduct(TOBACCO_DIV_NAME, CITIES.SECTOR_12, getProductName(0)).developmentProgress < 100) {\\n        await cycleManager.waitForCycle();\\n    }\\n    ns.print('Hiring maximum amount of AdVert in Tobacco');\\n    while (ns.corporation.getCorporation().funds >=\\n        ns.corporation.getHireAdVertCost(TOBACCO_DIV_NAME)) {\\n        ns.corporation.hireAdVert(TOBACCO_DIV_NAME);\\n    }\\n    ns.print('Redirecting all leftover plants to Tobacco');\\n    for (const cityName of CITY_NAMES) {\\n        ns.corporation.exportMaterial(AGRICULTURE_DIV_NAME, cityName, TOBACCO_DIV_NAME, cityName, MATERIALS.PLANTS, `EPROD - ${(PLANT_PRODUCTION / 5).toFixed(6)}`);\\n    }\\n    ns.print('Entering tea party mode');\\n    while (true) {\\n        await cycleManager.waitForCycle();\\n    }\\n};\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91bmQtMy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvcnBvcmF0aW9ucy9yb3VuZC0zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFDTCxNQUFNLEVBQ04sVUFBVSxFQUNWLGtCQUFrQixFQUNsQixVQUFVLEVBQ1YsU0FBUyxFQUNULFVBQVUsRUFDVixXQUFXLEVBQ1gsUUFBUSxHQUNULE1BQU0sZ0NBQWdDLENBQUE7QUFDdkMsT0FBTyxFQUNMLHFCQUFxQixFQUNyQixpQkFBaUIsRUFDakIsZUFBZSxFQUNmLHFCQUFxQixFQUNyQixhQUFhLEVBQ2IsdUJBQXVCLEVBQ3ZCLGNBQWMsR0FDZixNQUFNLDRCQUE0QixDQUFBO0FBQ25DLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQTtBQUVqRSxNQUFNLGdCQUFnQixHQUFHLFdBQVcsQ0FBQTtBQUNwQyxNQUFNLG9CQUFvQixHQUFHLFdBQVcsQ0FBQTtBQUN4QyxNQUFNLGFBQWEsR0FBRyxTQUFTLENBQUE7QUFDL0IsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFBO0FBQ3ZCLE1BQU0sYUFBYSxHQUFHLEtBQUssQ0FBQTtBQUMzQixNQUFNLG9CQUFvQixHQUFHLEVBQUUsQ0FBQTtBQUMvQixNQUFNLGVBQWUsR0FBRyxFQUFFLENBQUE7QUFDMUIsTUFBTSx1QkFBdUIsR0FBRyxFQUFFLENBQUE7QUFDbEMsTUFBTSxtQkFBbUIsR0FBRyxFQUFFLENBQUE7QUFDOUIsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFBO0FBQ25CLE1BQU0sbUJBQW1CLEdBQUcsRUFBRSxDQUFBO0FBQzlCLE1BQU0saUJBQWlCLEdBQUcsRUFBRSxDQUFBO0FBQzVCLE1BQU0sdUJBQXVCLEdBQUcsR0FBRyxDQUFBO0FBQ25DLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFBO0FBQzVCLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQTtBQUN4QixNQUFNLG1C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\",\"filename\":\"scripts/corporations/round-3.js\",\"server\":\"home\"}}],[\"scripts/corporations/cycle-manager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { waitForCycle } from 'scripts/corporations/utils';\\nexport class CycleManager {\\n    ns;\\n    recurrentFunctions;\\n    constructor(ns) {\\n        this.ns = ns;\\n        this.recurrentFunctions = [];\\n    }\\n    registerRecurrentFunction(fn) {\\n        this.recurrentFunctions.push(fn);\\n    }\\n    unregisterRecurrentFunction(fn) {\\n        this.recurrentFunctions = this.recurrentFunctions.filter((rf) => rf !== fn);\\n    }\\n    async waitForCycle() {\\n        await waitForCycle(this.ns);\\n        this.recurrentFunctions.forEach((fn) => fn());\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3ljbGUtbWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvcnBvcmF0aW9ucy9jeWNsZS1tYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQTtBQUV6RCxNQUFNLE9BQU8sWUFBWTtJQUN2QixFQUFFLENBQUk7SUFDTixrQkFBa0IsQ0FBZTtJQUVqQyxZQUFZLEVBQU07UUFDaEIsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUE7UUFDWixJQUFJLENBQUMsa0JBQWtCLEdBQUcsRUFBRSxDQUFBO0lBQzlCLENBQUM7SUFFRCx5QkFBeUIsQ0FBQyxFQUFhO1FBQ3JDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDbEMsQ0FBQztJQUVELDJCQUEyQixDQUFDLEVBQWE7UUFDdkMsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQTtJQUM3RSxDQUFDO0lBRUQsS0FBSyxDQUFDLFlBQVk7UUFDaEIsTUFBTSxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBQzNCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDL0MsQ0FBQztDQUNGIn0=\",\"filename\":\"scripts/corporations/cycle-manager.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"s0\",\"s1\",\"s2\",\"s3\",\"s4\",\"s5\",\"s6\",\"s7\",\"s8\",\"s9\",\"s10\",\"s11\",\"s12\",\"s13\",\"s14\",\"s15\",\"s16\",\"s17\",\"s18\",\"s19\",\"s20\",\"s21\",\"s22\",\"s23\",\"s24\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"scripts/corporations/tea.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1473.4100000001981,\"ramUsage\":1024,\"server\":\"home\",\"scriptKey\":\"scripts/corporations/tea.js*[]\",\"title\":\"scripts/corporations/tea.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,169944]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1358419.914503769,\"onlineMoneyMade\":0,\"onlineRunningTime\":1421.4100000001863,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":1752,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"scripts/weaken-all.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1127.8100000001195,\"ramUsage\":4.95,\"server\":\"home\",\"scriptKey\":\"scripts/weaken-all.js*[\\\"n00dles\\\"]\",\"title\":\"scripts/weaken-all.js n00dles\",\"threads\":1,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"42.3.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":13432964984.2,\"moneyMax\":67164824921,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1133,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"3.7.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":9869006108.4,\"moneyMax\":49345030542,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1343,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"16.3.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":4895188265.2,\"moneyMax\":24475941326,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1115,\"serverGrowth\":72,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"73.4.2.5\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\",\"megacorp\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":5877621687,\"moneyMax\":29388108435,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1009,\"serverGrowth\":68,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"40.8.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":7414765836.400001,\"moneyMax\":37073829182,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":951,\"serverGrowth\":80,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"92.1.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":3182285862.2000003,\"moneyMax\":15911429311,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":950,\"serverGrowth\":62,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"3.3.7.8\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"stormtech\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":3076871364.6000004,\"moneyMax\":15384356823,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1094,\"serverGrowth\":98,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"26.8.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":3272973659,\"moneyMax\":16364868295,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1106,\"serverGrowth\":95,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"97.7.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\",\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":5502581409.8,\"moneyMax\":27512907049,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1005,\"serverGrowth\":95,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"74.9.7.1\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\",\"4sigma\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":327744870.8,\"moneyMax\":1638724354,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1203,\"serverGrowth\":83,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"47.0.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":200000,\"moneyMax\":1000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1183,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"6.9.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":234876383.4,\"moneyMax\":1174381917,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1055,\"serverGrowth\":74,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"7.8.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":162379511.8,\"moneyMax\":811897559,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":976,\"serverGrowth\":65,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"49.8.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"defcomm\",\"titan-labs\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":120208701.60000001,\"moneyMax\":601043508,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":907,\"serverGrowth\":54,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"8.1.5.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":118686935.4,\"moneyMax\":593434677,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":836,\"serverGrowth\":78,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"52.6.0.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":141334555.8,\"moneyMax\":706672779,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":889,\"serverGrowth\":72,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"86.7.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":184212789.8,\"moneyMax\":921063949,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":866,\"serverGrowth\":94,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"1.2.9.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":229105416.8,\"moneyMax\":1145527084,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":834,\"serverGrowth\":88,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"22.2.5.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":166475971.8,\"moneyMax\":832379859,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":849,\"serverGrowth\":70,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"99.1.4.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":122176738.80000001,\"moneyMax\":610883694,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":859,\"serverGrowth\":76,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"6.0.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"univ-energy\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":166673790.20000002,\"moneyMax\":833368951,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":858,\"serverGrowth\":71,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"62.7.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":168226294.4,\"moneyMax\":841131472,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":849,\"serverGrowth\":78,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"43.0.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aevum-police\",\"omnia\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":230211233,\"moneyMax\":1151056165,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":877,\"serverGrowth\":56,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"86.0.6.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aerocorp\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":187955025.20000002,\"moneyMax\":939775126,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":891,\"serverGrowth\":60,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"6.1.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zeus-med\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":189542549.4,\"moneyMax\":947712747,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":819,\"serverGrowth\":72,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"68.8.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":192648784.4,\"moneyMax\":963243922,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":841,\"serverGrowth\":70,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"11.8.0.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":168056831.60000002,\"moneyMax\":840284158,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":799,\"serverGrowth\":70,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"26.7.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":323237324.6,\"moneyMax\":1616186623,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":875,\"serverGrowth\":67,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"66.5.9.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":304222363,\"moneyMax\":1521111815,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":800,\"serverGrowth\":88,\"runningScripts\":[]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"60.2.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":220886837.20000002,\"moneyMax\":1104434186,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":795,\"serverGrowth\":79,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"12.3.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":263564141,\"moneyMax\":1317820705,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":839,\"serverGrowth\":79,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"35.3.7.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aerocorp\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":206629890,\"moneyMax\":1033149450,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":789,\"serverGrowth\":75,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"92.5.2.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"syscore\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":156358936.6,\"moneyMax\":781794683,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":718,\"serverGrowth\":65,\"runningScripts\":[]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"3.9.7.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"rho-construction\"}}]]},\"serversOnNetwork\":[\"I.I.I.I\",\"galactic-cyber\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":124846207.2,\"moneyMax\":624231036,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":523,\"serverGrowth\":41,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,468]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3740.882408250738,\"onlineMoneyMade\":0,\"onlineRunningTime\":314.8099999999907,\"ramUsage\":1.75,\"server\":\"rho-construction\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":18,\"temporary\":false}}]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"17.2.5.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"alpha-ent\"}}]]},\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":133317911.2,\"moneyMax\":666589556,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":520,\"serverGrowth\":51,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,2117]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16921.897560399186,\"onlineMoneyMade\":0,\"onlineRunningTime\":351.8099999999886,\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":73,\"temporary\":false}}]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"86.5.0.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"aevum-police\"}}]]},\"serversOnNetwork\":[\"rothman-uni\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":48899790.400000006,\"moneyMax\":244498952,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":410,\"serverGrowth\":50,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,720]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5755.203705001134,\"onlineMoneyMade\":0,\"onlineRunningTime\":1023.2100000000958,\"ramUsage\":1.75,\"server\":\"aevum-police\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":9,\"temporary\":false}}]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"87.7.4.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"rothman-uni\"}}]]},\"serversOnNetwork\":[\"netlink\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":49350766.2,\"moneyMax\":246753831,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":383,\"serverGrowth\":44,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,2952]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":23596.335190504647,\"onlineMoneyMade\":0,\"onlineRunningTime\":1054.4100000001029,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":36,\"temporary\":false}}]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"83.2.7.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":210668539.8,\"moneyMax\":1053342699,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":730,\"serverGrowth\":85,\"runningScripts\":[]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"46.0.0.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"summit-uni\"}}]]},\"serversOnNetwork\":[\"computek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":61977152.2,\"moneyMax\":309885761,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":462,\"serverGrowth\":45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,1224]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9783.846298501934,\"onlineMoneyMade\":0,\"onlineRunningTime\":850.6100000000565,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":18,\"temporary\":false}}]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"33.8.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":114924760.80000001,\"moneyMax\":574623804,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":570,\"serverGrowth\":60,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-543981.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"g2gE1BMXIObbbbbbnCNhhhhhdCCzPk8Iev4mhpbev4mhpbev7hpbesv7hpesv7QoImSaHMaHMaHMaHP6aHMaHP6\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"44.4.5.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"catalyst\"}}]]},\"serversOnNetwork\":[\"johnson-ortho\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":63460439.800000004,\"moneyMax\":317302199,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":441,\"serverGrowth\":54,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,1332]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10647.126854252101,\"onlineMoneyMade\":0,\"onlineRunningTime\":935.0100000000757,\"ramUsage\":1.75,\"server\":\"catalyst\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":18,\"temporary\":false}}]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"52.2.5.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"the-hub\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":43,\"minDifficulty\":14,\"moneyAvailable\":36861125.6,\"moneyMax\":184305628,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":309,\"serverGrowth\":45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,340]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2717.735082917208,\"onlineMoneyMade\":0,\"onlineRunningTime\":1107.610000000115,\"ramUsage\":1.75,\"server\":\"the-hub\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":4,\"temporary\":false}}]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":true,\"ip\":\"43.8.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"computek\"}}]]},\"serversOnNetwork\":[\"neo-net\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":45591929.6,\"moneyMax\":227959648,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":314,\"serverGrowth\":54,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"34.4.3.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"netlink\"}}]]},\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":55000000,\"moneyMax\":275000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":394,\"serverGrowth\":54,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,2916]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":23308.57500525459,\"onlineMoneyMade\":0,\"onlineRunningTime\":1038.4100000000992,\"ramUsage\":1.75,\"server\":\"netlink\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":36,\"temporary\":false}}]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"0.2.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"johnson-ortho\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":16719752.600000001,\"moneyMax\":83598763,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":283,\"serverGrowth\":47,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":true,\"ip\":\"88.8.1.2\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":14000,\"moneyMax\":70000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,192]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1534.7209880003065,\"onlineMoneyMade\":0,\"onlineRunningTime\":1421.4100000001863,\"ramUsage\":1.75,\"server\":\"n00dles\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":2,\"temporary\":false}}]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":true,\"ip\":\"21.2.6.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"foodnstuff\"}}],[\"scripts/scp-all.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HOSTS } from 'scripts/utils/constants';\\nexport async function main(ns) {\\n    const dest = ns.args[0] ?? ns.getHostname();\\n    if (!dest) {\\n        ns.tprint('Missing destination argument');\\n        ns.exit();\\n    }\\n    const files = ns.ls(HOSTS.HOME).filter((f) => f.endsWith('.js'));\\n    ns.scp(files, dest, HOSTS.HOME);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NwLWFsbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NjcC1hbGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBRS9DLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUE7SUFFdkQsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsOEJBQThCLENBQUMsQ0FBQTtRQUN6QyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO0lBRWhFLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDakMsQ0FBQyJ9\",\"filename\":\"scripts/scp-all.js\",\"server\":\"foodnstuff\"}}],[\"scripts/utils/constants.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const FILES = {\\n    BRUTE_SSH: 'BruteSSH.exe',\\n    FTP_CRACK: 'FTPCrack.exe',\\n    RELAY_SMTP: 'relaySMTP.exe',\\n    HTTP_WORM: 'HTTPWorm.exe',\\n    SQL_INJECT: 'SQLInject.exe',\\n};\\nexport const SCRIPTS = {\\n    HACK: 'scripts/hack-v4.js',\\n    CONSTANTS: 'scripts/utils/constants.js',\\n    SIMPLE_HACK: 'scripts/simple-hack.js',\\n    SIMPLE_WEAKEN: 'scripts/simple-weaken.js',\\n    SIMPLE_GROW: 'scripts/simple-grow.js',\\n    TIMER: 'scripts/ui/timer.js',\\n    UTILS_TIME: 'scripts/utils/time.js',\\n};\\nexport const HOSTS = {\\n    HOME: 'home',\\n    JOESGUNS: 'joesguns',\\n    MAX_HARDWARE: 'max-hardware',\\n};\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvdXRpbHMvY29uc3RhbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRztJQUNuQixTQUFTLEVBQUUsY0FBYztJQUN6QixTQUFTLEVBQUUsY0FBYztJQUN6QixVQUFVLEVBQUUsZUFBZTtJQUMzQixTQUFTLEVBQUUsY0FBYztJQUN6QixVQUFVLEVBQUUsZUFBZTtDQUNuQixDQUFBO0FBRVYsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHO0lBQ3JCLElBQUksRUFBRSxvQkFBb0I7SUFDMUIsU0FBUyxFQUFFLDRCQUE0QjtJQUN2QyxXQUFXLEVBQUUsd0JBQXdCO0lBQ3JDLGFBQWEsRUFBRSwwQkFBMEI7SUFDekMsV0FBVyxFQUFFLHdCQUF3QjtJQUNyQyxLQUFLLEVBQUUscUJBQXFCO0lBQzVCLFVBQVUsRUFBRSx1QkFBdUI7Q0FDM0IsQ0FBQTtBQUVWLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRztJQUNuQixJQUFJLEVBQUUsTUFBTTtJQUNaLFFBQVEsRUFBRSxVQUFVO0lBQ3BCLFlBQVksRUFBRSxjQUFjO0NBQzdCLENBQUEifQ==\",\"filename\":\"scripts/utils/constants.js\",\"server\":\"foodnstuff\"}}],[\"contracts/subarray-max-sum.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = [\\n    -9, 8, -10, 9, 2, -9, -7, -5, 6, 9, 3, 2, 1, -1, 2, -9, 8, 5, -6, -6, 3, -3,\\n    6, 7, -1, 5, -7, -1,\\n];\\nexport const solve = (arr) => {\\n    let best = arr[0];\\n    let sum = 0;\\n    for (const x of arr) {\\n        sum += x;\\n        if (sum > best) {\\n            best = sum;\\n        }\\n        if (sum < 0) {\\n            sum = 0;\\n        }\\n    }\\n    console.log(best);\\n};\\nsolve(input);\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ViYXJyYXktbWF4LXN1bS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb250cmFjdHMvc3ViYXJyYXktbWF4LXN1bS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLEtBQUssR0FBRztJQUNaLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMzRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7Q0FDcEIsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLEdBQWEsRUFBRSxFQUFFO0lBQ3JDLElBQUksSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUNqQixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUE7SUFFWCxLQUFLLE1BQU0sQ0FBQyxJQUFJLEdBQUcsRUFBRTtRQUNuQixHQUFHLElBQUksQ0FBQyxDQUFBO1FBRVIsSUFBSSxHQUFHLEdBQUcsSUFBSSxFQUFFO1lBQ2QsSUFBSSxHQUFHLEdBQUcsQ0FBQTtTQUNYO1FBRUQsSUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUFFO1lBQ1gsR0FBRyxHQUFHLENBQUMsQ0FBQTtTQUNSO0tBQ0Y7SUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFBO0FBQ25CLENBQUMsQ0FBQTtBQUVELEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQSJ9\",\"filename\":\"contracts/subarray-max-sum.js\",\"server\":\"foodnstuff\"}}],[\"contracts/unique-paths.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\nconst grid = [\\n    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,\\n    0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\\n];\\nconst n = 8;\\nconst m = 6;\\nconst solve = () => {\\n    const check = (r, c) => grid[r * m + c];\\n    const dp = [...new Array(n)].map(() => new Array(m).fill(0));\\n    dp[0][0] = 1;\\n    for (let r = 0; r < n; r++) {\\n        for (let c = r === 0 ? 1 : 0; c < m; c++) {\\n            if (check(r, c) === 1) {\\n                continue;\\n            }\\n            dp[r][c] = (r === 0 ? 0 : dp[r - 1][c]) + (c === 0 ? 0 : dp[r][c - 1]);\\n        }\\n    }\\n    console.log(dp);\\n    console.log(dp[n - 1][m - 1]);\\n};\\nsolve();\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pcXVlLXBhdGhzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbnRyYWN0cy91bmlxdWUtcGF0aHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU0sSUFBSSxHQUFHO0lBQ1gsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7SUFDNUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztDQUNqRSxDQUFBO0FBRUQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQ1gsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBRVgsTUFBTSxLQUFLLEdBQUcsR0FBRyxFQUFFO0lBQ2pCLE1BQU0sS0FBSyxHQUFHLENBQUMsQ0FBUyxFQUFFLENBQVMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7SUFFdkQsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBRTVELEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDWixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzFCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN4QyxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUNyQixTQUFRO2FBQ1Q7WUFDRCxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO1NBQ3ZFO0tBQ0Y7SUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ2YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQy9CLENBQUMsQ0FBQTtBQUVELEtBQUssRUFBRSxDQUFBIn0=\",\"filename\":\"contracts/unique-paths.js\",\"server\":\"foodnstuff\"}}],[\"exploits/alter-reality.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// @ts-nocheck\\nexport async function main(ns) {\\n    ns.alterReality();\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWx0ZXItcmVhbGl0eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leHBsb2l0cy9hbHRlci1yZWFsaXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWM7QUFXZCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQTtBQUNuQixDQUFDIn0=\",\"filename\":\"exploits/alter-reality.js\",\"server\":\"foodnstuff\"}}],[\"exploits/bypass.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// @ts-nocheck\\nexport async function main(ns) {\\n    const doc = eval('document');\\n    ns.bypass(doc);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnlwYXNzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2V4cGxvaXRzL2J5cGFzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxjQUFjO0FBSWQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDNUIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQTtBQUNoQixDQUFDIn0=\",\"filename\":\"exploits/bypass.js\",\"server\":\"foodnstuff\"}}],[\"exploits/exploit.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// @ts-nocheck\\nexport async function main(ns) {\\n    ns.exploit();\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwbG9pdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leHBsb2l0cy9leHBsb2l0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWM7QUFJZCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtBQUNkLENBQUMifQ==\",\"filename\":\"exploits/exploit.js\",\"server\":\"foodnstuff\"}}],[\"exploits/rainbow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// @ts-nocheck\\nexport async function main(ns) {\\n    ns.rainbow('noodles');\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFpbmJvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leHBsb2l0cy9yYWluYm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWM7QUFJZCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUE7QUFDdkIsQ0FBQyJ9\",\"filename\":\"exploits/rainbow.js\",\"server\":\"foodnstuff\"}}],[\"exploits/tampering.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main() {\\n    const old = Number.prototype.toExponential;\\n    Number.prototype.toExponential = () => 'a';\\n    setTimeout(() => {\\n        Number.prototype.toExponential = old;\\n    }, 16 * 60 * 1000);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFtcGVyaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2V4cGxvaXRzL3RhbXBlcmluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUk7SUFDeEIsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUE7SUFDMUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxhQUFhLEdBQUcsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFBO0lBRTFDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxNQUFNLENBQUMsU0FBUyxDQUFDLGFBQWEsR0FBRyxHQUFHLENBQUE7SUFDdEMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUE7QUFDcEIsQ0FBQyJ9\",\"filename\":\"exploits/tampering.js\",\"server\":\"foodnstuff\"}}],[\"exploits/time-compression.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main() {\\n    const oldNow = performance.now;\\n    performance.now = () => 42;\\n    setTimeout(() => {\\n        performance.now = oldNow;\\n    }, 2000);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1jb21wcmVzc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leHBsb2l0cy90aW1lLWNvbXByZXNzaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSTtJQUN4QixNQUFNLE1BQU0sR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFBO0lBQzlCLFdBQVcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFBO0lBQzFCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxXQUFXLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQTtJQUMxQixDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUE7QUFDVixDQUFDIn0=\",\"filename\":\"exploits/time-compression.js\",\"server\":\"foodnstuff\"}}],[\"exploits/unclickable.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main() {\\n    const doc = eval('document');\\n    const el = doc.getElementById('unclickable');\\n    el.style.display = 'block';\\n    el.style.visibility = 'visible';\\n    el.style.height = '20px';\\n    el.style.zIndex = '100';\\n    el.style.backgroundColor = 'red';\\n    el.onmouseup = () => {\\n        el.style.display = 'none';\\n        el.style.visibility = 'hidden';\\n        console.log('mouseup');\\n    };\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5jbGlja2FibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZXhwbG9pdHMvdW5jbGlja2FibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJO0lBQ3hCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUM1QixNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBRSxDQUFBO0lBRTdDLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQTtJQUMxQixFQUFFLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUE7SUFDL0IsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFBO0lBQ3hCLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQTtJQUN2QixFQUFFLENBQUMsS0FBSyxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUE7SUFFaEMsRUFBRSxDQUFDLFNBQVMsR0FBRyxHQUFHLEVBQUU7UUFDbEIsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFBO1FBQ3pCLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLFFBQVEsQ0FBQTtRQUM5QixPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBQ3hCLENBQUMsQ0FBQTtBQUNILENBQUMifQ==\",\"filename\":\"exploits/unclickable.js\",\"server\":\"foodnstuff\"}}],[\"scripts/buy-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getPurchasedServerName = (id) => `s${id}`;\\nexport async function main(ns) {\\n    const INITIAL_EXP = 8;\\n    for (let e = INITIAL_EXP; e <= 20; e++) {\\n        const ram = Math.pow(2, e);\\n        for (let i = 0; i < ns.getPurchasedServerLimit(); i++) {\\n            ns.print(`Waiting for server ${i}...`);\\n            const hostname = getPurchasedServerName(i);\\n            if (ns.serverExists(hostname) && ns.getServerMaxRam(hostname) >= ram) {\\n                ns.print('Server exists and has enough ram. Skipping...');\\n                continue;\\n            }\\n            const cost = ns.serverExists(hostname)\\n                ? ns.getPurchasedServerUpgradeCost(hostname, ram)\\n                : ns.getPurchasedServerCost(ram);\\n            while (ns.getServerMoneyAvailable('home') < cost) {\\n                await ns.sleep(1000);\\n            }\\n            if (ns.serverExists(hostname)) {\\n                ns.upgradePurchasedServer(hostname, ram);\\n            }\\n            else {\\n                ns.purchaseServer(hostname, ram);\\n            }\\n            ns.toast(`Purchased server ${i}`);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV5LXNlcnZlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9idXktc2VydmVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxDQUFDLEVBQVUsRUFBRSxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQTtBQUU5RCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sV0FBVyxHQUFHLENBQUMsQ0FBQTtJQUVyQixLQUFLLElBQUksQ0FBQyxHQUFHLFdBQVcsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3RDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBRTFCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsdUJBQXVCLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNyRCxFQUFFLENBQUMsS0FBSyxDQUFDLHNCQUFzQixDQUFDLEtBQUssQ0FBQyxDQUFBO1lBQ3RDLE1BQU0sUUFBUSxHQUFHLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxDQUFBO1lBRTFDLElBQUksRUFBRSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsRUFBRTtnQkFDcEUsRUFBRSxDQUFDLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQyxDQUFBO2dCQUN6RCxTQUFRO2FBQ1Q7WUFFRCxNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQztnQkFDcEMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDO2dCQUNqRCxDQUFDLENBQUMsRUFBRSxDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBRWxDLE9BQU8sRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksRUFBRTtnQkFDaEQsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO2FBQ3JCO1lBRUQsSUFBSSxFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxFQUFFO2dCQUM3QixFQUFFLENBQUMsc0JBQXNCLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFBO2FBQ3pDO2lCQUFNO2dCQUNMLEVBQUUsQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFBO2FBQ2pDO1lBRUQsRUFBRSxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLENBQUMsQ0FBQTtTQUNsQztLQUNGO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/buy-servers.js\",\"server\":\"foodnstuff\"}}],[\"scripts/contract-finder.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from 'scripts/utils/servers';\\nimport { solve } from 'scripts/contracts/index';\\nexport const findContracts = (ns) => {\\n    const servers = getAllServers(ns);\\n    const allContracts = [];\\n    for (const server of servers) {\\n        const contracts = ns.ls(server.host, '.cct');\\n        for (const filename of contracts) {\\n            allContracts.push({\\n                host: server.host,\\n                filename,\\n            });\\n        }\\n    }\\n    return allContracts;\\n};\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    while (true) {\\n        ns.print('Looking for contracts...');\\n        const contracts = findContracts(ns);\\n        for (const contract of contracts) {\\n            ns.print(`Attempting to solve ${contract.filename} at ${contract.host}...`);\\n            solve(ns, contract.host, contract.filename);\\n        }\\n        await ns.sleep(15000);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJhY3QtZmluZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NjcmlwdHMvY29udHJhY3QtZmluZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQTtBQUNyRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0seUJBQXlCLENBQUE7QUFPL0MsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQUMsRUFBTSxFQUFFLEVBQUU7SUFDdEMsTUFBTSxPQUFPLEdBQUcsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBRWpDLE1BQU0sWUFBWSxHQUFlLEVBQUUsQ0FBQTtJQUVuQyxLQUFLLE1BQU0sTUFBTSxJQUFJLE9BQU8sRUFBRTtRQUM1QixNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUE7UUFFNUMsS0FBSyxNQUFNLFFBQVEsSUFBSSxTQUFTLEVBQUU7WUFDaEMsWUFBWSxDQUFDLElBQUksQ0FBQztnQkFDaEIsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJO2dCQUNqQixRQUFRO2FBQ1QsQ0FBQyxDQUFBO1NBQ0g7S0FDRjtJQUVELE9BQU8sWUFBWSxDQUFBO0FBQ3JCLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUVwQixPQUFPLElBQUksRUFBRTtRQUNYLEVBQUUsQ0FBQyxLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQTtRQUVwQyxNQUFNLFNBQVMsR0FBRyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUE7UUFFbkMsS0FBSyxNQUFNLFFBQVEsSUFBSSxTQUFTLEVBQUU7WUFDaEMsRUFBRSxDQUFDLEtBQUssQ0FDTix1QkFBdUIsUUFBUSxDQUFDLFFBQVEsT0FBTyxRQUFRLENBQUMsSUFBSSxLQUFLLENBQ2xFLENBQUE7WUFFRCxLQUFLLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1NBQzVDO1FBRUQsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/contract-finder.js\",\"server\":\"foodnstuff\"}}],[\"scripts/contracts/algorithmic-stock-trader.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = [\\n    2,\\n    [\\n        16, 188, 133, 38, 163, 94, 43, 43, 135, 17, 107, 39, 78, 199, 84, 78, 158,\\n        72, 158, 71, 6, 123, 145, 55, 87, 127, 32, 29, 26, 164, 142, 141, 166,\\n    ],\\n];\\nexport const solve = (input) => {\\n    const [k, arr] = input;\\n    const n = arr.length;\\n    const dp = [...Array(k + 1)].map(() => Array(n).fill(0));\\n    for (let kk = 1; kk <= k; kk++) {\\n        for (let i = 1; i < n; i++) {\\n            dp[kk][i] = Math.max(dp[kk][i - 1], dp[kk - 1][i]);\\n            for (let j = i - 1; j >= 0; j--) {\\n                if (arr[i] > arr[j]) {\\n                    dp[kk][i] = Math.max(dp[kk][i], dp[kk - 1][j] + arr[i] - arr[j]);\\n                }\\n            }\\n        }\\n    }\\n    return dp[k][n - 1];\\n};\\nexport const solvers = {\\n    'Algorithmic Stock Trader IV': solve,\\n    'Algorithmic Stock Trader III': (input) => solve([2, input]),\\n    'Algorithmic Stock Trader II': (input) => solve([input.length, input]),\\n    'Algorithmic Stock Trader I': (input) => solve([1, input]),\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxnb3JpdGhtaWMtc3RvY2stdHJhZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29udHJhY3RzL2FsZ29yaXRobWljLXN0b2NrLXRyYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxNQUFNLEtBQUssR0FBVTtJQUNuQixDQUFDO0lBQ0Q7UUFDRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRztRQUN6RSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHO0tBQ3RFO0NBQ0YsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLEtBQVksRUFBRSxFQUFFO0lBQ3BDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFBO0lBQ3RCLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUE7SUFFcEIsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBRXhELEtBQUssSUFBSSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUU7UUFDOUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMxQixFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUNsRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDL0IsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFO29CQUNuQixFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7aUJBQ2pFO2FBQ0Y7U0FDRjtLQUNGO0lBRUQsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0FBQ3JCLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRztJQUNyQiw2QkFBNkIsRUFBRSxLQUFLO0lBQ3BDLDhCQUE4QixFQUFFLENBQUMsS0FBZSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDdEUsNkJBQTZCLEVBQUUsQ0FBQyxLQUFlLEVBQUUsRUFBRSxDQUNqRCxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzlCLDRCQUE0QixFQUFFLENBQUMsS0FBZSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDckUsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUN6QixDQUFDIn0=\",\"filename\":\"scripts/contracts/algorithmic-stock-trader.js\",\"server\":\"foodnstuff\"}}],[\"scripts/contracts/array-jumping-game.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const solve = (input) => {\\n    const n = input.length;\\n    const dp = input.map(() => Infinity);\\n    dp[n - 1] = 0;\\n    for (let i = n - 2; i >= 0; i--) {\\n        for (let j = 1; j <= input[i] && i + j < n; j++) {\\n            dp[i] = Math.min(dp[i], 1 + dp[i + j]);\\n        }\\n    }\\n    return dp[0] === Infinity ? 0 : dp[0];\\n};\\nexport const solvers = {\\n    'Array Jumping Game': (input) => (solve(input) ? 1 : 0),\\n    'Array Jumping Game II': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve([1, 2, 0]));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJyYXktanVtcGluZy1nYW1lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29udHJhY3RzL2FycmF5LWp1bXBpbmctZ2FtZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxLQUFlLEVBQUUsRUFBRTtJQUN2QyxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFBO0lBQ3RCLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUE7SUFFcEMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7SUFFYixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUMvQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQy9DLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO1NBQ3ZDO0tBQ0Y7SUFFRCxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ3ZDLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRztJQUNyQixvQkFBb0IsRUFBRSxDQUFDLEtBQWUsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2pFLHVCQUF1QixFQUFFLEtBQUs7Q0FDL0IsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUM3QixDQUFDIn0=\",\"filename\":\"scripts/contracts/array-jumping-game.js\",\"server\":\"foodnstuff\"}}],[\"scripts/contracts/caesar-cipher.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const solve = (input) => {\\n    const shift = input[1] % 26;\\n    const solveWord = (w) => w\\n        .split('')\\n        .map((c) => String.fromCharCode(((c.charCodeAt(0) - 'A'.charCodeAt(0) - shift + 2 * 26) % 26) +\\n        'A'.charCodeAt(0)))\\n        .join('');\\n    return input[0].split(' ').map(solveWord).join(' ');\\n};\\nexport const solvers = {\\n    'Encryption I: Caesar Cipher': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(['DE A', 3]));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Flc2FyLWNpcGhlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvbnRyYWN0cy9jYWVzYXItY2lwaGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLEtBQXVCLEVBQUUsRUFBRTtJQUMvQyxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFBO0lBRTNCLE1BQU0sU0FBUyxHQUFHLENBQUMsQ0FBUyxFQUFFLEVBQUUsQ0FDOUIsQ0FBQztTQUNFLEtBQUssQ0FBQyxFQUFFLENBQUM7U0FDVCxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUNULE1BQU0sQ0FBQyxZQUFZLENBQ2pCLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDM0QsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FDcEIsQ0FDRjtTQUNBLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUViLE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQ3JELENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRztJQUNyQiw2QkFBNkIsRUFBRSxLQUFLO0NBQ3JDLENBQUE7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUMvQixDQUFDIn0=\",\"filename\":\"scripts/contracts/caesar-cipher.js\",\"server\":\"foodnstuff\"}}],[\"scripts/contracts/find-all-valid-math-expressions.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = ['259213024439', 86];\\nconst solve = (input) => {\\n    const [s, target] = input;\\n    const exp = [];\\n    for (const c of s) {\\n        exp.push('');\\n        exp.push(c);\\n    }\\n    const ans = [];\\n    const doit = (i) => {\\n        if (i === s.length) {\\n            const res = exp.join('');\\n            if (eval(res) === target) {\\n                ans.push(res);\\n            }\\n            return;\\n        }\\n        let ops = ['', '+', '-', '*'];\\n        if (s[i] === '0') {\\n            // single zero\\n            ['+', '-', '*'].forEach((op) => {\\n                exp[2 * i] = op;\\n                if (i + 1 < s.length) {\\n                    ['+', '-', '*'].forEach((op2) => {\\n                        exp[2 * (i + 1)] = op2;\\n                        doit(i + 2);\\n                    });\\n                }\\n                else {\\n                    doit(i + 1);\\n                }\\n            });\\n            // prevent leading zero\\n            ops = [''];\\n        }\\n        if (i === 0) {\\n            ops = [''];\\n        }\\n        ops.forEach((op) => {\\n            exp[2 * i] = op;\\n            doit(i + 1);\\n        });\\n    };\\n    doit(0);\\n    return ans;\\n};\\nexport const solvers = {\\n    'Find All Valid Math Expressions': solve,\\n};\\nexport async function main(ns) {\\n    const res = solve(input);\\n    ns.tprint(res.length);\\n    ns.tprint(new Set(res).size);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmluZC1hbGwtdmFsaWQtbWF0aC1leHByZXNzaW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvbnRyYWN0cy9maW5kLWFsbC12YWxpZC1tYXRoLWV4cHJlc3Npb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE1BQU0sS0FBSyxHQUFVLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0FBRXpDLE1BQU0sS0FBSyxHQUFHLENBQUMsS0FBWSxFQUFFLEVBQUU7SUFDN0IsTUFBTSxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUE7SUFFekIsTUFBTSxHQUFHLEdBQWEsRUFBRSxDQUFBO0lBQ3hCLEtBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ2pCLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7UUFDWixHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQ1o7SUFFRCxNQUFNLEdBQUcsR0FBYSxFQUFFLENBQUE7SUFFeEIsTUFBTSxJQUFJLEdBQUcsQ0FBQyxDQUFTLEVBQUUsRUFBRTtRQUN6QixJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxFQUFFO1lBQ2xCLE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7WUFDeEIsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssTUFBTSxFQUFFO2dCQUN4QixHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO2FBQ2Q7WUFFRCxPQUFNO1NBQ1A7UUFFRCxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFBO1FBRTdCLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsRUFBRTtZQUNoQixjQUFjO1lBQ2QsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFO2dCQUM3QixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtnQkFDZixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRTtvQkFDcEIsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO3dCQUM5QixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFBO3dCQUN0QixJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO29CQUNiLENBQUMsQ0FBQyxDQUFBO2lCQUNIO3FCQUFNO29CQUNMLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7aUJBQ1o7WUFDSCxDQUFDLENBQUMsQ0FBQTtZQUVGLHVCQUF1QjtZQUN2QixHQUFHLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQTtTQUNYO1FBRUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ1gsR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUE7U0FDWDtRQUVELEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRTtZQUNqQixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtZQUNmLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7UUFDYixDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQTtJQUVELElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUNQLE9BQU8sR0FBRyxDQUFBO0FBQ1osQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHO0lBQ3JCLGlDQUFpQyxFQUFFLEtBQUs7Q0FDekMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ3hCLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JCLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDOUIsQ0FBQyJ9\",\"filename\":\"scripts/contracts/find-all-valid-math-expressions.js\",\"server\":\"foodnstuff\"}}],[\"scripts/contracts/find-largest-prime-factor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = 13;\\nexport const solve = (input) => {\\n    let ans = 1;\\n    let cur = 2;\\n    while (cur <= input) {\\n        while (input % cur === 0) {\\n            ans = cur;\\n            input = Math.round(input / cur);\\n        }\\n        cur++;\\n    }\\n    return ans;\\n};\\nexport const solvers = {\\n    'Find Largest Prime Factor': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmluZC1sYXJnZXN0LXByaW1lLWZhY3Rvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvbnRyYWN0cy9maW5kLWxhcmdlc3QtcHJpbWUtZmFjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sS0FBSyxHQUFVLEVBQUUsQ0FBQTtBQUl2QixNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxLQUFZLEVBQUUsRUFBRTtJQUNwQyxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUE7SUFDWCxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUE7SUFFWCxPQUFPLEdBQUcsSUFBSSxLQUFLLEVBQUU7UUFDbkIsT0FBTyxLQUFLLEdBQUcsR0FBRyxLQUFLLENBQUMsRUFBRTtZQUN4QixHQUFHLEdBQUcsR0FBRyxDQUFBO1lBQ1QsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxDQUFBO1NBQ2hDO1FBQ0QsR0FBRyxFQUFFLENBQUE7S0FDTjtJQUVELE9BQU8sR0FBRyxDQUFBO0FBQ1osQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHO0lBQ3JCLDJCQUEyQixFQUFFLEtBQUs7Q0FDbkMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUN6QixDQUFDIn0=\",\"filename\":\"scripts/contracts/find-largest-prime-factor.js\",\"server\":\"foodnstuff\"}}],[\"scripts/contracts/generate-ip-addresses.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = '12615128104';\\nexport const solve = (input) => {\\n    const ip = [];\\n    const ans = [];\\n    for (const c of input) {\\n        ip.push(c);\\n        ip.push('');\\n    }\\n    ip.pop();\\n    const rec = (i, cnt, last) => {\\n        if (cnt > 3 || i - last > 3) {\\n            return;\\n        }\\n        if (i === input.length - 1) {\\n            if (cnt === 3 && parseInt(input.substring(last + 1, i + 1)) < 256) {\\n                ans.push(ip.join(''));\\n            }\\n            return;\\n        }\\n        ip[2 * i + 1] = '';\\n        rec(i + 1, cnt, last);\\n        if (parseInt(input.substring(last + 1, i + 1)) < 256) {\\n            if (input[last + 1] !== '0' || i - last === 1) {\\n                ip[2 * i + 1] = '.';\\n                rec(i + 1, cnt + 1, i);\\n            }\\n        }\\n    };\\n    rec(0, 0, -1);\\n    return ans;\\n};\\nexport const solvers = {\\n    'Generate IP Addresses': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGUtaXAtYWRkcmVzc2VzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29udHJhY3RzL2dlbmVyYXRlLWlwLWFkZHJlc3Nlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLEtBQUssR0FBVSxhQUFhLENBQUE7QUFJbEMsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLENBQUMsS0FBWSxFQUFFLEVBQUU7SUFDcEMsTUFBTSxFQUFFLEdBQWEsRUFBRSxDQUFBO0lBQ3ZCLE1BQU0sR0FBRyxHQUFhLEVBQUUsQ0FBQTtJQUV4QixLQUFLLE1BQU0sQ0FBQyxJQUFJLEtBQUssRUFBRTtRQUNyQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ1YsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtLQUNaO0lBRUQsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFBO0lBRVIsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFTLEVBQUUsR0FBVyxFQUFFLElBQVksRUFBRSxFQUFFO1FBQ25ELElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsRUFBRTtZQUMzQixPQUFNO1NBQ1A7UUFFRCxJQUFJLENBQUMsS0FBSyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUMxQixJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEVBQUU7Z0JBQ2pFLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO2FBQ3RCO1lBQ0QsT0FBTTtTQUNQO1FBRUQsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFBO1FBQ2xCLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQTtRQUVyQixJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxFQUFFO1lBQ3BELElBQUksS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksS0FBSyxDQUFDLEVBQUU7Z0JBQzdDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQTtnQkFDbkIsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTthQUN2QjtTQUNGO0lBQ0gsQ0FBQyxDQUFBO0lBRUQsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUViLE9BQU8sR0FBRyxDQUFBO0FBQ1osQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHO0lBQ3JCLHVCQUF1QixFQUFFLEtBQUs7Q0FDL0IsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUN6QixDQUFDIn0=\",\"filename\":\"scripts/contracts/generate-ip-addresses.js\",\"server\":\"foodnstuff\"}}],[\"scripts/contracts/hamming-codes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const isPow2 = (n) => (n & -n) === n;\\nexport const encode = (input) => {\\n    const bin = input.toString(2);\\n    const ans = [];\\n    let cur = 0;\\n    let largestPow = -2;\\n    for (let i = 0; cur < bin.length; i++) {\\n        if (isPow2(i)) {\\n            ans.push(0);\\n            largestPow++;\\n        }\\n        else {\\n            ans.push(parseInt(bin.charAt(cur++)));\\n        }\\n    }\\n    for (let i = largestPow; i >= 0; i--) {\\n        for (let j = 0; j < ans.length; j++) {\\n            if (j & (1 << i)) {\\n                ans[1 << i] ^= ans[j];\\n            }\\n        }\\n    }\\n    for (let j = 0; j < ans.length; j++) {\\n        ans[0] ^= ans[j];\\n    }\\n    return ans.join('');\\n};\\nexport const decode = (input) => {\\n    const s = input.split('').map((x) => x.charCodeAt(0) - '0'.charCodeAt(0));\\n    let err = 0;\\n    for (let i = 0; i < input.length; i++) {\\n        if (s[i] === 1) {\\n            err ^= i;\\n        }\\n    }\\n    s[err] ^= 1;\\n    const ans = [];\\n    for (let i = 0; i < input.length; i++) {\\n        if (!isPow2(i)) {\\n            ans.push(s[i]);\\n        }\\n    }\\n    return parseInt(ans.join(''), 2);\\n};\\nexport const solvers = {\\n    'HammingCodes: Integer to Encoded Binary': encode,\\n    'HammingCodes: Encoded Binary to Integer': decode,\\n};\\nexport async function main(ns) {\\n    ns.tprint(decode('10110000'));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFtbWluZy1jb2Rlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvbnRyYWN0cy9oYW1taW5nLWNvZGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUU1QyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxLQUFhLEVBQUUsRUFBRTtJQUN0QyxNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQzdCLE1BQU0sR0FBRyxHQUFhLEVBQUUsQ0FBQTtJQUV4QixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUE7SUFFWCxJQUFJLFVBQVUsR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUVuQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNyQyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNiLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDWCxVQUFVLEVBQUUsQ0FBQTtTQUNiO2FBQU07WUFDTCxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO1NBQ3RDO0tBQ0Y7SUFFRCxLQUFLLElBQUksQ0FBQyxHQUFHLFVBQVUsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3BDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ25DLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFO2dCQUNoQixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTthQUN0QjtTQUNGO0tBQ0Y7SUFFRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNuQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQ2pCO0lBRUQsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0FBQ3JCLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxDQUFDLEtBQWEsRUFBRSxFQUFFO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUN6RSxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUE7SUFFWCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNyQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDZCxHQUFHLElBQUksQ0FBQyxDQUFBO1NBQ1Q7S0FDRjtJQUVELENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7SUFFWCxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUE7SUFDZCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNyQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ2QsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUNmO0tBQ0Y7SUFFRCxPQUFPLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQ2xDLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRztJQUNyQix5Q0FBeUMsRUFBRSxNQUFNO0lBQ2pELHlDQUF5QyxFQUFFLE1BQU07Q0FDbEQsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQTtBQUMvQixDQUFDIn0=\",\"filename\":\"scripts/contracts/hamming-codes.js\",\"server\":\"foodnstuff\"}}],[\"scripts/contracts/index.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as proper2ColoringOfAGraph from 'scripts/contracts/proper-2-coloring-of-a-graph';\\nimport * as algorithmicStockTrader from 'scripts/contracts/algorithmic-stock-trader';\\nimport * as rleCompression from 'scripts/contracts/rle-compression';\\nimport * as lzCompression from 'scripts/contracts/lz-compression';\\nimport * as findAllValidMathExpressions from 'scripts/contracts/find-all-valid-math-expressions';\\nimport * as totalWaysToSum from 'scripts/contracts/total-ways-to-sum';\\nimport * as findLargestPrimeFactor from 'scripts/contracts/find-largest-prime-factor';\\nimport * as generateIPAddresses from 'scripts/contracts/generate-ip-addresses';\\nimport * as uniquePathsInAGrid from 'scripts/contracts/unique-paths-in-a-grid';\\nimport * as subarrayWithMaximumSum from 'scripts/contracts/subarray-with-maximum-sum';\\nimport * as viginereCipher from 'scripts/contracts/vigenere-cipher';\\nimport * as hammingCodes from 'scripts/contracts/hamming-codes';\\nimport * as arrayJumpingGame from 'scripts/contracts/array-jumping-game';\\nimport * as caesarCipher from 'scripts/contracts/caesar-cipher';\\nimport * as spiralizeMatrix from 'scripts/contracts/spiralize-matrix';\\nimport * as mergeOverlappingIntervals from 'scripts/contracts/merge-overlapping-intervals';\\nimport * as shortestPathInAGrid from 'scripts/contracts/shortest-path-in-a-grid';\\nimport * as sanitizeParenthesisInExpression from 'scripts/contracts/sanitize-parenthesis-in-expression';\\nimport * as minimumPathSumInATriangle from 'scripts/contracts/minimum-path-sum-in-a-triangle';\\nconst solvers = {\\n    ...proper2ColoringOfAGraph.solvers,\\n    ...algorithmicStockTrader.solvers,\\n    ...rleCompression.solvers,\\n    ...lzCompression.solvers,\\n    ...findAllValidMathExpressions.solvers,\\n    ...totalWaysToSum.solvers,\\n    ...findLargestPrimeFactor.solvers,\\n    ...generateIPAddresses.solvers,\\n    ...uniquePathsInAGrid.solvers,\\n    ...subarrayWithMaximumSum.solvers,\\n    ...viginereCipher.solvers,\\n    ...hammingCodes.solvers,\\n    ...arrayJumpingGame.solvers,\\n    ...caesarCipher.solvers,\\n    ...spiralizeMatrix.solvers,\\n    ...mergeOverlappingIntervals.solvers,\\n    ...shortestPathInAGrid.solvers,\\n    ...sanitizeParenthesisInExpression.solvers,\\n    ...minimumPathSumInATriangle.solvers,\\n};\\nexport const solve = (ns, host, filename) => {\\n    const name = ns.codingcontract.getContractType(filename, host);\\n    const data = ns.codingcontract.getData(filename, host);\\n    const solver = solvers[name];\\n    if (!solver) {\\n        ns.toast(`Solver for contract \\\"${name}\\\" not implemented.`, 'warning', 5000);\\n        return;\\n    }\\n    const reward = ns.codingcontract.attempt(solver(data), filename, host);\\n    if (reward) {\\n        ns.toast(`Correctly solved contract. Reward: ${reward}`, 'success', 5000);\\n    }\\n    else {\\n        ns.toast('Failed to solve contract.', 'error', 5000);\\n        ns.tprint(`Failed to solve ${filename} at ${host}`);\\n        ns.exit();\\n    }\\n};\\nexport async function main(ns) {\\n    const [host, filename] = ns.args;\\n    if (!host || !filename) {\\n        ns.tprint('Missing host or filename argument');\\n        ns.exit();\\n    }\\n    solve(ns, host, filename);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9jb250cmFjdHMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxLQUFLLHVCQUF1QixNQUFNLGdEQUFnRCxDQUFBO0FBQ3pGLE9BQU8sS0FBSyxzQkFBc0IsTUFBTSw0Q0FBNEMsQ0FBQTtBQUNwRixPQUFPLEtBQUssY0FBYyxNQUFNLG1DQUFtQyxDQUFBO0FBQ25FLE9BQU8sS0FBSyxhQUFhLE1BQU0sa0NBQWtDLENBQUE7QUFDakUsT0FBTyxLQUFLLDJCQUEyQixNQUFNLG1EQUFtRCxDQUFBO0FBQ2hHLE9BQU8sS0FBSyxjQUFjLE1BQU0scUNBQXFDLENBQUE7QUFDckUsT0FBTyxLQUFLLHNCQUFzQixNQUFNLDZDQUE2QyxDQUFBO0FBQ3JGLE9BQU8sS0FBSyxtQkFBbUIsTUFBTSx5Q0FBeUMsQ0FBQTtBQUM5RSxPQUFPLEtBQUssa0JBQWtCLE1BQU0sMENBQTBDLENBQUE7QUFDOUUsT0FBTyxLQUFLLHNCQUFzQixNQUFNLDZDQUE2QyxDQUFBO0FBQ3JGLE9BQU8sS0FBSyxjQUFjLE1BQU0sbUNBQW1DLENBQUE7QUFDbkUsT0FBTyxLQUFLLFlBQVksTUFBTSxpQ0FBaUMsQ0FBQTtBQUMvRCxPQUFPLEtBQUssZ0JBQWdCLE1BQU0sc0NBQXNDLENBQUE7QUFDeEUsT0FBTyxLQUFLLFlBQVksTUFBTSxpQ0FBaUMsQ0FBQTtBQUMvRCxPQUFPLEtBQUssZUFBZSxNQUFNLG9DQUFvQyxDQUFBO0FBQ3JFLE9BQU8sS0FBSyx5QkFBeUIsTUFBTSwrQ0FBK0MsQ0FBQTtBQUMxRixPQUFPLEtBQUssbUJBQW1CLE1BQU0sMkNBQTJDLENBQUE7QUFDaEYsT0FBTyxLQUFLLCtCQUErQixNQUFNLHNEQUFzRCxDQUFBO0FBQ3ZHLE9BQU8sS0FBSyx5QkFBeUIsTUFBTSxrREFBa0QsQ0FBQTtBQUU3RixNQUFNLE9BQU8sR0FBNEM7SUFDdkQsR0FB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\",\"filename\":\"scripts/contracts/index.js\",\"server\":\"foodnstuff\"}}],[\"scripts/contracts/lz-compression.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = 'XbaaaaaaaatuiW1vLatu0kLatuLatuLatu3QErNGNGNMuzZ03G7Ko1gfs7fut0eLgfuitOY7mM';\\nconst decompress = (input) => {\\n    const ans = [];\\n    let cur = 0;\\n    for (let k = 0; cur < input.length; k ^= 1) {\\n        const n = parseInt(input[cur++]);\\n        if (n === 0) {\\n            continue;\\n        }\\n        if (k === 0) {\\n            for (let i = 0; i < n; i++) {\\n                ans.push(input[cur++]);\\n            }\\n        }\\n        else {\\n            const m = parseInt(input[cur++]);\\n            for (let i = 0; i < n; i++) {\\n                ans.push(ans[ans.length - m]);\\n            }\\n        }\\n    }\\n    return ans.join('');\\n};\\nconst compress = (input) => {\\n    const n = input.length;\\n    const dp = [...Array(2)].map(() => Array(n).fill(Infinity));\\n    const op = [...Array(2)].map(() => Array(n).fill(''));\\n    dp[0][n] = dp[1][n] = 0;\\n    for (let i = n - 1; i >= 0; i--) {\\n        // 0\\n        for (let j = 1; j <= 9 && i + j <= n; j++) {\\n            const val = 1 + j + dp[1][i + j];\\n            if (val < dp[0][i]) {\\n                dp[0][i] = val;\\n                op[0][i] = `${j}`;\\n            }\\n        }\\n        // 1\\n        for (let j = 1; j <= 9 && i - j >= 0; j++) {\\n            for (let k = 1; k <= 9 && i + k <= n; k++) {\\n                if (input[i + k - 1] === input[i - j + k - 1]) {\\n                    const val = 2 + dp[0][i + k];\\n                    if (val < dp[1][i]) {\\n                        dp[1][i] = val;\\n                        op[1][i] = `${k}${j}`;\\n                    }\\n                }\\n                else {\\n                    break;\\n                }\\n            }\\n        }\\n        // consider 0\\n        if (dp[0][i] < dp[1][i]) {\\n            dp[1][i] = 1 + dp[0][i];\\n            op[1][i] = '0';\\n        }\\n        else if (dp[1][i] < dp[0][i]) {\\n            dp[0][i] = 1 + dp[1][i];\\n            op[0][i] = '0';\\n        }\\n    }\\n    const ans = [];\\n    let curN = 0;\\n    let curT = 0;\\n    while (curN < n) {\\n        if (curT === 0) {\\n            ans.push(op[curT][curN]);\\n            const cnt = parseInt(op[curT][curN]);\\n            for (let i = 0; i < cnt; i++) {\\n                ans.push(input[curN + i]);\\n            }\\n            curN += cnt;\\n        }\\n        else {\\n            ans.push(op[curT][curN]);\\n            curN += parseInt(op[curT][curN][0]);\\n        }\\n        curT ^= 1;\\n    }\\n    return ans.join('');\\n};\\nexport const solvers = {\\n    'Compression II: LZ Decompression': decompress,\\n    'Compression III: LZ Compression': compress,\\n};\\nexport async function main(ns) {\\n    ns.tprint(input);\\n    ns.tprint(compress(input));\\n    ns.tprint(decompress(compress(input)));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHotY29tcHJlc3Npb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9jb250cmFjdHMvbHotY29tcHJlc3Npb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsTUFBTSxLQUFLLEdBQ1QsNEVBQTRFLENBQUE7QUFFOUUsTUFBTSxVQUFVLEdBQUcsQ0FBQyxLQUFZLEVBQUUsRUFBRTtJQUNsQyxNQUFNLEdBQUcsR0FBYSxFQUFFLENBQUE7SUFDeEIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFBO0lBRVgsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUMxQyxNQUFNLENBQUMsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUVoQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDWCxTQUFRO1NBQ1Q7UUFFRCxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDWCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUMxQixHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUE7YUFDdkI7U0FDRjthQUFNO1lBQ0wsTUFBTSxDQUFDLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUE7WUFFaEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDMUIsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO2FBQzlCO1NBQ0Y7S0FDRjtJQUVELE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtBQUNyQixDQUFDLENBQUE7QUFFRCxNQUFNLFFBQVEsR0FBRyxDQUFDLEtBQVksRUFBRSxFQUFFO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUE7SUFDdEIsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUE7SUFDM0QsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFFckQsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7SUFFdkIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDL0IsSUFBSTtRQUNKLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDekMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO1lBRWhDLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDbEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FB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\",\"filename\":\"scripts/contracts/lz-compression.js\",\"server\":\"foodnstuff\"}}],[\"scripts/contracts/merge-overlapping-intervals.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const solve = (input) => {\\n    if (input.length === 0) {\\n        return [];\\n    }\\n    input.sort(([a], [b]) => a - b);\\n    const ans = [];\\n    let [curL, curR] = input[0];\\n    for (const [l, r] of input) {\\n        if (l > curR) {\\n            ans.push([curL, curR]);\\n            curL = l;\\n        }\\n        curR = Math.max(curR, r);\\n    }\\n    ans.push([curL, curR]);\\n    return ans;\\n};\\nexport const solvers = {\\n    'Merge Overlapping Intervals': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve([\\n        [4, 8],\\n        [9, 12],\\n        [15, 18],\\n        [7, 16],\\n        [4, 11],\\n        [23, 30],\\n        [13, 21],\\n        [25, 35],\\n        [10, 11],\\n        [23, 32],\\n        [5, 10],\\n        [16, 26],\\n        [13, 19],\\n        [10, 20],\\n        [7, 9],\\n        [21, 22],\\n        [25, 33],\\n        [25, 26],\\n    ]));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVyZ2Utb3ZlcmxhcHBpbmctaW50ZXJ2YWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29udHJhY3RzL21lcmdlLW92ZXJsYXBwaW5nLWludGVydmFscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxLQUFpQixFQUFFLEVBQUU7SUFDekMsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUN0QixPQUFPLEVBQUUsQ0FBQTtLQUNWO0lBRUQsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0lBRS9CLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQTtJQUVkLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBRTNCLEtBQUssTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxLQUFLLEVBQUU7UUFDMUIsSUFBSSxDQUFDLEdBQUcsSUFBSSxFQUFFO1lBQ1osR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFBO1lBQ3RCLElBQUksR0FBRyxDQUFDLENBQUE7U0FDVDtRQUVELElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQTtLQUN6QjtJQUVELEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQTtJQUN0QixPQUFPLEdBQUcsQ0FBQTtBQUNaLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRztJQUNyQiw2QkFBNkIsRUFBRSxLQUFLO0NBQ3JDLENBQUE7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxNQUFNLENBQ1AsS0FBSyxDQUFDO1FBQ0osQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ04sQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ1AsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ1AsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ1AsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ1AsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ04sQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO0tBQ1QsQ0FBQyxDQUNILENBQUE7QUFDSCxDQUFDIn0=\",\"filename\":\"scripts/contracts/merge-overlapping-intervals.js\",\"server\":\"foodnstuff\"}}],[\"scripts/contracts/minimum-path-sum-in-a-triangle.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const solve = (input) => {\\n    const n = input.length;\\n    const dp = input.map((row) => row.map(() => Infinity));\\n    dp[n - 1] = input[n - 1];\\n    for (let row = n - 2; row >= 0; row--) {\\n        for (let col = 0; col <= row; col++) {\\n            [col, col + 1]\\n                .filter((x) => x <= row + 1)\\n                .forEach((c) => (dp[row][col] = Math.min(dp[row][col], dp[row + 1][c] + input[row][col])));\\n        }\\n    }\\n    return dp[0][0];\\n};\\nexport const solvers = {\\n    'Minimum Path Sum in a Triangle': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve([[2], [3, 4], [6, 5, 7], [4, 1, 8, 3]]));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWluaW11bS1wYXRoLXN1bS1pbi1hLXRyaWFuZ2xlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29udHJhY3RzL21pbmltdW0tcGF0aC1zdW0taW4tYS10cmlhbmdsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLEtBQUssR0FBRyxDQUFDLEtBQWlCLEVBQUUsRUFBRTtJQUNsQyxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFBO0lBRXRCLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQTtJQUN0RCxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7SUFFeEIsS0FBSyxJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUU7UUFDckMsS0FBSyxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUNuQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDO2lCQUNYLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUM7aUJBQzNCLE9BQU8sQ0FDTixDQUFDLENBQUMsRUFBRSxFQUFFLENBQ0osQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FDdEIsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUNaLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUNqQyxDQUFDLENBQ0wsQ0FBQTtTQUNKO0tBQ0Y7SUFFRCxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUNqQixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUc7SUFDckIsZ0NBQWdDLEVBQUUsS0FBSztDQUN4QyxDQUFBO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDMUQsQ0FBQyJ9\",\"filename\":\"scripts/contracts/minimum-path-sum-in-a-triangle.js\",\"server\":\"foodnstuff\"}}],[\"scripts/contracts/proper-2-coloring-of-a-graph.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = [\\n    4,\\n    [\\n        [0, 2],\\n        [0, 3],\\n        [1, 2],\\n        [1, 3],\\n    ],\\n];\\nconst solve = (arr) => {\\n    const [n, edges] = arr;\\n    const ans = Array(n).fill(-1);\\n    const adj = [...Array(n)].map(() => []);\\n    for (const [u, v] of edges) {\\n        adj[u].push(v);\\n        adj[v].push(u);\\n    }\\n    const dfs = (v, c = 0) => {\\n        ans[v] = c;\\n        for (const w of adj[v]) {\\n            if (ans[w] === c) {\\n                return false;\\n            }\\n            else if (ans[w] === -1) {\\n                if (!dfs(w, 1 - c)) {\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    };\\n    for (let v = 0; v < n; v++) {\\n        if (ans[v] === -1) {\\n            if (!dfs(v)) {\\n                return [];\\n            }\\n        }\\n    }\\n    return ans;\\n};\\nexport const solvers = {\\n    'Proper 2-Coloring of a Graph': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcGVyLTItY29sb3Jpbmctb2YtYS1ncmFwaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvbnRyYWN0cy9wcm9wZXItMi1jb2xvcmluZy1vZi1hLWdyYXBoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE1BQU0sS0FBSyxHQUFVO0lBQ25CLENBQUM7SUFDRDtRQUNFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNOLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNOLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNOLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNQO0NBQ0YsQ0FBQTtBQUVELE1BQU0sS0FBSyxHQUFHLENBQUMsR0FBVSxFQUFFLEVBQUU7SUFDM0IsTUFBTSxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUE7SUFDdEIsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQzdCLE1BQU0sR0FBRyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBYyxDQUFDLENBQUE7SUFFbkQsS0FBSyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEtBQUssRUFBRTtRQUMxQixHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUNmO0lBRUQsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFTLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFO1FBQy9CLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDVixLQUFLLE1BQU0sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUN0QixJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ2hCLE9BQU8sS0FBSyxDQUFBO2FBQ2I7aUJBQU0sSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7Z0JBQ3hCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtvQkFDbEIsT0FBTyxLQUFLLENBQUE7aUJBQ2I7YUFDRjtTQUNGO1FBQ0QsT0FBTyxJQUFJLENBQUE7SUFDYixDQUFDLENBQUE7SUFFRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzFCLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ1gsT0FBTyxFQUFFLENBQUE7YUFDVjtTQUNGO0tBQ0Y7SUFFRCxPQUFPLEdBQUcsQ0FBQTtBQUNaLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRztJQUNyQiw4QkFBOEIsRUFBRSxLQUFLO0NBQ3RDLENBQUE7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7QUFDekIsQ0FBQyJ9\",\"filename\":\"scripts/contracts/proper-2-coloring-of-a-graph.js\",\"server\":\"foodnstuff\"}}],[\"scripts/contracts/rle-compression.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = 'zzzzzzzzzzzzzzzzzzz';\\nexport const solve = (input) => {\\n    let lastChar = '';\\n    let lastCnt = 0;\\n    const ans = [];\\n    for (const c of input) {\\n        if (c !== lastChar || lastCnt === 9) {\\n            if (lastCnt > 0) {\\n                ans.push(lastCnt);\\n                ans.push(lastChar);\\n            }\\n            lastCnt = 0;\\n            lastChar = c;\\n        }\\n        lastCnt++;\\n    }\\n    ans.push(lastCnt);\\n    ans.push(lastChar);\\n    return ans.join('');\\n};\\nexport const solvers = {\\n    'Compression I: RLE Compression': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmxlLWNvbXByZXNzaW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29udHJhY3RzL3JsZS1jb21wcmVzc2lvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxNQUFNLEtBQUssR0FBVSxxQkFBcUIsQ0FBQTtBQUUxQyxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxLQUFZLEVBQUUsRUFBRTtJQUNwQyxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUE7SUFDakIsSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFBO0lBRWYsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFBO0lBRWQsS0FBSyxNQUFNLENBQUMsSUFBSSxLQUFLLEVBQUU7UUFDckIsSUFBSSxDQUFDLEtBQUssUUFBUSxJQUFJLE9BQU8sS0FBSyxDQUFDLEVBQUU7WUFDbkMsSUFBSSxPQUFPLEdBQUcsQ0FBQyxFQUFFO2dCQUNmLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7Z0JBQ2pCLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUE7YUFDbkI7WUFDRCxPQUFPLEdBQUcsQ0FBQyxDQUFBO1lBQ1gsUUFBUSxHQUFHLENBQUMsQ0FBQTtTQUNiO1FBQ0QsT0FBTyxFQUFFLENBQUE7S0FDVjtJQUVELEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDakIsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUNsQixPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7QUFDckIsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHO0lBQ3JCLGdDQUFnQyxFQUFFLEtBQUs7Q0FDeEMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUN6QixDQUFDIn0=\",\"filename\":\"scripts/contracts/rle-compression.js\",\"server\":\"foodnstuff\"}}],[\"scripts/contracts/sanitize-parenthesis-in-expression.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const solve = (input) => {\\n    const n = input.length;\\n    const expr = input.split('');\\n    const ans = new Set();\\n    let minCnt = 0;\\n    let s = 0;\\n    for (const c of input) {\\n        if (c === '(') {\\n            s++;\\n        }\\n        else if (c === ')') {\\n            if (s === 0) {\\n                minCnt++;\\n            }\\n            else {\\n                s--;\\n            }\\n        }\\n    }\\n    minCnt += s;\\n    const rec = (i, s, cnt) => {\\n        if (s < 0 || cnt > minCnt) {\\n            return;\\n        }\\n        if (i === n) {\\n            if (s === 0) {\\n                ans.add(expr.join(''));\\n            }\\n            return;\\n        }\\n        switch (input[i]) {\\n            case '(':\\n                expr[i] = input[i];\\n                rec(i + 1, s + 1, cnt);\\n                expr[i] = '';\\n                rec(i + 1, s, cnt + 1);\\n                break;\\n            case ')':\\n                expr[i] = input[i];\\n                rec(i + 1, s - 1, cnt);\\n                expr[i] = '';\\n                rec(i + 1, s, cnt + 1);\\n                break;\\n            default:\\n                expr[i] = input[i];\\n                rec(i + 1, s, cnt);\\n                break;\\n        }\\n    };\\n    rec(0, 0, 0);\\n    return [...ans];\\n};\\nexport const solvers = {\\n    'Sanitize Parentheses in Expression': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(')('));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuaXRpemUtcGFyZW50aGVzaXMtaW4tZXhwcmVzc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvbnRyYWN0cy9zYW5pdGl6ZS1wYXJlbnRoZXNpcy1pbi1leHByZXNzaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLEtBQWEsRUFBRSxFQUFFO0lBQ3JDLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUE7SUFDdEIsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUM1QixNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsRUFBVSxDQUFBO0lBRTdCLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQTtJQUNkLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUVULEtBQUssTUFBTSxDQUFDLElBQUksS0FBSyxFQUFFO1FBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRTtZQUNiLENBQUMsRUFBRSxDQUFBO1NBQ0o7YUFBTSxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUU7WUFDcEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUNYLE1BQU0sRUFBRSxDQUFBO2FBQ1Q7aUJBQU07Z0JBQ0wsQ0FBQyxFQUFFLENBQUE7YUFDSjtTQUNGO0tBQ0Y7SUFFRCxNQUFNLElBQUksQ0FBQyxDQUFBO0lBRVgsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFTLEVBQUUsQ0FBUyxFQUFFLEdBQVcsRUFBRSxFQUFFO1FBQ2hELElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLEdBQUcsTUFBTSxFQUFFO1lBQ3pCLE9BQU07U0FDUDtRQUVELElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNYLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDWCxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTthQUN2QjtZQUNELE9BQU07U0FDUDtRQUVELFFBQVEsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ2hCLEtBQUssR0FBRztnQkFDTixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO2dCQUNsQixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFBO2dCQUN0QixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFBO2dCQUNaLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUE7Z0JBQ3RCLE1BQUs7WUFFUCxLQUFLLEdBQUc7Z0JBQ04sSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtnQkFDbEIsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQTtnQkFDdEIsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtnQkFDWixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFBO2dCQUN0QixNQUFLO1lBRVA7Z0JBQ0UsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtnQkFDbEIsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFBO2dCQUNsQixNQUFLO1NBQ1I7SUFDSCxDQUFDLENBQUE7SUFFRCxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUVaLE9BQU8sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFBO0FBQ2pCLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRztJQUNyQixvQ0FBb0MsRUFBRSxLQUFLO0NBQzVDLENBQUE7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7QUFDeEIsQ0FBQyJ9\",\"filename\":\"scripts/contracts/sanitize-parenthesis-in-expression.js\",\"server\":\"foodnstuff\"}}],[\"scripts/contracts/shortest-path-in-a-grid.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const solve = (input) => {\\n    const dirs = [\\n        [1, 0, 'U'],\\n        [-1, 0, 'D'],\\n        [0, 1, 'L'],\\n        [0, -1, 'R'],\\n    ];\\n    const n = input.length;\\n    const m = input[0].length;\\n    if (input[0][0] === 1 || input[n - 1][m - 1] === 1) {\\n        return '';\\n    }\\n    const d = input.map((a) => a.map(() => Infinity));\\n    const op = input.map((a) => a.map(() => ''));\\n    const prv = input.map((a) => a.map(() => []));\\n    d[n - 1][m - 1] = 0;\\n    let q = [[n - 1, m - 1]];\\n    while (q.length > 0) {\\n        const [r, c] = q[0];\\n        q = q.slice(1);\\n        for (const [dr, dc, dir] of dirs) {\\n            const nr = r + dr;\\n            const nc = c + dc;\\n            if (nr < 0 ||\\n                nc < 0 ||\\n                nr >= n ||\\n                nc >= m ||\\n                d[nr][nc] !== Infinity ||\\n                input[nr][nc] === 1) {\\n                continue;\\n            }\\n            d[nr][nc] = d[r][c] + 1;\\n            op[nr][nc] = dir;\\n            prv[nr][nc] = [r, c];\\n            q.push([nr, nc]);\\n        }\\n    }\\n    if (d[0][0] === Infinity) {\\n        return '';\\n    }\\n    const ans = [];\\n    let cr = 0;\\n    let cc = 0;\\n    while (cr !== n - 1 || cc !== m - 1) {\\n        ans.push(op[cr][cc]);\\n        const [nr, nc] = prv[cr][cc];\\n        cr = nr;\\n        cc = nc;\\n    }\\n    return ans.join('');\\n};\\nexport const solvers = {\\n    'Shortest Path in a Grid': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve([\\n        [0, 1, 0, 0, 0],\\n        [0, 0, 0, 1, 0],\\n    ]));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvcnRlc3QtcGF0aC1pbi1hLWdyaWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9jb250cmFjdHMvc2hvcnRlc3QtcGF0aC1pbi1hLWdyaWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLENBQUMsS0FBaUIsRUFBRSxFQUFFO0lBQ3pDLE1BQU0sSUFBSSxHQUFHO1FBQ1gsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQztRQUNYLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQztRQUNaLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUM7UUFDWCxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUM7S0FDSixDQUFBO0lBRVYsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQTtJQUN0QixNQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFBO0lBRXpCLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDbEQsT0FBTyxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQTtJQUNqRCxNQUFNLEVBQUUsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDNUMsTUFBTSxHQUFHLEdBQWlCLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUUzRCxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7SUFFbkIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFFeEIsT0FBTyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUNuQixNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNuQixDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUVkLEtBQUssTUFBTSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxDQUFDLElBQUksSUFBSSxFQUFFO1lBQ2hDLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUE7WUFDakIsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtZQUVqQixJQUNFLEVBQUUsR0FBRyxDQUFDO2dCQUNOLEVBQUUsR0FBRyxDQUFDO2dCQUNOLEVBQUUsSUFBSSxDQUFDO2dCQUNQLEVBQUUsSUFBSSxDQUFDO2dCQUNQLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxRQUFRO2dCQUN0QixLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUNuQjtnQkFDQSxTQUFRO2FBQ1Q7WUFFRCxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUN2QixFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFBO1lBQ2hCLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtZQUNwQixDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUE7U0FDakI7S0FDRjtJQUVELElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsRUFBRTtRQUN4QixPQUFPLEVBQUUsQ0FBQTtLQUNWO0lBRUQsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFBO0lBQ2QsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFBO0lBQ1YsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFBO0lBRVYsT0FBTyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUNuQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBQ3BCLE1BQU0sQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBQzVCLEVBQUUsR0FBRyxFQUFFLENBQUE7UUFDUCxFQUFFLEdBQUcsRUFBRSxDQUFBO0tBQ1I7SUFFRCxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7QUFDckIsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHO0lBQ3JCLHlCQUF5QixFQUFFLEtBQUs7Q0FDakMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE1BQU0sQ0FDUCxLQUFLLENBQUM7UUFDSixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDZixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDaEIsQ0FBQyxDQUNILENBQUE7QUFDSCxDQUFDIn0=\",\"filename\":\"scripts/contracts/shortest-path-in-a-grid.js\",\"server\":\"foodnstuff\"}}],[\"scripts/contracts/spiralize-matrix.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const solve = (input) => {\\n    const rotate = (mat) => {\\n        const n = mat.length;\\n        if (n === 0) {\\n            return [];\\n        }\\n        const m = mat[0].length;\\n        const res = [...Array(m)].map(() => []);\\n        for (let c = 0; c < m; c++) {\\n            for (let r = 0; r < n; r++) {\\n                res[c].push(mat[r].pop());\\n            }\\n        }\\n        return res;\\n    };\\n    let ans = [];\\n    while (input.length > 0) {\\n        ans = ans.concat(input[0]);\\n        input = rotate(input.slice(1));\\n    }\\n    return ans;\\n};\\nexport const solvers = {\\n    'Spiralize Matrix': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve([\\n        [1, 2, 3, 4],\\n        [5, 6, 7, 8],\\n        [9, 10, 11, 12],\\n    ]));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BpcmFsaXplLW1hdHJpeC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvbnRyYWN0cy9zcGlyYWxpemUtbWF0cml4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLEtBQWlCLEVBQUUsRUFBRTtJQUN6QyxNQUFNLE1BQU0sR0FBRyxDQUFDLEdBQWUsRUFBRSxFQUFFO1FBQ2pDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUE7UUFFcEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ1gsT0FBTyxFQUFFLENBQUE7U0FDVjtRQUVELE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUE7UUFFdkIsTUFBTSxHQUFHLEdBQWUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUVuRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzFCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQzFCLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRyxDQUFDLENBQUE7YUFDM0I7U0FDRjtRQUVELE9BQU8sR0FBRyxDQUFBO0lBQ1osQ0FBQyxDQUFBO0lBRUQsSUFBSSxHQUFHLEdBQWEsRUFBRSxDQUFBO0lBRXRCLE9BQU8sS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDdkIsR0FBRyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDMUIsS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDL0I7SUFFRCxPQUFPLEdBQUcsQ0FBQTtBQUNaLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRztJQUNyQixrQkFBa0IsRUFBRSxLQUFLO0NBQzFCLENBQUE7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxNQUFNLENBQ1AsS0FBSyxDQUFDO1FBQ0osQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDWixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNaLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDO0tBQ2hCLENBQUMsQ0FDSCxDQUFBO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/contracts/spiralize-matrix.js\",\"server\":\"foodnstuff\"}}],[\"scripts/contracts/stock-trader.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = [2, [16, 188, 133, 38, 163, 94, 43, 43, 135, 17, 107, 39, 78, 199, 84, 78, 158, 72, 158, 71, 6, 123, 145, 55, 87, 127, 32, 29, 26, 164, 142, 141, 166]];\\nexport const solve = (input) => {\\n    const [k, arr] = input;\\n    const n = arr.length;\\n    const dp = [...Array(k + 1)].map(() => Array(n).fill(0));\\n    for (let kk = 1; kk <= k; kk++) {\\n        for (let i = 1; i < n; i++) {\\n            dp[kk][i] = Math.max(dp[kk][i - 1], dp[kk - 1][i]);\\n            for (let j = i - 1; j >= 0; j--) {\\n                if (arr[i] > arr[j]) {\\n                    dp[kk][i] = Math.max(dp[kk][i], dp[kk - 1][j] + arr[i] - arr[j]);\\n                }\\n            }\\n        }\\n    }\\n    return dp[k][n - 1];\\n};\\nexport const solvers = {\\n    'Algorithmic Stock Trader IV': solve,\\n    'Algorithmic Stock Trader III': (input) => solve([2, input]),\\n    'Algorithmic Stock Trader II': (input) => solve([input.length, input]),\\n    'Algorithmic Stock Trader I': (input) => solve([1, input]),\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvY2stdHJhZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29udHJhY3RzL3N0b2NrLXRyYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxNQUFNLEtBQUssR0FBVSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQTtBQUU1SyxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxLQUFZLEVBQUUsRUFBRTtJQUNwQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQTtJQUN0QixNQUFNLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFBO0lBRXBCLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUV4RCxLQUFLLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFO1FBQzlCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDMUIsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDbEQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQy9CLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtvQkFDbkIsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO2lCQUNqRTthQUNGO1NBQ0Y7S0FDRjtJQUVELE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtBQUNyQixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUc7SUFDckIsNkJBQTZCLEVBQUUsS0FBSztJQUNwQyw4QkFBOEIsRUFBRSxDQUFDLEtBQWUsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3RFLDZCQUE2QixFQUFFLENBQUMsS0FBZSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2hGLDRCQUE0QixFQUFFLENBQUMsS0FBZSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDckUsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUN6QixDQUFDIn0=\",\"filename\":\"scripts/contracts/stock-trader.js\",\"server\":\"foodnstuff\"}}],[\"scripts/contracts/subarray-max-sum.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = [\\n    -9, 8, -10, 9, 2, -9, -7, -5, 6, 9, 3, 2, 1, -1, 2, -9, 8, 5, -6, -6, 3, -3,\\n    6, 7, -1, 5, -7, -1,\\n];\\nexport const solve = (arr) => {\\n    let best = arr[0];\\n    let sum = 0;\\n    for (const x of arr) {\\n        sum += x;\\n        if (sum > best) {\\n            best = sum;\\n        }\\n        if (sum < 0) {\\n            sum = 0;\\n        }\\n    }\\n    console.log(best);\\n};\\nsolve(input);\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ViYXJyYXktbWF4LXN1bS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvbnRyYWN0cy9zdWJhcnJheS1tYXgtc3VtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sS0FBSyxHQUFHO0lBQ1osQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzNFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUNwQixDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLENBQUMsR0FBYSxFQUFFLEVBQUU7SUFDckMsSUFBSSxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ2pCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQTtJQUVYLEtBQUssTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFO1FBQ25CLEdBQUcsSUFBSSxDQUFDLENBQUE7UUFFUixJQUFJLEdBQUcsR0FBRyxJQUFJLEVBQUU7WUFDZCxJQUFJLEdBQUcsR0FBRyxDQUFBO1NBQ1g7UUFFRCxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUU7WUFDWCxHQUFHLEdBQUcsQ0FBQyxDQUFBO1NBQ1I7S0FDRjtJQUVELE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDbkIsQ0FBQyxDQUFBO0FBRUQsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBIn0=\",\"filename\":\"scripts/contracts/subarray-max-sum.js\",\"server\":\"foodnstuff\"}}],[\"scripts/contracts/subarray-with-maximum-sum.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = [\\n    -9, 8, -10, 9, 2, -9, -7, -5, 6, 9, 3, 2, 1, -1, 2, -9, 8, 5, -6, -6, 3, -3,\\n    6, 7, -1, 5, -7, -1,\\n];\\nconst solve = (input) => {\\n    let best = input[0];\\n    let sum = 0;\\n    for (const x of input) {\\n        sum += x;\\n        if (sum > best) {\\n            best = sum;\\n        }\\n        if (sum < 0) {\\n            sum = 0;\\n        }\\n    }\\n    return best;\\n};\\nexport const solvers = {\\n    'Subarray with Maximum Sum': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ViYXJyYXktd2l0aC1tYXhpbXVtLXN1bS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvbnRyYWN0cy9zdWJhcnJheS13aXRoLW1heGltdW0tc3VtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE1BQU0sS0FBSyxHQUFVO0lBQ25CLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMzRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7Q0FDcEIsQ0FBQTtBQUVELE1BQU0sS0FBSyxHQUFHLENBQUMsS0FBWSxFQUFFLEVBQUU7SUFDN0IsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ25CLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQTtJQUVYLEtBQUssTUFBTSxDQUFDLElBQUksS0FBSyxFQUFFO1FBQ3JCLEdBQUcsSUFBSSxDQUFDLENBQUE7UUFFUixJQUFJLEdBQUcsR0FBRyxJQUFJLEVBQUU7WUFDZCxJQUFJLEdBQUcsR0FBRyxDQUFBO1NBQ1g7UUFFRCxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUU7WUFDWCxHQUFHLEdBQUcsQ0FBQyxDQUFBO1NBQ1I7S0FDRjtJQUVELE9BQU8sSUFBSSxDQUFBO0FBQ2IsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHO0lBQ3JCLDJCQUEyQixFQUFFLEtBQUs7Q0FDbkMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUN6QixDQUFDIn0=\",\"filename\":\"scripts/contracts/subarray-with-maximum-sum.js\",\"server\":\"foodnstuff\"}}],[\"scripts/contracts/total-ways-to-sum.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = [5, [1, 2]];\\nexport const solve = (input) => {\\n    const [n, arr] = input;\\n    const dp = Array(n + 1).fill(0);\\n    dp[0] = 1;\\n    for (const x of arr) {\\n        for (let i = x; i <= n; i++) {\\n            dp[i] += dp[i - x];\\n        }\\n    }\\n    return dp[n];\\n};\\nexport const solvers = {\\n    'Total Ways to Sum': (input) => solve([input, [...Array(input - 1)].map((_, idx) => idx + 1)]),\\n    'Total Ways to Sum II': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG90YWwtd2F5cy10by1zdW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9jb250cmFjdHMvdG90YWwtd2F5cy10by1zdW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxLQUFLLEdBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUVoQyxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxLQUFZLEVBQUUsRUFBRTtJQUNwQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQTtJQUV0QixNQUFNLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUMvQixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBRVQsS0FBSyxNQUFNLENBQUMsSUFBSSxHQUFHLEVBQUU7UUFDbkIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMzQixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtTQUNuQjtLQUNGO0lBRUQsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDZCxDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUc7SUFDckIsbUJBQW1CLEVBQUUsQ0FBQyxLQUFhLEVBQUUsRUFBRSxDQUNyQyxLQUFLLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRSxzQkFBc0IsRUFBRSxLQUFLO0NBQzlCLENBQUE7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7QUFDekIsQ0FBQyJ9\",\"filename\":\"scripts/contracts/total-ways-to-sum.js\",\"server\":\"foodnstuff\"}}],[\"scripts/contracts/unique-paths-in-a-grid.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = [\\n    [0, 0, 0],\\n    [0, 1, 0],\\n    [0, 0, 0],\\n];\\nexport const solve = (input) => {\\n    const n = input.length;\\n    const m = input[0].length;\\n    const dp = [...new Array(n)].map(() => new Array(m).fill(0));\\n    dp[0][0] = 1;\\n    for (let r = 0; r < n; r++) {\\n        for (let c = r === 0 ? 1 : 0; c < m; c++) {\\n            if (input[r][c] === 1) {\\n                continue;\\n            }\\n            dp[r][c] = (r === 0 ? 0 : dp[r - 1][c]) + (c === 0 ? 0 : dp[r][c - 1]);\\n        }\\n    }\\n    return dp[n - 1][m - 1];\\n};\\nexport const solvers = {\\n    'Unique Paths in a Grid I': ([n, m]) => solve([...Array(n)].map(() => Array(m).fill(0))),\\n    'Unique Paths in a Grid II': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pcXVlLXBhdGhzLWluLWEtZ3JpZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvbnRyYWN0cy91bmlxdWUtcGF0aHMtaW4tYS1ncmlkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE1BQU0sS0FBSyxHQUFVO0lBQ25CLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDVCxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ1QsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUNWLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxLQUFZLEVBQUUsRUFBRTtJQUNwQyxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFBO0lBQ3RCLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUE7SUFFekIsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBRTVELEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDWixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzFCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN4QyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ3JCLFNBQVE7YUFDVDtZQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FDdkU7S0FDRjtJQUVELE9BQU8sRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7QUFDekIsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHO0lBQ3JCLDBCQUEwQixFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFXLEVBQUUsRUFBRSxDQUMvQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEQsMkJBQTJCLEVBQUUsS0FBSztDQUNuQyxDQUFBO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO0FBQ3pCLENBQUMifQ==\",\"filename\":\"scripts/contracts/unique-paths-in-a-grid.js\",\"server\":\"foodnstuff\"}}],[\"scripts/contracts/unique-paths.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\nconst grid = [\\n    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,\\n    0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\\n];\\nconst n = 8;\\nconst m = 6;\\nconst solve = () => {\\n    const check = (r, c) => grid[r * m + c];\\n    const dp = [...new Array(n)].map(() => new Array(m).fill(0));\\n    dp[0][0] = 1;\\n    for (let r = 0; r < n; r++) {\\n        for (let c = r === 0 ? 1 : 0; c < m; c++) {\\n            if (check(r, c) === 1) {\\n                continue;\\n            }\\n            dp[r][c] = (r === 0 ? 0 : dp[r - 1][c]) + (c === 0 ? 0 : dp[r][c - 1]);\\n        }\\n    }\\n    console.log(dp);\\n    console.log(dp[n - 1][m - 1]);\\n};\\nsolve();\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pcXVlLXBhdGhzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29udHJhY3RzL3VuaXF1ZS1wYXRocy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxJQUFJLEdBQUc7SUFDWCxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztJQUM1RSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO0NBQ2pFLENBQUE7QUFFRCxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7QUFDWCxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7QUFFWCxNQUFNLEtBQUssR0FBRyxHQUFHLEVBQUU7SUFDakIsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFTLEVBQUUsQ0FBUyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUV2RCxNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUcsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFFNUQsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNaLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDMUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3hDLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ3JCLFNBQVE7YUFDVDtZQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FDdkU7S0FDRjtJQUVELE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDZixPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDL0IsQ0FBQyxDQUFBO0FBRUQsS0FBSyxFQUFFLENBQUEifQ==\",\"filename\":\"scripts/contracts/unique-paths.js\",\"server\":\"foodnstuff\"}}],[\"scripts/contracts/vigenere-cipher.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = ['DASHBOAD', 'LINUX'];\\nconst solve = (input) => {\\n    const getLetter = (a, b) => {\\n        const base = 'A'.charCodeAt(0);\\n        const ba = a.charCodeAt(0) - base;\\n        const bb = b.charCodeAt(0) - base;\\n        return String.fromCharCode(((ba + bb) % 26) + base);\\n    };\\n    const [s, k] = input;\\n    const ans = [];\\n    for (let i = 0; i < s.length; i++) {\\n        ans.push(getLetter(s[i], k[i % k.length]));\\n    }\\n    return ans.join('');\\n};\\nexport const solvers = {\\n    'Encryption II: Vigenère Cipher': solve,\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlnZW5lcmUtY2lwaGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29udHJhY3RzL3ZpZ2VuZXJlLWNpcGhlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxNQUFNLEtBQUssR0FBVSxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQTtBQUUxQyxNQUFNLEtBQUssR0FBRyxDQUFDLEtBQVksRUFBRSxFQUFFO0lBQzdCLE1BQU0sU0FBUyxHQUFHLENBQUMsQ0FBUyxFQUFFLENBQVMsRUFBRSxFQUFFO1FBQ3pDLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDOUIsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUE7UUFDakMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUE7UUFDakMsT0FBTyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUE7SUFDckQsQ0FBQyxDQUFBO0lBRUQsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUE7SUFFcEIsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFBO0lBRWQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDakMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUMzQztJQUVELE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtBQUNyQixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUc7SUFDckIsZ0NBQWdDLEVBQUUsS0FBSztDQUN4QyxDQUFBO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO0FBQ3pCLENBQUMifQ==\",\"filename\":\"scripts/contracts/vigenere-cipher.js\",\"server\":\"foodnstuff\"}}],[\"scripts/contracts/ways-to-sum.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const input = {\\n    n: 115,\\n    vals: [1, 2, 4, 5, 8, 9, 10, 11, 13, 14, 16],\\n};\\nexport const solve = (input) => {\\n    const { n, vals } = input;\\n    const dp = Array(n + 1).fill(0);\\n    dp[0] = 1;\\n    for (const val of vals) {\\n        for (let i = val; i <= n; i++) {\\n            dp[i] += dp[i - val];\\n        }\\n    }\\n    return dp[n];\\n};\\nexport async function main(ns) {\\n    ns.tprint(solve(input));\\n}\\nconsole.log(solve(input));\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2F5cy10by1zdW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9jb250cmFjdHMvd2F5cy10by1zdW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBT0EsTUFBTSxLQUFLLEdBQUc7SUFDWixDQUFDLEVBQUUsR0FBRztJQUNOLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUM7Q0FDN0MsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLEtBQVksRUFBRSxFQUFFO0lBQ3BDLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFBO0lBRXpCLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQy9CLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7SUFFVCxLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksRUFBRTtRQUN0QixLQUFLLElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzdCLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFBO1NBQ3JCO0tBQ0Y7SUFFRCxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUNkLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUN6QixDQUFDO0FBRUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQSJ9\",\"filename\":\"scripts/contracts/ways-to-sum.js\",\"server\":\"foodnstuff\"}}],[\"scripts/corporations/constants.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CITIES = {\\n    SECTOR_12: 'Sector-12',\\n    AEVUM: 'Aevum',\\n    CHONGQING: 'Chongqing',\\n    NEW_TOKYO: 'New Tokyo',\\n    ISHIMA: 'Ishima',\\n    VOLHAVEN: 'Volhaven',\\n};\\nexport const CITY_NAMES = Object.values(CITIES);\\nexport const MATERIALS = {\\n    MINERALS: 'Minerals',\\n    ORE: 'Ore',\\n    WATER: 'Water',\\n    FOOD: 'Food',\\n    PLANTS: 'Plants',\\n    METAL: 'Metal',\\n    HARDWARE: 'Hardware',\\n    CHEMICALS: 'Chemicals',\\n    DRUGS: 'Drugs',\\n    ROBOTS: 'Robots',\\n    AI_CORES: 'AI Cores',\\n    REAL_ESTATE: 'Real Estate',\\n};\\nexport const EMPLOYEE_POSITIONS = {\\n    UNASSIGNED: 'Unassigned',\\n    OPERATIONS: 'Operations',\\n    ENGINEER: 'Engineer',\\n    BUSINESS: 'Business',\\n    MANAGEMENT: 'Management',\\n    R_AND_D: 'Research & Development',\\n    INTERN: 'Intern',\\n};\\nexport const UNLOCKABLES = {\\n    EXPORT: 'Export',\\n};\\nexport const UPGRADES = {\\n    WILSON_ANALYTICS: 'Wilson Analytics',\\n    ABC_SALESBOTS: 'ABC SalesBots',\\n    SMART_STORAGE: 'Smart Storage',\\n    FOCUS_WIRES: 'FocusWires',\\n    NEURAL_ACCELERATORS: 'Neural Accelerators',\\n    PROJECT_INSIGHT: 'Project Insight',\\n    NNII: 'Nuoptimal Nootropic Injector Implants',\\n    SMART_FACTORIES: 'Smart Factories',\\n};\\nexport const INDUSTRIES = {\\n    RESTAURANT: 'Restaurant',\\n    TOBACCO: 'Tobacco',\\n    AGRICULTURE: 'Agriculture',\\n    CHEMICAL: 'Chemical',\\n};\\nexport const RESEARCHES = {\\n    HI_TECH: 'Hi-Tech R&D Laboratory',\\n    MARKET_TA_I: 'Market-TA.I',\\n    MARKET_TA_II: 'Market-TA.II',\\n};\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29ycG9yYXRpb25zL2NvbnN0YW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFPQSxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUc7SUFDcEIsU0FBUyxFQUFFLFdBQVc7SUFDdEIsS0FBSyxFQUFFLE9BQU87SUFDZCxTQUFTLEVBQUUsV0FBVztJQUN0QixTQUFTLEVBQUUsV0FBVztJQUN0QixNQUFNLEVBQUUsUUFBUTtJQUNoQixRQUFRLEVBQUUsVUFBVTtDQUM0QixDQUFBO0FBRWxELE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBRS9DLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRztJQUN2QixRQUFRLEVBQUUsVUFBVTtJQUNwQixHQUFHLEVBQUUsS0FBSztJQUNWLEtBQUssRUFBRSxPQUFPO0lBQ2QsSUFBSSxFQUFFLE1BQU07SUFDWixNQUFNLEVBQUUsUUFBUTtJQUNoQixLQUFLLEVBQUUsT0FBTztJQUNkLFFBQVEsRUFBRSxVQUFVO0lBQ3BCLFNBQVMsRUFBRSxXQUFXO0lBQ3RCLEtBQUssRUFBRSxPQUFPO0lBQ2QsTUFBTSxFQUFFLFFBQVE7SUFDaEIsUUFBUSxFQUFFLFVBQVU7SUFDcEIsV0FBVyxFQUFFLGFBQWE7Q0FDeUIsQ0FBQTtBQUVyRCxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRztJQUNoQyxVQUFVLEVBQUUsWUFBWTtJQUN4QixVQUFVLEVBQUUsWUFBWTtJQUN4QixRQUFRLEVBQUUsVUFBVTtJQUNwQixRQUFRLEVBQUUsVUFBVTtJQUNwQixVQUFVLEVBQUUsWUFBWTtJQUN4QixPQUFPLEVBQUUsd0JBQXdCO0lBQ2pDLE1BQU0sRUFBRSxRQUFRO0NBQ3VDLENBQUE7QUFFekQsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHO0lBQ3pCLE1BQU0sRUFBRSxRQUFRO0NBQ1IsQ0FBQTtBQUVWLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRztJQUN0QixnQkFBZ0IsRUFBRSxrQkFBa0I7SUFDcEMsYUFBYSxFQUFFLGVBQWU7SUFDOUIsYUFBYSxFQUFFLGVBQWU7SUFDOUIsV0FBVyxFQUFFLFlBQVk7SUFDekIsbUJBQW1CLEVBQUUscUJBQXFCO0lBQzFDLGVBQWUsRUFBRSxpQkFBaUI7SUFDbEMsSUFBSSxFQUFFLHVDQUF1QztJQUM3QyxlQUFlLEVBQUUsaUJBQWlCO0NBQzFCLENBQUE7QUFFVixNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUc7SUFDeEIsVUFBVSxFQUFFLFlBQVk7SUFDeEIsT0FBTyxFQUFFLFNBQVM7SUFDbEIsV0FBVyxFQUFFLGFBQWE7SUFDMUIsUUFBUSxFQUFFLFVBQVU7Q0FDK0IsQ0FBQTtBQUVyRCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUc7SUFDeEIsT0FBTyxFQUFFLHdCQUF3QjtJQUNqQyxXQUFXLEVBQUUsYUFBYTtJQUMxQixZQUFZLEVBQUUsY0FBYztDQUNwQixDQUFBIn0=\",\"filename\":\"scripts/corporations/constants.js\",\"server\":\"foodnstuff\"}}],[\"scripts/corporations/cycle-manager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { waitForCycle } from 'scripts/corporations/utils';\\nexport class CycleManager {\\n    ns;\\n    recurrentFunctions;\\n    constructor(ns) {\\n        this.ns = ns;\\n        this.recurrentFunctions = [];\\n    }\\n    registerRecurrentFunction(fn) {\\n        this.recurrentFunctions.push(fn);\\n    }\\n    unregisterRecurrentFunction(fn) {\\n        this.recurrentFunctions = this.recurrentFunctions.filter((rf) => rf !== fn);\\n    }\\n    async waitForCycle() {\\n        await waitForCycle(this.ns);\\n        this.recurrentFunctions.forEach((fn) => fn());\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3ljbGUtbWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvcnBvcmF0aW9ucy9jeWNsZS1tYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQTtBQUV6RCxNQUFNLE9BQU8sWUFBWTtJQUN2QixFQUFFLENBQUk7SUFDTixrQkFBa0IsQ0FBZTtJQUVqQyxZQUFZLEVBQU07UUFDaEIsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUE7UUFDWixJQUFJLENBQUMsa0JBQWtCLEdBQUcsRUFBRSxDQUFBO0lBQzlCLENBQUM7SUFFRCx5QkFBeUIsQ0FBQyxFQUFhO1FBQ3JDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDbEMsQ0FBQztJQUVELDJCQUEyQixDQUFDLEVBQWE7UUFDdkMsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQTtJQUM3RSxDQUFDO0lBRUQsS0FBSyxDQUFDLFlBQVk7UUFDaEIsTUFBTSxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBQzNCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDL0MsQ0FBQztDQUNGIn0=\",\"filename\":\"scripts/corporations/cycle-manager.js\",\"server\":\"foodnstuff\"}}],[\"scripts/corporations/fraud.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { MATERIALS } from 'scripts/corporations/constants';\\nconst getCurState = (ns) => ns.corporation.getCorporation().state;\\nexport const waitForCycle = async (ns) => {\\n    const curState = getCurState(ns);\\n    while (curState === getCurState(ns)) {\\n        await ns.sleep(100);\\n    }\\n    while (curState !== getCurState(ns)) {\\n        await ns.sleep(100);\\n    }\\n};\\nexport const commitFraud = async (ns) => {\\n    for (const divisionName of ns.corporation.getCorporation().divisions) {\\n        const division = ns.corporation.getDivision(divisionName);\\n        for (const cityName of division.cities) {\\n            const warehouse = ns.corporation.getWarehouse(divisionName, cityName);\\n            const freeSpace = warehouse.size - warehouse.sizeUsed;\\n            const realEstateObj = ns.corporation.getMaterialData(MATERIALS.REAL_ESTATE);\\n            const buyAmt = freeSpace / realEstateObj.size;\\n            ns.corporation.buyMaterial(divisionName, cityName, realEstateObj.name, buyAmt / 10);\\n            ns.print(`Set ${realEstateObj.name} buy amount in ${cityName} to ${buyAmt}`);\\n        }\\n    }\\n    ns.print('Waiting for cycle');\\n    await waitForCycle(ns);\\n    for (const divisionName of ns.corporation.getCorporation().divisions) {\\n        const division = ns.corporation.getDivision(divisionName);\\n        for (const cityName of division.cities) {\\n            ns.corporation.buyMaterial(divisionName, cityName, MATERIALS.REAL_ESTATE, 0);\\n            ns.print(`Set ${MATERIALS.REAL_ESTATE} buy amount in ${cityName} to 0`);\\n        }\\n    }\\n};\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    await commitFraud(ns);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJhdWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9jb3Jwb3JhdGlvbnMvZnJhdWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdDQUFnQyxDQUFBO0FBRTFELE1BQU0sV0FBVyxHQUFHLENBQUMsRUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLGNBQWMsRUFBRSxDQUFDLEtBQUssQ0FBQTtBQUVyRSxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsS0FBSyxFQUFFLEVBQU0sRUFBRSxFQUFFO0lBQzNDLE1BQU0sUUFBUSxHQUFHLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUVoQyxPQUFPLFFBQVEsS0FBSyxXQUFXLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFDbkMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0tBQ3BCO0lBRUQsT0FBTyxRQUFRLEtBQUssV0FBVyxDQUFDLEVBQUUsQ0FBQyxFQUFFO1FBQ25DLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtLQUNwQjtBQUNILENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxLQUFLLEVBQUUsRUFBTSxFQUFFLEVBQUU7SUFDMUMsS0FBSyxNQUFNLFlBQVksSUFBSSxFQUFFLENBQUMsV0FBVyxDQUFDLGNBQWMsRUFBRSxDQUFDLFNBQVMsRUFBRTtRQUNwRSxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQTtRQUN6RCxLQUFLLE1BQU0sUUFBUSxJQUFJLFFBQVEsQ0FBQyxNQUFNLEVBQUU7WUFDdEMsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQyxDQUFBO1lBQ3JFLE1BQU0sU0FBUyxHQUFHLFNBQVMsQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQTtZQUNyRCxNQUFNLGFBQWEsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FDbEQsU0FBUyxDQUFDLFdBQVcsQ0FDdEIsQ0FBQTtZQUNELE1BQU0sTUFBTSxHQUFHLFNBQVMsR0FBRyxhQUFhLENBQUMsSUFBSSxDQUFBO1lBRTdDLEVBQUUsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUN4QixZQUFZLEVBQ1osUUFBUSxFQUNSLGFBQWEsQ0FBQyxJQUFJLEVBQ2xCLE1BQU0sR0FBRyxFQUFFLENBQ1osQ0FBQTtZQUVELEVBQUUsQ0FBQyxLQUFLLENBQ04sT0FBTyxhQUFhLENBQUMsSUFBSSxrQkFBa0IsUUFBUSxPQUFPLE1BQU0sRUFBRSxDQUNuRSxDQUFBO1NBQ0Y7S0FDRjtJQUVELEVBQUUsQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQTtJQUM3QixNQUFNLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUV0QixLQUFLLE1BQU0sWUFBWSxJQUFJLEVBQUUsQ0FBQyxXQUFXLENBQUMsY0FBYyxFQUFFLENBQUMsU0FBUyxFQUFFO1FBQ3BFLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFBO1FBQ3pELEtBQUssTUFBTSxRQUFRLElBQUksUUFBUSxDQUFDLE1BQU0sRUFBRTtZQUN0QyxFQUFFLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FDeEIsWUFBWSxFQUNaLFFBQVEsRUFDUixTQUFTLENBQUMsV0FBVyxFQUNyQixDQUFDLENBQ0YsQ0FBQTtZQUNELEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxTQUFTLENBQUMsV0FBVyxrQkFBa0IsUUFBUSxPQUFPLENBQUMsQ0FBQTtTQUN4RTtLQUNGO0FBQ0gsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ3BCLE1BQU0sV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0FBQ3ZCLENBQUMifQ==\",\"filename\":\"scripts/corporations/fraud.js\",\"server\":\"foodnstuff\"}}],[\"scripts/corporations/main.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Round1 from 'scripts/corporations/round-1';\\nimport * as Round2 from 'scripts/corporations/round-2';\\nimport * as Round3 from 'scripts/corporations/round-3';\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    const roundsToDo = ns.args;\\n    for (const round of roundsToDo) {\\n        switch (round) {\\n            case 1:\\n                await Round1.doit(ns);\\n                break;\\n            case 2:\\n                await Round2.doit(ns);\\n                break;\\n            case 3:\\n                await Round3.doit(ns);\\n                break;\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvcnBvcmF0aW9ucy9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sS0FBSyxNQUFNLE1BQU0sOEJBQThCLENBQUE7QUFDdEQsT0FBTyxLQUFLLE1BQU0sTUFBTSw4QkFBOEIsQ0FBQTtBQUN0RCxPQUFPLEtBQUssTUFBTSxNQUFNLDhCQUE4QixDQUFBO0FBRXRELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUVwQixNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFBO0lBRTFCLEtBQUssTUFBTSxLQUFLLElBQUksVUFBVSxFQUFFO1FBQzlCLFFBQVEsS0FBSyxFQUFFO1lBQ2IsS0FBSyxDQUFDO2dCQUNKLE1BQU0sTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtnQkFDckIsTUFBSztZQUVQLEtBQUssQ0FBQztnQkFDSixNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7Z0JBQ3JCLE1BQUs7WUFFUCxLQUFLLENBQUM7Z0JBQ0osTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO2dCQUNyQixNQUFLO1NBQ1I7S0FDRjtBQUNILENBQUMifQ==\",\"filename\":\"scripts/corporations/main.js\",\"server\":\"foodnstuff\"}}],[\"scripts/corporations/round-1.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\n * Implements corporation management strategy for 1st investment round.\\n * Expects corporation in initial state.\\n * As of 2.3.1, this should get an offer between 16t and 18t.\\n */\\nimport { CITY_NAMES, EMPLOYEE_POSITIONS, INDUSTRIES, MATERIALS, UPGRADES, } from 'scripts/corporations/constants';\\nimport { expandToAllCities, expandWarehouse, findInvestors, hireEmployees, maximizeMoraleAndEnergy, upgradeToLevel, waitForCycle, } from 'scripts/corporations/utils';\\nconst DIVISION_NAME = 'Nepfoods';\\nconst INDUSTRY = 'Restaurant';\\nconst WAREHOUSE_CAP = 200;\\nconst N_EMPLOYEES = 6;\\nconst WILSON_ANALYTICS_UPGRADES = 1;\\nconst ABC_SALESBOTS_UPGRADES = 2;\\nconst N_ADVERT_HIRES = 27;\\nexport const doit = async (ns) => {\\n    ns.print('Creating new Restaurant division');\\n    ns.corporation.expandIndustry(INDUSTRY, DIVISION_NAME);\\n    ns.print('Expanding to all cities');\\n    expandToAllCities(ns, DIVISION_NAME);\\n    ns.print('Expanding warehouses');\\n    for (const cityName of CITY_NAMES) {\\n        expandWarehouse(ns, DIVISION_NAME, cityName, WAREHOUSE_CAP);\\n    }\\n    ns.print('Hiring employees');\\n    for (const cityName of CITY_NAMES) {\\n        hireEmployees(ns, DIVISION_NAME, cityName, N_EMPLOYEES);\\n        ns.corporation.setAutoJobAssignment(DIVISION_NAME, cityName, EMPLOYEE_POSITIONS.BUSINESS, N_EMPLOYEES);\\n    }\\n    ns.print('Buying upgrades');\\n    upgradeToLevel(ns, UPGRADES.WILSON_ANALYTICS, WILSON_ANALYTICS_UPGRADES);\\n    upgradeToLevel(ns, UPGRADES.ABC_SALESBOTS, ABC_SALESBOTS_UPGRADES);\\n    ns.print('Hiring AdVert');\\n    for (let i = 0; i < N_ADVERT_HIRES; i++) {\\n        ns.corporation.hireAdVert(DIVISION_NAME);\\n    }\\n    ns.print('Maximizing employee morale and energy');\\n    await maximizeMoraleAndEnergy(ns, [INDUSTRIES.RESTAURANT]);\\n    ns.print('Filling warehouses with Real Estate');\\n    for (const cityName of CITY_NAMES) {\\n        const warehouse = ns.corporation.getWarehouse(DIVISION_NAME, cityName);\\n        const freeSpace = warehouse.size - warehouse.sizeUsed;\\n        const realEstateObj = ns.corporation.getMaterialData(MATERIALS.REAL_ESTATE);\\n        const buyAmt = freeSpace / realEstateObj.size;\\n        ns.corporation.buyMaterial(DIVISION_NAME, cityName, realEstateObj.name, buyAmt / 10);\\n    }\\n    await waitForCycle(ns);\\n    for (const cityName of CITY_NAMES) {\\n        ns.corporation.buyMaterial(DIVISION_NAME, cityName, MATERIALS.REAL_ESTATE, 0);\\n    }\\n    ns.print('Starting fraud');\\n    for (const cityName of CITY_NAMES) {\\n        ns.corporation.sellMaterial(DIVISION_NAME, cityName, MATERIALS.REAL_ESTATE, 'MAX', 'MP');\\n    }\\n    return await findInvestors(ns);\\n};\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91bmQtMS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvcnBvcmF0aW9ucy9yb3VuZC0xLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7QUFJSCxPQUFPLEVBQ0wsVUFBVSxFQUNWLGtCQUFrQixFQUNsQixVQUFVLEVBQ1YsU0FBUyxFQUNULFFBQVEsR0FDVCxNQUFNLGdDQUFnQyxDQUFBO0FBQ3ZDLE9BQU8sRUFDTCxpQkFBaUIsRUFDakIsZUFBZSxFQUNmLGFBQWEsRUFDYixhQUFhLEVBQ2IsdUJBQXVCLEVBQ3ZCLGNBQWMsRUFDZCxZQUFZLEdBQ2IsTUFBTSw0QkFBNEIsQ0FBQTtBQUVuQyxNQUFNLGFBQWEsR0FBRyxVQUFVLENBQUE7QUFDaEMsTUFBTSxRQUFRLEdBQXFCLFlBQVksQ0FBQTtBQUMvQyxNQUFNLGFBQWEsR0FBRyxHQUFHLENBQUE7QUFDekIsTUFBTSxXQUFXLEdBQUcsQ0FBQyxDQUFBO0FBQ3JCLE1BQU0seUJBQXlCLEdBQUcsQ0FBQyxDQUFBO0FBQ25DLE1BQU0sc0JBQXNCLEdBQUcsQ0FBQyxDQUFBO0FBQ2hDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQTtBQUV6QixNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUcsS0FBSyxFQUFFLEVBQU0sRUFBRSxFQUFFO0lBQ25DLEVBQUUsQ0FBQyxLQUFLLENBQUMsa0NBQWtDLENBQUMsQ0FBQTtJQUM1QyxFQUFFLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQUE7SUFFdEQsRUFBRSxDQUFDLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFBO0lBQ25DLGlCQUFpQixDQUFDLEVBQUUsRUFBRSxhQUFhLENBQUMsQ0FBQTtJQUVwQyxFQUFFLENBQUMsS0FBSyxDQUFDLHNCQUFzQixDQUFDLENBQUE7SUFDaEMsS0FBSyxNQUFNLFFBQVEsSUFBSSxVQUFVLEVBQUU7UUFDakMsZUFBZSxDQUFD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\",\"filename\":\"scripts/corporations/round-1.js\",\"server\":\"foodnstuff\"}}],[\"scripts/corporations/round-2.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\n * Implements corporation management strategy for 2nd investment round.\\n * Expects corporation to have no divisions.\\n * As of 2.3.1, this should get about 20q funds in investment, assuming\\n * round 1 got at least 16t.\\n */\\nimport { EMPLOYEE_POSITIONS, INDUSTRIES, MATERIALS, UPGRADES, } from 'scripts/corporations/constants';\\nimport { expandToAllCities, expandWarehouse, findInvestors, getDivisions, getDivisionsAndCities, hireEmployees, maximizeMoraleAndEnergy, upgradeToLevel, waitForCycle, } from 'scripts/corporations/utils';\\nconst N_DIVISIONS = 20;\\nconst DIVISON_NAME = 'Nepfoods';\\nconst WAREHOUSE_CAP = 1200;\\nconst SMART_STORAGE_LVL = 20;\\nconst WILSON_ANALYTICS_LVL = 10;\\nconst N_EMPLOYEES = 12;\\nconst getRestaurantDivisions = (ns) => getDivisions(ns, [INDUSTRIES.RESTAURANT]);\\nconst getRestaurantCities = (ns) => getDivisionsAndCities(ns, [INDUSTRIES.RESTAURANT]);\\nexport const doit = async (ns) => {\\n    while (ns.corporation.getCorporation().divisions.length > 0) {\\n        ns.print('Please sell all existing divisions');\\n        await ns.sleep(2000);\\n    }\\n    ns.print('Creating Restaurant divisions');\\n    const curRestaurantCnt = getRestaurantDivisions(ns).length;\\n    for (let i = curRestaurantCnt; i < N_DIVISIONS; i++) {\\n        ns.corporation.expandIndustry(INDUSTRIES.RESTAURANT, `${DIVISON_NAME} ${i + 1}`);\\n    }\\n    ns.print('Expanding to all cities');\\n    for (const divisionName of getRestaurantDivisions(ns)) {\\n        expandToAllCities(ns, divisionName);\\n    }\\n    ns.print('Buying upgrades');\\n    upgradeToLevel(ns, UPGRADES.SMART_STORAGE, SMART_STORAGE_LVL);\\n    upgradeToLevel(ns, UPGRADES.WILSON_ANALYTICS, WILSON_ANALYTICS_LVL);\\n    ns.print('Expanding warehouses');\\n    for (const [divisionName, cityName] of getRestaurantCities(ns)) {\\n        expandWarehouse(ns, divisionName, cityName, WAREHOUSE_CAP);\\n    }\\n    ns.print('Hiring employees');\\n    for (const [divisionName, cityName] of getRestaurantCities(ns)) {\\n        hireEmployees(ns, divisionName, cityName, N_EMPLOYEES);\\n        ns.corporation.setAutoJobAssignment(divisionName, cityName, EMPLOYEE_POSITIONS.BUSINESS, N_EMPLOYEES);\\n    }\\n    ns.print('Maximizing employee morale and energy');\\n    await maximizeMoraleAndEnergy(ns, [INDUSTRIES.RESTAURANT]);\\n    ns.print('Hiring AdVert');\\n    let advertCnt = 0;\\n    for (;; advertCnt++) {\\n        const divisionsToHire = getRestaurantDivisions(ns).filter((div) => ns.corporation.getHireAdVertCount(div) <= advertCnt);\\n        const cost = divisionsToHire.reduce((acc, div) => acc + ns.corporation.getHireAdVertCost(div), 0);\\n        if (cost > ns.corporation.getCorporation().funds) {\\n            break;\\n        }\\n        for (const divisionName of divisionsToHire) {\\n            ns.corporation.hireAdVert(divisionName);\\n        }\\n    }\\n    ns.print(`Hired AdVert ${advertCnt} times`);\\n    ns.print('Upgrading FocusWires');\\n    let focusWiresCnt = 0;\\n    while (ns.corporation.getUpgradeLevelCost(UPGRADES.FOCUS_WIRES) <\\n        ns.corporation.getCorporation().funds) {\\n        ns.corporation.levelUpgrade(UPGRADES.FOCUS_WIRES);\\n        focusWiresCnt += 1;\\n    }\\n    ns.print(`Upgraded FocusWires ${focusWiresCnt} times`);\\n    ns.print(`${ns.formatNumber(ns.corporation.getCorporation().funds)} leftover funds before fraud`);\\n    ns.print('Filling warehouses with Real Estate');\\n    for (const [divisionName, cityName] of getRestaurantCities(ns)) {\\n        const warehouse = ns.corporation.getWarehouse(divisionName, cityName);\\n        const freeSpace = warehouse.size - warehouse.sizeUsed;\\n        const buyAmt = freeSpace / ns.corporation.getMaterialData(MATERIALS.REAL_ESTATE).size;\\n        ns.corporation.buyMaterial(divisionName, cityName, MATERIALS.REAL_ESTATE, buyAmt / 10);\\n    }\\n    await waitForCycle(ns);\\n    for (const [divisionName, cityName] of getRestaurantCities(ns)) {\\n        ns.corporation.buyMaterial(divisionName, cityName, MATERIALS.REAL_ESTATE, 0);\\n    }\\n    ns.print(`Starting fraud (leftover funds: ${ns.formatNumber(ns.corporation.getCorporation().funds)})`);\\n    for (const [divisionName, cityName] of getRestaurantCities(ns)) {\\n        ns.corporation.sellMaterial(divisionName, cityName, MATERIALS.REAL_ESTATE, 'MAX', 'MP');\\n    }\\n    return await findInvestors(ns);\\n};\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91bmQtMi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvcnBvcmF0aW9ucy9yb3VuZC0yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7OztHQUtHO0FBSUgsT0FBTyxFQUNMLGtCQUFrQixFQUNsQixVQUFVLEVBQ1YsU0FBUyxFQUNULFFBQVEsR0FDVCxNQUFNLGdDQUFnQyxDQUFBO0FBQ3ZDLE9BQU8sRUFDTCxpQkFBaUIsRUFDakIsZUFBZSxFQUNmLGFBQWEsRUFDYixZQUFZLEVBQ1oscUJBQXFCLEVBQ3JCLGFBQWEsRUFDYix1QkFBdUIsRUFDdkIsY0FBYyxFQUNkLFlBQVksR0FDYixNQUFNLDRCQUE0QixDQUFBO0FBRW5DLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQTtBQUN0QixNQUFNLFlBQVksR0FBRyxVQUFVLENBQUE7QUFDL0IsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFBO0FBQzFCLE1BQU0saUJBQWlCLEdBQUcsRUFBRSxDQUFBO0FBQzVCLE1BQU0sb0JBQW9CLEdBQUcsRUFBRSxDQUFBO0FBQy9CLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQTtBQUV0QixNQUFNLHNCQUFzQixHQUFHLENBQUMsRUFBTSxFQUFFLEVBQUUsQ0FDeEMsWUFBWSxDQUFDLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFBO0FBRTNDLE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxFQUFNLEVBQUUsRUFBRSxDQUNyQyxxQkFBcUIsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQTtBQUVwRCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUcsS0FBSyxFQUFFLEVBQU0sRUFBRSxFQUFFO0lBQ25DLE9BQU8sRUFBRSxDQUFDLFdBQVcsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUMzRCxFQUFFLENBQUMs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\",\"filename\":\"scripts/corporations/round-2.js\",\"server\":\"foodnstuff\"}}],[\"scripts/corporations/round-3.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CITIES, CITY_NAMES, EMPLOYEE_POSITIONS, INDUSTRIES, MATERIALS, RESEARCHES, UNLOCKABLES, UPGRADES, } from 'scripts/corporations/constants';\\nimport { buyTeaAndThrowParties, expandToAllCities, expandWarehouse, getDivisionsAndCities, hireEmployees, maximizeMoraleAndEnergy, upgradeToLevel, } from 'scripts/corporations/utils';\\nimport { CycleManager } from 'scripts/corporations/cycle-manager';\\nconst TOBACCO_DIV_NAME = 'Nepsmokes';\\nconst AGRICULTURE_DIV_NAME = 'Nepplants';\\nconst CHEM_DIV_NAME = 'Nepchem';\\nconst N_EMPLOYEES = 204;\\nconst WAREHOUSE_CAP = 24000;\\nconst WILSON_ANALYTICS_LVL = 20;\\nconst FOCUS_WIRES_LVL = 60;\\nconst NEURAL_ACCELERATORS_LVL = 60;\\nconst PROJECT_INSIGHT_LVL = 20;\\nconst NNII_LVL = 60;\\nconst SMART_FACTORIES_LVL = 60;\\nconst SMART_STORAGE_LVL = 50;\\nconst AGRICULTURE_REAL_ESTATE = 3e6;\\nconst CHEM_REAL_ESTATE = 1e6;\\nconst CHEM_ROBOTS = 30e3;\\nconst TOBACCO_REAL_ESTATE = 1e6;\\nconst TOBACCO_ROBOTS = 30e3;\\nconst PLANT_PRODUCTION = 3800;\\nconst HI_TECH_RESEARCH = 5000;\\nconst MARKET_TA_II_RESEARCH = 70000;\\nconst PRODUCT_NAME = 'Neparette';\\nconst PRODUCT_INVESTMENT = 10e9;\\nconst LOOP_INDUSTRIES = [\\n    { industry: INDUSTRIES.AGRICULTURE, divisionName: AGRICULTURE_DIV_NAME },\\n    { industry: INDUSTRIES.CHEMICAL, divisionName: CHEM_DIV_NAME },\\n];\\nconst ALL_INDUSTRIES = [\\n    ...LOOP_INDUSTRIES,\\n    { industry: INDUSTRIES.TOBACCO, divisionName: TOBACCO_DIV_NAME },\\n];\\nconst ALL_INDUSTRY_NAMES = ALL_INDUSTRIES.map((industry) => industry.industry);\\nconst LOOP_INDUSTRY_NAMES = LOOP_INDUSTRIES.map((industry) => industry.industry);\\nconst getProductName = (version) => `${PRODUCT_NAME} ${version}`;\\nconst createProductManager = (ns) => {\\n    let curVersion = 0;\\n    const inDevelopment = new Set();\\n    const develop = (version) => {\\n        const name = getProductName(version);\\n        ns.print(`Starting development of ${name}`);\\n        ns.corporation.makeProduct(TOBACCO_DIV_NAME, CITIES.SECTOR_12, name, PRODUCT_INVESTMENT, PRODUCT_INVESTMENT);\\n        inDevelopment.add(name);\\n    };\\n    for (let i = 0; i < 3; i++) {\\n        develop(curVersion++);\\n    }\\n    return () => {\\n        for (const name of inDevelopment) {\\n            const product = ns.corporation.getProduct(TOBACCO_DIV_NAME, CITIES.SECTOR_12, name);\\n            if (product.developmentProgress === 100) {\\n                inDevelopment.delete(name);\\n                ns.print(`Finished developing ${name}`);\\n                ns.print(`Activating Market-TA.II for ${name}`);\\n                ns.corporation.setProductMarketTA2(TOBACCO_DIV_NAME, name, true);\\n                if (inDevelopment.size === 0) {\\n                    const discontinued = getProductName(curVersion - 3);\\n                    ns.print(`Discontinuing ${discontinued}`);\\n                    ns.corporation.discontinueProduct(TOBACCO_DIV_NAME, discontinued);\\n                    develop(curVersion++);\\n                }\\n            }\\n        }\\n    };\\n};\\nexport const doit = async (ns) => {\\n    const cycleManager = new CycleManager(ns);\\n    while (ns.corporation.getCorporation().divisions.length > 0) {\\n        ns.print('Please sell all existing divisions');\\n        await ns.sleep(2000);\\n    }\\n    ns.print('Creating Tobacco, Agriculture and Chemical divisions');\\n    for (const { industry, divisionName } of ALL_INDUSTRIES) {\\n        ns.corporation.expandIndustry(industry, divisionName);\\n    }\\n    ns.print('Expanding divisions to all cities');\\n    for (const { divisionName } of ALL_INDUSTRIES) {\\n        expandToAllCities(ns, divisionName);\\n    }\\n    ns.print('Hiring employees');\\n    for (const [divisionName, cityName] of getDivisionsAndCities(ns, ALL_INDUSTRY_NAMES)) {\\n        hireEmployees(ns, divisionName, cityName, N_EMPLOYEES);\\n    }\\n    ns.print('Assigning all Tobacco employees to R&D');\\n    for (const cityName of CITY_NAMES) {\\n        ns.corporation.setAutoJobAssignment(TOBACCO_DIV_NAME, cityName, EMPLOYEE_POSITIONS.R_AND_D, N_EMPLOYEES);\\n    }\\n    ns.print('Assigning Agriculture and Chemical employees to Operations, Engineer, Management and R&D');\\n    const loopPositions = [\\n        EMPLOYEE_POSITIONS.OPERATIONS,\\n        EMPLOYEE_POSITIONS.ENGINEER,\\n        EMPLOYEE_POSITIONS.MANAGEMENT,\\n        EMPLOYEE_POSITIONS.R_AND_D,\\n    ];\\n    for (const [divisionName, cityName] of getDivisionsAndCities(ns, LOOP_INDUSTRY_NAMES)) {\\n        for (const position of loopPositions) {\\n            ns.corporation.setAutoJobAssignment(divisionName, cityName, position, Math.round(N_EMPLOYEES / 4));\\n        }\\n    }\\n    ns.print('Buying export unlockable');\\n    // For some reason the script is able to set export without this unlockable.\\n    // Must be a bug (v2.3.1).\\n    ns.corporation.purchaseUnlock(UNLOCKABLES.EXPORT);\\n    ns.print('Leveling upgrades');\\n    upgradeToLevel(ns, UPGRADES.WILSON_ANALYTICS, WILSON_ANALYTICS_LVL);\\n    upgradeToLevel(ns, UPGRADES.FOCUS_WIRES, FOCUS_WIRES_LVL);\\n    upgradeToLevel(ns, UPGRADES.NEURAL_ACCELERATORS, NEURAL_ACCELERATORS_LVL);\\n    upgradeToLevel(ns, UPGRADES.PROJECT_INSIGHT, PROJECT_INSIGHT_LVL);\\n    upgradeToLevel(ns, UPGRADES.NNII, NNII_LVL);\\n    upgradeToLevel(ns, UPGRADES.SMART_FACTORIES, SMART_FACTORIES_LVL);\\n    upgradeToLevel(ns, UPGRADES.SMART_STORAGE, SMART_STORAGE_LVL);\\n    ns.print('Maximizing employee morale and energy');\\n    await maximizeMoraleAndEnergy(ns, ALL_INDUSTRY_NAMES);\\n    cycleManager.registerRecurrentFunction(() => buyTeaAndThrowParties(ns, ALL_INDUSTRY_NAMES));\\n    ns.print('Expanding warehouses');\\n    for (const [divisionName, cityName] of getDivisionsAndCities(ns, ALL_INDUSTRY_NAMES)) {\\n        expandWarehouse(ns, divisionName, cityName, WAREHOUSE_CAP);\\n    }\\n    ns.print('Setting up loop exports');\\n    for (const cityName of CITY_NAMES) {\\n        // Buy initial chemicals to start agriculture for 2 cycles\\n        ns.corporation.buyMaterial(AGRICULTURE_DIV_NAME, cityName, MATERIALS.CHEMICALS, (2 * PLANT_PRODUCTION) / 5);\\n        // Production boosting materials\\n        ns.corporation.buyMaterial(TOBACCO_DIV_NAME, cityName, MATERIALS.REAL_ESTATE, TOBACCO_REAL_ESTATE / 10);\\n        ns.corporation.buyMaterial(TOBACCO_DIV_NAME, cityName, MATERIALS.ROBOTS, TOBACCO_ROBOTS / 10);\\n        ns.corporation.buyMaterial(AGRICULTURE_DIV_NAME, cityName, MATERIALS.REAL_ESTATE, AGRICULTURE_REAL_ESTATE / 10);\\n        ns.corporation.buyMaterial(CHEM_DIV_NAME, cityName, MATERIALS.REAL_ESTATE, CHEM_REAL_ESTATE / 10);\\n        ns.corporation.buyMaterial(CHEM_DIV_NAME, cityName, MATERIALS.ROBOTS, CHEM_ROBOTS / 10);\\n    }\\n    await cycleManager.waitForCycle();\\n    for (const cityName of CITY_NAMES) {\\n        ns.corporation.buyMaterial(AGRICULTURE_DIV_NAME, cityName, MATERIALS.CHEMICALS, 0);\\n        ns.corporation.buyMaterial(TOBACCO_DIV_NAME, cityName, MATERIALS.REAL_ESTATE, 0);\\n        ns.corporation.buyMaterial(TOBACCO_DIV_NAME, cityName, MATERIALS.ROBOTS, 0);\\n        ns.corporation.buyMaterial(AGRICULTURE_DIV_NAME, cityName, MATERIALS.REAL_ESTATE, 0);\\n        ns.corporation.buyMaterial(CHEM_DIV_NAME, cityName, MATERIALS.REAL_ESTATE, 0);\\n        ns.corporation.buyMaterial(CHEM_DIV_NAME, cityName, MATERIALS.ROBOTS, 0);\\n    }\\n    for (const cityName of CITY_NAMES) {\\n        ns.corporation.buyMaterial(AGRICULTURE_DIV_NAME, cityName, MATERIALS.WATER, PLANT_PRODUCTION / 2);\\n        ns.corporation.buyMaterial(CHEM_DIV_NAME, cityName, MATERIALS.WATER, PLANT_PRODUCTION / 10);\\n        // Setup exports\\n        ns.corporation.exportMaterial(AGRICULTURE_DIV_NAME, cityName, CHEM_DIV_NAME, cityName, MATERIALS.PLANTS, PLANT_PRODUCTION / 5);\\n        ns.corporation.exportMaterial(CHEM_DIV_NAME, cityName, AGRICULTURE_DIV_NAME, cityName, MATERIALS.CHEMICALS, PLANT_PRODUCTION / 5);\\n        // Sell leftovers\\n        ns.corporation.sellMaterial(AGRICULTURE_DIV_NAME, cityName, MATERIALS.FOOD, 'MAX', '0');\\n        ns.corporation.sellMaterial(AGRICULTURE_DIV_NAME, cityName, MATERIALS.PLANTS, 'MAX', '0');\\n    }\\n    await cycleManager.waitForCycle();\\n    ns.print('Waiting for Hi-Tech research in Tobacco');\\n    while (true) {\\n        if (ns.corporation.getDivision(TOBACCO_DIV_NAME).researchPoints >\\n            HI_TECH_RESEARCH) {\\n            ns.corporation.research(TOBACCO_DIV_NAME, RESEARCHES.HI_TECH);\\n            ns.print('Purchased Hi-Tech research in Tobacco');\\n            break;\\n        }\\n        await cycleManager.waitForCycle();\\n    }\\n    ns.print('Waiting for Hi-Tech research in loop divisions');\\n    while (true) {\\n        if (ns.corporation.getDivision(AGRICULTURE_DIV_NAME).researchPoints >\\n            HI_TECH_RESEARCH &&\\n            ns.corporation.getDivision(CHEM_DIV_NAME).researchPoints >\\n                HI_TECH_RESEARCH) {\\n            ns.corporation.research(AGRICULTURE_DIV_NAME, RESEARCHES.HI_TECH);\\n            ns.corporation.research(CHEM_DIV_NAME, RESEARCHES.HI_TECH);\\n            ns.print('Purchased Hi-Tech research in loop divisions');\\n            break;\\n        }\\n        await cycleManager.waitForCycle();\\n    }\\n    ns.print('Waiting for Market-TA.II in Tobacco');\\n    while (true) {\\n        if (ns.corporation.getDivision(TOBACCO_DIV_NAME).researchPoints >\\n            MARKET_TA_II_RESEARCH) {\\n            ns.corporation.research(TOBACCO_DIV_NAME, RESEARCHES.MARKET_TA_I);\\n            ns.corporation.research(TOBACCO_DIV_NAME, RESEARCHES.MARKET_TA_II);\\n            ns.print('Purchased Market-TA.II in Tobacco');\\n            break;\\n        }\\n        await cycleManager.waitForCycle();\\n    }\\n    ns.print('Reassigning Tobacco employees');\\n    for (const cityName of CITY_NAMES) {\\n        for (const position of Object.values(EMPLOYEE_POSITIONS)) {\\n            if (position !== 'Unassigned') {\\n                ns.corporation.setAutoJobAssignment(TOBACCO_DIV_NAME, cityName, position, 0);\\n            }\\n        }\\n        await cycleManager.waitForCycle();\\n        if (cityName === CITIES.SECTOR_12) {\\n            const thirdEmployees = Math.round(N_EMPLOYEES / 3);\\n            ns.corporation.setAutoJobAssignment(TOBACCO_DIV_NAME, cityName, EMPLOYEE_POSITIONS.OPERATIONS, thirdEmployees);\\n            ns.corporation.setAutoJobAssignment(TOBACCO_DIV_NAME, cityName, EMPLOYEE_POSITIONS.ENGINEER, thirdEmployees);\\n            ns.corporation.setAutoJobAssignment(TOBACCO_DIV_NAME, cityName, EMPLOYEE_POSITIONS.MANAGEMENT, thirdEmployees);\\n        }\\n        else {\\n            const fourthEmployees = Math.round(N_EMPLOYEES / 4);\\n            ns.corporation.setAutoJobAssignment(TOBACCO_DIV_NAME, cityName, EMPLOYEE_POSITIONS.OPERATIONS, fourthEmployees);\\n            ns.corporation.setAutoJobAssignment(TOBACCO_DIV_NAME, cityName, EMPLOYEE_POSITIONS.ENGINEER, fourthEmployees);\\n            ns.corporation.setAutoJobAssignment(TOBACCO_DIV_NAME, cityName, EMPLOYEE_POSITIONS.MANAGEMENT, fourthEmployees);\\n            ns.corporation.setAutoJobAssignment(TOBACCO_DIV_NAME, cityName, EMPLOYEE_POSITIONS.R_AND_D, fourthEmployees);\\n        }\\n    }\\n    cycleManager.registerRecurrentFunction(createProductManager(ns));\\n    ns.print('Waiting for first product to be completed');\\n    while (ns.corporation.getProduct(TOBACCO_DIV_NAME, CITIES.SECTOR_12, getProductName(0)).developmentProgress < 100) {\\n        await cycleManager.waitForCycle();\\n    }\\n    ns.print('Hiring maximum amount of AdVert in Tobacco');\\n    while (ns.corporation.getCorporation().funds >=\\n        ns.corporation.getHireAdVertCost(TOBACCO_DIV_NAME)) {\\n        ns.corporation.hireAdVert(TOBACCO_DIV_NAME);\\n    }\\n    ns.print('Redirecting all leftover plants to Tobacco');\\n    for (const cityName of CITY_NAMES) {\\n        ns.corporation.exportMaterial(AGRICULTURE_DIV_NAME, cityName, TOBACCO_DIV_NAME, cityName, MATERIALS.PLANTS, `EPROD - ${(PLANT_PRODUCTION / 5).toFixed(6)}`);\\n    }\\n    ns.print('Entering tea party mode');\\n    while (true) {\\n        await cycleManager.waitForCycle();\\n    }\\n};\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91bmQtMy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2NvcnBvcmF0aW9ucy9yb3VuZC0zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFDTCxNQUFNLEVBQ04sVUFBVSxFQUNWLGtCQUFrQixFQUNsQixVQUFVLEVBQ1YsU0FBUyxFQUNULFVBQVUsRUFDVixXQUFXLEVBQ1gsUUFBUSxHQUNULE1BQU0sZ0NBQWdDLENBQUE7QUFDdkMsT0FBTyxFQUNMLHFCQUFxQixFQUNyQixpQkFBaUIsRUFDakIsZUFBZSxFQUNmLHFCQUFxQixFQUNyQixhQUFhLEVBQ2IsdUJBQXVCLEVBQ3ZCLGNBQWMsR0FDZixNQUFNLDRCQUE0QixDQUFBO0FBQ25DLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQTtBQUVqRSxNQUFNLGdCQUFnQixHQUFHLFdBQVcsQ0FBQTtBQUNwQyxNQUFNLG9CQUFvQixHQUFHLFdBQVcsQ0FBQTtBQUN4QyxNQUFNLGFBQWEsR0FBRyxTQUFTLENBQUE7QUFDL0IsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFBO0FBQ3ZCLE1BQU0sYUFBYSxHQUFHLEtBQUssQ0FBQTtBQUMzQixNQUFNLG9CQUFvQixHQUFHLEVBQUUsQ0FBQTtBQUMvQixNQUFNLGVBQWUsR0FBRyxFQUFFLENBQUE7QUFDMUIsTUFBTSx1QkFBdUIsR0FBRyxFQUFFLENBQUE7QUFDbEMsTUFBTSxtQkFBbUIsR0FBRyxFQUFFLENBQUE7QUFDOUIsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFBO0FBQ25CLE1BQU0sbUJBQW1CLEdBQUcsRUFBRSxDQUFBO0FBQzlCLE1BQU0saUJBQWlCLEdBQUcsRUFBRSxDQUFBO0FBQzVCLE1BQU0sdUJBQXVCLEdBQUcsR0FBRyxDQUFBO0FBQ25DLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFBO0FBQzVCLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQTtBQUN4QixNQUFNLG1C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\",\"filename\":\"scripts/corporations/round-3.js\",\"server\":\"foodnstuff\"}}],[\"scripts/corporations/tea.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { maximizeMoraleAndEnergy, waitForCycle, } from 'scripts/corporations/utils';\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    while (true) {\\n        const industries = ns.args.length > 0\\n            ? ns.args\\n            : [\\n                ...new Set(ns.corporation\\n                    .getCorporation()\\n                    .divisions.map((divName) => ns.corporation.getDivision(divName).type)),\\n            ];\\n        await maximizeMoraleAndEnergy(ns, industries);\\n        await waitForCycle(ns);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvY29ycG9yYXRpb25zL3RlYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLFlBQVksR0FDYixNQUFNLDRCQUE0QixDQUFBO0FBRW5DLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUVwQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sVUFBVSxHQUNkLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUM7WUFDaEIsQ0FBQyxDQUFFLEVBQUUsQ0FBQyxJQUEyQjtZQUNqQyxDQUFDLENBQUM7Z0JBQ0UsR0FBRyxJQUFJLEdBQUcsQ0FDUixFQUFFLENBQUMsV0FBVztxQkFDWCxjQUFjLEVBQUU7cUJBQ2hCLFNBQVMsQ0FBQyxHQUFHLENBQ1osQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDdEQsQ0FDSjthQUNGLENBQUE7UUFFUCxNQUFNLHVCQUF1QixDQUFDLEVBQUUsRUFBRSxVQUFVLENBQUMsQ0FBQTtRQUM3QyxNQUFNLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQTtLQUN2QjtBQUNILENBQUMifQ==\",\"filename\":\"scripts/corporations/tea.js\",\"server\":\"foodnstuff\"}}],[\"scripts/corporations/utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CITY_NAMES } from 'scripts/corporations/constants';\\nconst getCurState = (ns) => ns.corporation.getCorporation().state;\\nexport const waitForCycle = async (ns) => {\\n    const curState = getCurState(ns);\\n    while (curState === getCurState(ns)) {\\n        await ns.sleep(100);\\n    }\\n    while (curState !== getCurState(ns)) {\\n        await ns.sleep(100);\\n    }\\n};\\nexport const upgradeToLevel = (ns, name, level) => {\\n    const curLevel = ns.corporation.getUpgradeLevel(name);\\n    for (let i = curLevel; i < level; i++) {\\n        ns.corporation.levelUpgrade(name);\\n    }\\n};\\nexport const expandWarehouse = (ns, division, city, capacity) => {\\n    if (!ns.corporation.hasWarehouse(division, city)) {\\n        ns.corporation.purchaseWarehouse(division, city);\\n    }\\n    while (ns.corporation.getWarehouse(division, city).size < capacity) {\\n        ns.corporation.upgradeWarehouse(division, city);\\n    }\\n};\\nexport const expandToAllCities = (ns, division) => {\\n    const curCities = ns.corporation.getDivision(division)\\n        .cities;\\n    for (const cityName of CITY_NAMES) {\\n        if (!curCities.includes(cityName)) {\\n            ns.corporation.expandCity(division, cityName);\\n        }\\n    }\\n};\\nexport const getDivisions = (ns, industries) => ns.corporation\\n    .getCorporation()\\n    .divisions.filter((divName) => industries.includes(ns.corporation.getDivision(divName).type));\\nexport const getDivisionsAndCities = (ns, industries) => {\\n    const dnc = [];\\n    const divisions = getDivisions(ns, industries);\\n    for (const divisionName of divisions) {\\n        for (const cityName of ns.corporation.getDivision(divisionName).cities) {\\n            dnc.push([divisionName, cityName]);\\n        }\\n    }\\n    return dnc;\\n};\\nexport const hireEmployees = (ns, division, city, desiredEmployees) => {\\n    const positionsToOpen = desiredEmployees - ns.corporation.getOffice(division, city).size;\\n    if (positionsToOpen > 0) {\\n        const reqCost = ns.corporation.getOfficeSizeUpgradeCost(division, city, positionsToOpen);\\n        if (reqCost > ns.corporation.getCorporation().funds) {\\n            throw new Error('Insufficient funds to hire employees');\\n        }\\n        ns.corporation.upgradeOfficeSize(division, city, positionsToOpen);\\n    }\\n    while (ns.corporation.getOffice(division, city).numEmployees < desiredEmployees) {\\n        if (!ns.corporation.hireEmployee(division, city)) {\\n            throw new Error('Failed to hire employee');\\n        }\\n    }\\n};\\nexport const buyTeaAndThrowParties = (ns, industries) => {\\n    let minStat = 100;\\n    for (const [divisionName, cityName] of getDivisionsAndCities(ns, industries)) {\\n        const { avgEnergy, avgMorale } = ns.corporation.getOffice(divisionName, cityName);\\n        minStat = Math.min(minStat, avgEnergy, avgMorale);\\n        if (!ns.corporation.buyTea(divisionName, cityName)) {\\n            return -1;\\n        }\\n        const amt = (100.5 - avgMorale) * 100000;\\n        if (!ns.corporation.throwParty(divisionName, cityName, amt)) {\\n            return -1;\\n        }\\n    }\\n    return minStat;\\n};\\nexport const maximizeMoraleAndEnergy = async (ns, industries) => {\\n    while (true) {\\n        const minStat = buyTeaAndThrowParties(ns, industries);\\n        if (minStat < 0) {\\n            return;\\n        }\\n        else if (minStat > 99) {\\n            break;\\n        }\\n        else {\\n            ns.print(`-- Buying tea and throwing parties (min stat: ${minStat.toFixed(3)})`);\\n        }\\n        await waitForCycle(ns);\\n    }\\n};\\nexport const findInvestors = async (ns) => {\\n    let lastOffer = 0;\\n    for (let i = 0;; i++) {\\n        await waitForCycle(ns);\\n        const offer = ns.corporation.getInvestmentOffer();\\n        ns.print(`Offer after cycle ${i + 1}: ${ns.formatNumber(offer.funds)}`);\\n        if (offer.funds <= lastOffer) {\\n            ns.corporation.acceptInvestmentOffer();\\n            ns.print(`Accepted offer of ${ns.formatNumber(offer.funds)}`);\\n            lastOffer = offer.funds;\\n            break;\\n        }\\n        lastOffer = offer.funds;\\n    }\\n    return lastOffer;\\n};\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9jb3Jwb3JhdGlvbnMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdDQUFnQyxDQUFBO0FBRTNELE1BQU0sV0FBVyxHQUFHLENBQUMsRUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLGNBQWMsRUFBRSxDQUFDLEtBQUssQ0FBQTtBQUVyRSxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsS0FBSyxFQUFFLEVBQU0sRUFBRSxFQUFFO0lBQzNDLE1BQU0sUUFBUSxHQUFHLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUVoQyxPQUFPLFFBQVEsS0FBSyxXQUFXLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFDbkMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0tBQ3BCO0lBRUQsT0FBTyxRQUFRLEtBQUssV0FBVyxDQUFDLEVBQUUsQ0FBQyxFQUFFO1FBQ25DLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtLQUNwQjtBQUNILENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxDQUFDLEVBQU0sRUFBRSxJQUFZLEVBQUUsS0FBYSxFQUFFLEVBQUU7SUFDcEUsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUE7SUFFckQsS0FBSyxJQUFJLENBQUMsR0FBRyxRQUFRLEVBQUUsQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNyQyxFQUFFLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQTtLQUNsQztBQUNILENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxDQUM3QixFQUFNLEVBQ04sUUFB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\",\"filename\":\"scripts/corporations/utils.js\",\"server\":\"foodnstuff\"}}],[\"scripts/exploits/alter-reality.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// @ts-nocheck\\nexport async function main(ns) {\\n    ns.alterReality();\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWx0ZXItcmVhbGl0eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2V4cGxvaXRzL2FsdGVyLXJlYWxpdHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYztBQVdkLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFBO0FBQ25CLENBQUMifQ==\",\"filename\":\"scripts/exploits/alter-reality.js\",\"server\":\"foodnstuff\"}}],[\"scripts/exploits/bypass.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// @ts-nocheck\\nexport async function main(ns) {\\n    const doc = eval('document');\\n    ns.bypass(doc);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnlwYXNzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhwbG9pdHMvYnlwYXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWM7QUFJZCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUM1QixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQ2hCLENBQUMifQ==\",\"filename\":\"scripts/exploits/bypass.js\",\"server\":\"foodnstuff\"}}],[\"scripts/exploits/exploit.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// @ts-nocheck\\nexport async function main(ns) {\\n    ns.exploit();\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwbG9pdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2V4cGxvaXRzL2V4cGxvaXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYztBQUlkLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFBO0FBQ2QsQ0FBQyJ9\",\"filename\":\"scripts/exploits/exploit.js\",\"server\":\"foodnstuff\"}}],[\"scripts/exploits/rainbow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// @ts-nocheck\\nexport async function main(ns) {\\n    ns.rainbow('noodles');\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFpbmJvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2V4cGxvaXRzL3JhaW5ib3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYztBQUlkLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQTtBQUN2QixDQUFDIn0=\",\"filename\":\"scripts/exploits/rainbow.js\",\"server\":\"foodnstuff\"}}],[\"scripts/exploits/tampering.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main() {\\n    const old = Number.prototype.toExponential;\\n    Number.prototype.toExponential = () => 'a';\\n    setTimeout(() => {\\n        Number.prototype.toExponential = old;\\n    }, 16 * 60 * 1000);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFtcGVyaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhwbG9pdHMvdGFtcGVyaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSTtJQUN4QixNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQTtJQUMxQyxNQUFNLENBQUMsU0FBUyxDQUFDLGFBQWEsR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUE7SUFFMUMsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLE1BQU0sQ0FBQyxTQUFTLENBQUMsYUFBYSxHQUFHLEdBQUcsQ0FBQTtJQUN0QyxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQTtBQUNwQixDQUFDIn0=\",\"filename\":\"scripts/exploits/tampering.js\",\"server\":\"foodnstuff\"}}],[\"scripts/exploits/time-compression.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main() {\\n    const oldNow = performance.now;\\n    performance.now = () => 42;\\n    setTimeout(() => {\\n        performance.now = oldNow;\\n    }, 2000);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1jb21wcmVzc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2V4cGxvaXRzL3RpbWUtY29tcHJlc3Npb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJO0lBQ3hCLE1BQU0sTUFBTSxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUE7SUFDOUIsV0FBVyxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUE7SUFDMUIsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLFdBQVcsQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFBO0lBQzFCLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQTtBQUNWLENBQUMifQ==\",\"filename\":\"scripts/exploits/time-compression.js\",\"server\":\"foodnstuff\"}}],[\"scripts/exploits/unclickable.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main() {\\n    const doc = eval('document');\\n    const el = doc.getElementById('unclickable');\\n    el.style.display = 'block';\\n    el.style.visibility = 'visible';\\n    el.style.height = '20px';\\n    el.style.zIndex = '100';\\n    el.style.backgroundColor = 'red';\\n    el.onmouseup = () => {\\n        el.style.display = 'none';\\n        el.style.visibility = 'hidden';\\n        console.log('mouseup');\\n    };\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5jbGlja2FibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9leHBsb2l0cy91bmNsaWNrYWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUk7SUFDeEIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQzVCLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFFLENBQUE7SUFFN0MsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFBO0lBQzFCLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQTtJQUMvQixFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUE7SUFDeEIsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFBO0lBQ3ZCLEVBQUUsQ0FBQyxLQUFLLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQTtJQUVoQyxFQUFFLENBQUMsU0FBUyxHQUFHLEdBQUcsRUFBRTtRQUNsQixFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUE7UUFDekIsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsUUFBUSxDQUFBO1FBQzlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUE7SUFDeEIsQ0FBQyxDQUFBO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/exploits/unclickable.js\",\"server\":\"foodnstuff\"}}],[\"scripts/hack-all.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\n * v5 of the hacking script\\n * This version implements a single main script that manages the execution of\\n * hack/grow/weaken scripts in every server and also tries to optimize the\\n * ratio of hack/grow/weaken threads.\\n */\\nimport { UI } from 'scripts/hack-ui';\\nimport { getAllServers } from 'scripts/utils/servers';\\nimport { FILES, HOSTS, SCRIPTS } from 'scripts/utils/constants';\\nconst OFFSET_MS = 500;\\nconst SCRIPT_FINISH_WAIT_TIME_MS = 100;\\nconst HOME_RESERVED_RAM_GB = 6;\\nconst nukeServers = (ns, activeServers) => {\\n    const PORT_PROGRAMS = [\\n        {\\n            filename: FILES.BRUTE_SSH,\\n            cmd: ns.brutessh,\\n        },\\n        {\\n            filename: FILES.FTP_CRACK,\\n            cmd: ns.ftpcrack,\\n        },\\n        {\\n            filename: FILES.RELAY_SMTP,\\n            cmd: ns.relaysmtp,\\n        },\\n        {\\n            filename: FILES.HTTP_WORM,\\n            cmd: ns.httpworm,\\n        },\\n        {\\n            filename: FILES.SQL_INJECT,\\n            cmd: ns.sqlinject,\\n        },\\n    ];\\n    const FILES_TO_COPY = [\\n        SCRIPTS.SIMPLE_GROW,\\n        SCRIPTS.SIMPLE_HACK,\\n        SCRIPTS.SIMPLE_WEAKEN,\\n    ];\\n    const curPrograms = PORT_PROGRAMS.filter(({ filename }) => ns.fileExists(filename, HOSTS.HOME));\\n    const remainingServers = getAllServers(ns).filter((server) => !activeServers.some((s) => s.host === server.host));\\n    const newServers = [];\\n    for (const server of remainingServers) {\\n        if (!ns.hasRootAccess(server.host)) {\\n            if (ns.getServerRequiredHackingLevel(server.host) < ns.getHackingLevel() &&\\n                ns.getServerNumPortsRequired(server.host) <= curPrograms.length) {\\n                curPrograms.forEach((prog) => prog.cmd(server.host));\\n                ns.nuke(server.host);\\n            }\\n        }\\n        if (ns.hasRootAccess(server.host)) {\\n            newServers.push(server);\\n            ns.scp(FILES_TO_COPY, server.host, HOSTS.HOME);\\n        }\\n    }\\n    if (newServers.length > 0) {\\n        ns.toast(`New servers available for hacking: ${newServers\\n            .map((s) => s.host)\\n            .join(', ')}`);\\n    }\\n    return newServers;\\n};\\nconst countServerThreads = (ns, server) => {\\n    const scriptRam = Math.max(ns.getScriptRam(SCRIPTS.SIMPLE_GROW, server), ns.getScriptRam(SCRIPTS.SIMPLE_HACK, server), ns.getScriptRam(SCRIPTS.SIMPLE_WEAKEN, server));\\n    let availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n    if (server === HOSTS.HOME) {\\n        availableRam = Math.max(0, availableRam - HOME_RESERVED_RAM_GB);\\n    }\\n    return Math.floor(availableRam / scriptRam);\\n};\\nconst countThreads = (ns, servers) => servers.reduce((acc, server) => acc + countServerThreads(ns, server.host), 0);\\nconst getThreadsForGrow = (totalThreads) => {\\n    // TODO: Implement logic when Formulas API is available\\n    const growThreads = Math.floor((11 * totalThreads) / 12);\\n    const weakenThreads = totalThreads - growThreads;\\n    return { growThreads, weakenThreads };\\n};\\nconst getThreadsForHack = (totalThreads) => {\\n    // TODO: Implement logic when Formulas API is available\\n    const hackThreads = Math.floor((1 * totalThreads) / 36);\\n    const growThreads = Math.floor((32 * totalThreads) / 36);\\n    const weakenThreads = totalThreads - hackThreads - growThreads;\\n    return {\\n        hackThreads,\\n        growThreads,\\n        weakenThreads,\\n    };\\n};\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    const target = ns.args[0];\\n    if (!target) {\\n        ns.tprint('Missing target argument');\\n        ns.exit();\\n    }\\n    const activeServers = [];\\n    const minSecurity = ns.getServerMinSecurityLevel(target);\\n    const maxMoney = ns.getServerMaxMoney(target);\\n    const ui = new UI(ns, target, { minSecurity, maxMoney }, 'Hack v5');\\n    ns.atExit(() => {\\n        ui.destroy();\\n    });\\n    while (true) {\\n        ns.print('Looking for new servers...');\\n        const newServers = nukeServers(ns, activeServers);\\n        activeServers.push(...newServers);\\n        if (newServers.length > 0) {\\n            ns.print(`Found ${newServers.length} new servers: ${newServers\\n                .map((s) => s.host)\\n                .join(', ')}`);\\n        }\\n        else {\\n            ns.print('No new servers found');\\n        }\\n        const totalThreads = countThreads(ns, activeServers);\\n        const curSecurity = ns.getServerSecurityLevel(target);\\n        const curMoney = ns.getServerMoneyAvailable(target);\\n        ui.setSecurity(curSecurity);\\n        ui.setMoney(curMoney);\\n        if (totalThreads === 0) {\\n            // Happens when hack-all.js is killed while hacking scripts are running\\n            ns.print('No threads available. Waiting...');\\n            ns.sleep(1000);\\n            continue;\\n        }\\n        const events = [];\\n        const pushEvent = (script, threads, startT, endT) => {\\n            events.push({\\n                type: 'script-start',\\n                script,\\n                threads,\\n                t: startT,\\n            });\\n            events.push({\\n                type: 'script-end',\\n                script,\\n                t: endT,\\n            });\\n        };\\n        if (curSecurity > minSecurity) {\\n            const weakenTime = ns.getWeakenTime(target);\\n            ui.addTimer(`Weaken (${totalThreads})`, weakenTime);\\n            pushEvent('weaken', totalThreads, 0, weakenTime);\\n        }\\n        else if (curMoney < maxMoney) {\\n            const { growThreads, weakenThreads } = getThreadsForGrow(totalThreads);\\n            const growTime = ns.getGrowTime(target);\\n            const weakenTime = ns.getWeakenTime(target);\\n            const weakenDelay = Math.max(0, growTime - weakenTime + OFFSET_MS);\\n            ui.addTimer(`Grow (${growThreads})`, growTime);\\n            ui.addTimer(`Weaken (${weakenThreads})`, weakenDelay + weakenTime);\\n            pushEvent('grow', growThreads, 0, growTime);\\n            pushEvent('weaken', weakenThreads, weakenDelay, weakenDelay + weakenTime);\\n        }\\n        else {\\n            const { hackThreads, growThreads, weakenThreads } = getThreadsForHack(totalThreads);\\n            const hackTime = ns.getHackTime(target);\\n            const growTime = ns.getGrowTime(target);\\n            const weakenTime = ns.getWeakenTime(target);\\n            const growDelay = Math.max(0, hackTime - growTime + OFFSET_MS);\\n            const weakenDelay = Math.max(0, growDelay + growTime - weakenTime + OFFSET_MS);\\n            ui.addTimer(`Hack (${hackThreads})`, hackTime);\\n            ui.addTimer(`Grow (${growThreads})`, growDelay + growTime);\\n            ui.addTimer(`Weaken (${weakenThreads})`, weakenDelay + weakenTime);\\n            pushEvent('hack', hackThreads, 0, hackTime);\\n            pushEvent('grow', growThreads, growDelay, growDelay + growTime);\\n            pushEvent('weaken', weakenThreads, weakenDelay, weakenDelay + weakenTime);\\n        }\\n        events.sort((a, b) => a.t - b.t);\\n        let elapsedTime = 0;\\n        for (const event of events) {\\n            await ns.sleep(event.t - elapsedTime);\\n            elapsedTime = event.t;\\n            const script = event.script === 'grow'\\n                ? SCRIPTS.SIMPLE_GROW\\n                : event.script === 'hack'\\n                    ? SCRIPTS.SIMPLE_HACK\\n                    : SCRIPTS.SIMPLE_WEAKEN;\\n            if (event.type === 'script-start') {\\n                let threadCnt = 0;\\n                for (const server of activeServers) {\\n                    const availableThreads = countServerThreads(ns, server.host);\\n                    const nThreads = Math.min(availableThreads, event.threads - threadCnt);\\n                    nThreads > 0 && ns.exec(script, server.host, nThreads, target);\\n                    threadCnt += nThreads;\\n                }\\n                ns.print(`Started ${script} with ${threadCnt} threads (expected: ${event.threads})`);\\n            }\\n            else {\\n                // Wait for all scripts to finish\\n                for (const server of activeServers) {\\n                    if (ns.isRunning(script, server.host, target)) {\\n                        await ns.sleep(SCRIPT_FINISH_WAIT_TIME_MS);\\n                        elapsedTime += SCRIPT_FINISH_WAIT_TIME_MS;\\n                    }\\n                }\\n                if (event.script === 'grow' || event.script === 'hack') {\\n                    ui.setMoney(ns.getServerMoneyAvailable(target));\\n                }\\n                ui.setSecurity(ns.getServerSecurityLevel(target));\\n                ns.print(`Finished running ${script}`);\\n            }\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay1hbGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9oYWNrLWFsbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7R0FLRztBQUlILE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQTtBQUNwQyxPQUFPLEVBQUUsYUFBYSxFQUFVLE1BQU0sdUJBQXVCLENBQUE7QUFDN0QsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLE1BQU0seUJBQXlCLENBQUE7QUFpQi9ELE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQTtBQUNyQixNQUFNLDBCQUEwQixHQUFHLEdBQUcsQ0FBQTtBQUN0QyxNQUFNLG9CQUFvQixHQUFHLENBQUMsQ0FBQTtBQUU5QixNQUFNLFdBQVcsR0FBRyxDQUFDLEVBQU0sRUFBRSxhQUF1QixFQUFFLEVBQUU7SUFDdEQsTUFBTSxhQUFhLEdBQUc7UUFDcEI7WUFDRSxRQUFRLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDekIsR0FBRyxFQUFFLEVBQUUsQ0FBQyxRQUFRO1NBQ2pCO1FBQ0Q7WUFDRSxRQUFRLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDekIsR0FBRyxFQUFFLEVBQUUsQ0FBQyxRQUFRO1NBQ2pCO1FBQ0Q7WUFDRSxRQUFRLEVBQUUsS0FBSyxDQUFDLFVBQVU7WUFDMUIsR0FBRyxFQUFFLEVBQUUsQ0FBQyxTQUFTO1NBQ2xCO1FBQ0Q7WUFDRSxRQUFRLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDekIsR0FBRyxFQUFFLEVBQUUsQ0FBQyxRQUFRO1NBQ2pCO1FBQ0Q7WUFDRSxRQUFRLEVBQUUsS0FBSyxDQUFDLFVBQVU7WUFDMUIsR0FBRyxFQUFFLEVBQUUsQ0FBQyxTQUFTO1NBQ2xCO0tBQ0YsQ0FBQTtJQUVELE1BQU0sYUFBYSxHQUFHO1FBQ3BCLE9BQU8sQ0FBQyxXQUFXO1FBQ25CLE9BQU8sQ0FBQyxXQUFXO1FBQ25CLE9BQU8sQ0FBQyxh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\",\"filename\":\"scripts/hack-all.js\",\"server\":\"foodnstuff\"}}],[\"scripts/hack-candidates.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from 'scripts/utils/servers';\\nexport async function main(ns) {\\n    const candidates = getAllServers(ns)\\n        .filter((s) => ns.hasRootAccess(s.host))\\n        .sort((sa, sb) => sb.maxMoney - sa.maxMoney)\\n        .slice(0, 30);\\n    candidates.forEach((s) => ns.tprint(`${s.host}:\\\\n\\\\tMax money = $${ns.formatNumber(s.maxMoney)}\\\\n\\\\tMin security = ${s.minSecurity}\\\\n\\\\tReq hack lvl = ${s.reqHack}`));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay1jYW5kaWRhdGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NjcmlwdHMvaGFjay1jYW5kaWRhdGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQTtBQUVyRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sVUFBVSxHQUFHLGFBQWEsQ0FBQyxFQUFFLENBQUM7U0FDakMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN2QyxJQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUM7U0FDM0MsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUVmLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUN2QixFQUFFLENBQUMsTUFBTSxDQUNQLEdBQUcsQ0FBQyxDQUFDLElBQUkscUJBQXFCLEVBQUUsQ0FBQyxZQUFZLENBQzNDLENBQUMsQ0FBQyxRQUFRLENBQ1gsc0JBQXNCLENBQUMsQ0FBQyxXQUFXLHNCQUFzQixDQUFDLENBQUMsT0FBTyxFQUFFLENBQ3RFLENBQ0YsQ0FBQTtBQUNILENBQUMifQ==\",\"filename\":\"scripts/hack-candidates.js\",\"server\":\"foodnstuff\"}}],[\"scripts/hack-tracker.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay10cmFja2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NjcmlwdHMvaGFjay10cmFja2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIifQ==\",\"filename\":\"scripts/hack-tracker.js\",\"server\":\"foodnstuff\"}}],[\"scripts/hack-ui.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatTime } from 'scripts/utils/time';\\nexport class UI {\\n    id;\\n    containerId;\\n    securityId;\\n    moneyId;\\n    timersId;\\n    minSecurity;\\n    maxMoney;\\n    ns;\\n    title;\\n    constructor(ns, id, stats, title) {\\n        this.ns = ns;\\n        this.id = id;\\n        this.containerId = `hack-status-${id}`;\\n        this.securityId = this.containerId + '--security';\\n        this.moneyId = this.containerId + '--money';\\n        this.timersId = this.containerId + '--timers';\\n        this.minSecurity = stats.minSecurity;\\n        this.maxMoney = stats.maxMoney;\\n        this.title = title;\\n        this.init();\\n    }\\n    destroy() {\\n        const doc = eval('document');\\n        const container = doc.getElementById(this.containerId);\\n        if (container) {\\n            doc.body.removeChild(container);\\n        }\\n    }\\n    init() {\\n        const doc = eval('document');\\n        if (doc.getElementById(this.containerId)) {\\n            return;\\n        }\\n        // TODO: Make this draggable\\n        const container = doc.createElement('div');\\n        container.id = this.containerId;\\n        container.style.position = 'fixed';\\n        container.style.bottom = '2rem';\\n        container.style.right = '0';\\n        container.style.display = 'flex';\\n        container.style.flexDirection = 'column';\\n        container.style.fontFamily =\\n            '\\\"Lucida Console\\\", \\\"Lucida Sans Unicode\\\", \\\"Fira Mono\\\", Consolas, \\\"Courier New\\\", Courier, monospace, \\\"Times New Roman\\\"';\\n        container.style.zIndex = '100';\\n        container.style.color = '#0c0';\\n        container.style.borderStyle = 'solid';\\n        container.style.borderColor = 'rgb(128, 128, 128)';\\n        container.style.borderWidth = '1px';\\n        container.style.padding = '0.5rem';\\n        const title = doc.createElement('div');\\n        title.style.padding = '0.5rem';\\n        title.style.alignSelf = 'center';\\n        title.innerText = this.title;\\n        title.style.fontWeight = 'bold';\\n        container.append(title);\\n        const target = doc.createElement('div');\\n        target.innerText = `Target: ${this.id}`;\\n        container.append(target);\\n        const security = doc.createElement('div');\\n        security.id = this.securityId;\\n        security.innerText = `Security: 0 (min: ${this.minSecurity})`;\\n        container.append(security);\\n        const money = doc.createElement('div');\\n        money.id = this.moneyId;\\n        money.innerText = `Money: 0 (max: ${this.maxMoney})`;\\n        container.append(money);\\n        const timers = doc.createElement('div');\\n        timers.id = this.timersId;\\n        timers.style.marginTop = '1rem';\\n        container.append(timers);\\n        doc.body.append(container);\\n    }\\n    setSecurity(security) {\\n        const doc = eval('document');\\n        const el = doc.getElementById(this.securityId);\\n        if (el) {\\n            el.innerText = `Security: ${security.toFixed(3)} (min: ${this.minSecurity})`;\\n        }\\n    }\\n    setMoney(money) {\\n        const doc = eval('document');\\n        const el = doc.getElementById(this.moneyId);\\n        if (el) {\\n            el.innerText = `Money: ${this.ns.formatNumber(money)} (max: ${this.ns.formatNumber(this.maxMoney)})`;\\n        }\\n    }\\n    addTimer(label, time) {\\n        const doc = eval('document');\\n        const now = performance.now();\\n        const target = now + time;\\n        const el = doc.createElement('div');\\n        const container = doc.getElementById(this.timersId);\\n        const refresh = () => {\\n            const remTime = target - performance.now();\\n            if (remTime < 0) {\\n                container?.removeChild(el);\\n                return;\\n            }\\n            el.innerText = `${label}: ${formatTime(remTime)}`;\\n            setTimeout(refresh, 200);\\n        };\\n        refresh();\\n        container?.append(el);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay11aS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL2hhY2stdWkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG9CQUFvQixDQUFBO0FBRS9DLE1BQU0sT0FBTyxFQUFFO0lBQ2IsRUFBRSxDQUFRO0lBQ1YsV0FBVyxDQUFRO0lBQ25CLFVBQVUsQ0FBUTtJQUNsQixPQUFPLENBQVE7SUFDZixRQUFRLENBQVE7SUFDaEIsV0FBVyxDQUFRO0lBQ25CLFFBQVEsQ0FBUTtJQUNoQixFQUFFLENBQUk7SUFDTixLQUFLLENBQVE7SUFFYixZQUNFLEVBQU0sRUFDTixFQUFVLEVBQ1YsS0FBZ0QsRUFDaEQsS0FBYTtRQUViLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFBO1FBQ1osSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUE7UUFDWixJQUFJLENBQUMsV0FBVyxHQUFHLGVBQWUsRUFBRSxFQUFFLENBQUE7UUFDdEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsV0FBVyxHQUFHLFlBQVksQ0FBQTtRQUNqRCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLEdBQUcsU0FBUyxDQUFBO1FBQzNDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUE7UUFDN0MsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFBO1FBQ3BDLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQTtRQUM5QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQTtRQUVsQixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUE7SUFDYixDQUFDO0lBRUQsT0FBTztRQUNMLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQWEsQ0FBQTtRQUN4QyxNQUFNLFNBQVMsR0FBRyxHQUFHLENB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\",\"filename\":\"scripts/hack-ui.js\",\"server\":\"foodnstuff\"}}],[\"scripts/hack-v2.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\n * An improved version of the hack script.\\n * This script runs weaken scripts immediately after invoking hack and grow\\n * scripts. This makes sure these three scripts always run with low server\\n * security, increasing the number of invocations overall.\\n * For best results, this script should be run at the same time on all servers.\\n */\\nimport { HOSTS, SCRIPTS } from 'scripts/utils/constants';\\nconst OFFSET = 1000;\\nexport async function main(ns) {\\n    const host = ns.getHostname();\\n    const target = ns.args[0] ?? HOSTS.JOESGUNS;\\n    if (!target) {\\n        ns.print('Missing target argument');\\n        ns.exit();\\n    }\\n    const getHostAvailableRam = () => ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\n    const hackRam = ns.getScriptRam(SCRIPTS.SIMPLE_HACK);\\n    const growRam = ns.getScriptRam(SCRIPTS.SIMPLE_GROW);\\n    const weakenRam = ns.getScriptRam(SCRIPTS.SIMPLE_WEAKEN);\\n    if (getHostAvailableRam() < 2 * hackRam) {\\n        ns.print(`Host ${host} does not have enough RAM for this script, aborting.`);\\n        ns.exit();\\n    }\\n    const minSecurity = ns.getServerMinSecurityLevel(target);\\n    const maxMoney = ns.getServerMaxMoney(target);\\n    const targetSecurity = Math.max(1.3 * minSecurity, minSecurity + 5);\\n    const targetMoney = (0.75 * maxMoney);\\n    while (true) {\\n        const curSecurity = ns.getServerSecurityLevel(target);\\n        const curMoney = ns.getServerMoneyAvailable(target);\\n        const availableRam = getHostAvailableRam();\\n        if (curSecurity > targetSecurity) {\\n            ns.printf('Lowering difficulty (current: %.3f, target: %.3f)', curSecurity, targetSecurity);\\n            const weakenThreads = Math.floor(availableRam / weakenRam);\\n            const weakenTime = ns.getWeakenTime(target);\\n            ns.exec(SCRIPTS.SIMPLE_WEAKEN, host, weakenThreads, target);\\n            await ns.sleep(weakenTime + OFFSET);\\n        }\\n        else if (curMoney < targetMoney) {\\n            ns.printf('Increasing available money (current: %s, target: %s)', ns.formatNumber(curMoney), ns.formatNumber(targetMoney));\\n            const growThreads = Math.floor(availableRam / 2 / growRam);\\n            const growTime = ns.getGrowTime(target);\\n            const weakenThreads = Math.floor((availableRam - growThreads * growRam) / weakenRam);\\n            const weakenTime = ns.getWeakenTime(target);\\n            ns.exec(SCRIPTS.SIMPLE_GROW, host, growThreads, target);\\n            await ns.sleep(Math.max(0, growTime - weakenTime));\\n            ns.exec(SCRIPTS.SIMPLE_WEAKEN, host, weakenThreads, target);\\n            await ns.sleep(weakenTime + OFFSET);\\n        }\\n        else {\\n            const hackThreads = Math.floor(availableRam / 2 / hackRam);\\n            const hackTime = ns.getHackTime(target);\\n            const weakenThreads = Math.floor((availableRam - hackThreads * hackRam) / weakenRam);\\n            const weakenTime = ns.getWeakenTime(target);\\n            ns.exec(SCRIPTS.SIMPLE_HACK, host, hackThreads, target);\\n            await ns.sleep(Math.max(0, hackTime - weakenTime));\\n            ns.exec(SCRIPTS.SIMPLE_WEAKEN, host, weakenThreads, target);\\n            await ns.sleep(weakenTime + OFFSET);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay12Mi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL2hhY2stdjIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBSUgsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQTtBQUV4RCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUE7QUFFbkIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUE7SUFDN0IsTUFBTSxNQUFNLEdBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVksSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFBO0lBRXZELElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDWCxFQUFFLENBQUMsS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUE7UUFDbkMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFBO0tBQ1Y7SUFFRCxNQUFNLG1CQUFtQixHQUFHLEdBQUcsRUFBRSxDQUMvQixFQUFFLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUV0RCxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUNwRCxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUNwRCxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQTtJQUV4RCxJQUFJLG1CQUFtQixFQUFFLEdBQUcsQ0FBQyxHQUFHLE9BQU8sRUFBRTtRQUN2QyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsSUFBSSxzREFBc0QsQ0FBQyxDQUFBO1FBQzVFLEVBQUUs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\",\"filename\":\"scripts/hack-v2.js\",\"server\":\"foodnstuff\"}}],[\"scripts/hack-v3.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\n * Same as hack-v2, but this also implements a sync barrier so that all hack-v3\\n * scripts remain in sync, even if they are executed at different times.\\n */\\nimport { HOSTS, SCRIPTS } from 'scripts/utils/constants';\\nimport { createTimer } from 'scripts/ui/timer';\\nconst REGISTRATION_TIME = 5000;\\nconst OFFSET = 1000;\\nlet busy = false;\\nlet registrationOpen = false;\\nconst participants = new Set();\\nconst register = async (ns, id) => {\\n    while (busy) {\\n        ns.print('Waiting for barrier');\\n        await ns.sleep(1000);\\n    }\\n    let isManager = false;\\n    if (!registrationOpen) {\\n        isManager = true;\\n        registrationOpen = true;\\n        setTimeout(() => {\\n            busy = true;\\n            registrationOpen = false;\\n            // console.log(`Participants: ${[...participants.values()].join(', ')}`)\\n        }, REGISTRATION_TIME);\\n    }\\n    participants.add(id);\\n    return isManager;\\n};\\nconst finish = (id) => {\\n    participants.delete(id);\\n    if (participants.size === 0) {\\n        busy = false;\\n    }\\n};\\nexport async function main(ns) {\\n    const host = ns.getHostname();\\n    const target = ns.args[0] ?? HOSTS.JOESGUNS;\\n    if (!target) {\\n        ns.print('Missing target argument');\\n        ns.exit();\\n    }\\n    const getHostAvailableRam = () => ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\n    const hackRam = ns.getScriptRam(SCRIPTS.SIMPLE_HACK);\\n    const growRam = ns.getScriptRam(SCRIPTS.SIMPLE_GROW);\\n    const weakenRam = ns.getScriptRam(SCRIPTS.SIMPLE_WEAKEN);\\n    if (getHostAvailableRam() < 2 * hackRam) {\\n        ns.print(`Host ${host} does not have enough RAM for this script, aborting.`);\\n        ns.exit();\\n    }\\n    ns.atExit(() => {\\n        if (participants.has(host)) {\\n            finish(host);\\n        }\\n    });\\n    const minSecurity = ns.getServerMinSecurityLevel(target);\\n    const maxMoney = ns.getServerMaxMoney(target);\\n    const targetSecurity = Math.max(1.3 * minSecurity, minSecurity + 5);\\n    const targetMoney = (0.75 * maxMoney);\\n    while (true) {\\n        const isManager = await register(ns, host);\\n        const curSecurity = ns.getServerSecurityLevel(target);\\n        const curMoney = ns.getServerMoneyAvailable(target);\\n        const availableRam = getHostAvailableRam();\\n        if (curSecurity > targetSecurity) {\\n            ns.printf('Lowering difficulty (current: %.3f, target: %.3f)', curSecurity, targetSecurity);\\n            const weakenThreads = Math.floor(availableRam / weakenRam);\\n            const weakenTime = ns.getWeakenTime(target);\\n            ns.exec(SCRIPTS.SIMPLE_WEAKEN, host, weakenThreads, target);\\n            isManager && createTimer(`Weaken ${target}`, weakenTime);\\n            await ns.sleep(weakenTime + OFFSET);\\n        }\\n        else if (curMoney < targetMoney) {\\n            ns.printf('Increasing available money (current: %s, target: %s)', ns.formatNumber(curMoney), ns.formatNumber(targetMoney));\\n            const growThreads = Math.floor(availableRam / 2 / growRam);\\n            const growTime = ns.getGrowTime(target);\\n            const weakenThreads = Math.floor((availableRam - growThreads * growRam) / weakenRam);\\n            const weakenTime = ns.getWeakenTime(target);\\n            ns.exec(SCRIPTS.SIMPLE_GROW, host, growThreads, target);\\n            isManager && createTimer(`Grow ${target}`, growTime);\\n            await ns.sleep(Math.max(0, growTime - weakenTime));\\n            ns.exec(SCRIPTS.SIMPLE_WEAKEN, host, weakenThreads, target);\\n            isManager && createTimer(`Weaken ${target}`, weakenTime);\\n            await ns.sleep(weakenTime + OFFSET);\\n        }\\n        else {\\n            const hackThreads = Math.floor(availableRam / 2 / hackRam);\\n            const hackTime = ns.getHackTime(target);\\n            const weakenThreads = Math.floor((availableRam - hackThreads * hackRam) / weakenRam);\\n            const weakenTime = ns.getWeakenTime(target);\\n            ns.exec(SCRIPTS.SIMPLE_HACK, host, hackThreads, target);\\n            isManager && createTimer(`Hack ${target}`, hackTime);\\n            await ns.sleep(Math.max(0, hackTime - weakenTime));\\n            ns.exec(SCRIPTS.SIMPLE_WEAKEN, host, weakenThreads, target);\\n            isManager && createTimer(`Weaken ${target}`, weakenTime);\\n            await ns.sleep(weakenTime + OFFSET);\\n        }\\n        finish(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay12My5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL2hhY2stdjMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBSUgsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQTtBQUN4RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFFOUMsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUE7QUFDOUIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFBO0FBRW5CLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQTtBQUNoQixJQUFJLGdCQUFnQixHQUFHLEtBQUssQ0FBQTtBQUM1QixNQUFNLFlBQVksR0FBRyxJQUFJLEdBQUcsRUFBVSxDQUFBO0FBRXRDLE1BQU0sUUFBUSxHQUFHLEtBQUssRUFBRSxFQUFNLEVBQUUsRUFBVSxFQUFFLEVBQUU7SUFDNUMsT0FBTyxJQUFJLEVBQUU7UUFDWCxFQUFFLENBQUMsS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUE7UUFDL0IsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3JCO0lBRUQsSUFBSSxTQUFTLEdBQUcsS0FBSyxDQUFBO0lBRXJCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtRQUNyQixTQUFTLEdBQUcsSUFBSSxDQUFBO1FBQ2hCLGdCQUFnQixHQUFHLElBQUksQ0FBQTtRQUN2QixVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2QsSUFBSSxHQUFHLElBQUksQ0FBQTtZQUNYLGdCQUFnQixHQUFHLEtBQUssQ0FBQTtZQUN4Qix3RUFBd0U7UUFDMUUsQ0FBQyxFQUFFLGlCQUFpQixDQUFDLENBQUE7S0FDdEI7SUFFRCxZQUFZLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ3BCLE9BQU8sU0FBUyxDQUFBO0FBQ2xCLENBQUMsQ0FBQTtBQUVELE1BQU0sTUFBTSxHQUFH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\",\"filename\":\"scripts/hack-v3.js\",\"server\":\"foodnstuff\"}}],[\"scripts/hack-v4.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\n * Improves v3 implementing a HGW strategy and a UI with server stats\\n */\\nimport { SCRIPTS } from 'scripts/utils/constants';\\nimport { formatTime } from 'scripts/utils/time';\\nconst REGISTRATION_TIME_MS = 5000;\\nconst OFFSET_MS = 1000;\\nclass Barrier {\\n    static status = {};\\n    static init(barrierId) {\\n        if (!this.status[barrierId]) {\\n            this.status[barrierId] = {\\n                busy: false,\\n                registering: false,\\n                participants: new Set(),\\n                members: new Set(),\\n            };\\n        }\\n    }\\n    static join(id, barrierId) {\\n        this.init(barrierId);\\n        const status = this.status[barrierId];\\n        status.members.add(id);\\n    }\\n    static leave(ns, id, barrierId, ui) {\\n        this.init(barrierId);\\n        const status = this.status[barrierId];\\n        status.members.delete(id);\\n        if (status.members.size === 0) {\\n            ui.destroy();\\n        }\\n        if (status.participants.has(id)) {\\n            this.finish(ns, id, barrierId);\\n        }\\n    }\\n    static async register(ns, id, barrierId) {\\n        this.init(barrierId);\\n        const status = this.status[barrierId];\\n        while (status.busy) {\\n            ns.print('Waiting for barrier');\\n            await ns.sleep(1000);\\n        }\\n        let isManager = false;\\n        if (!status.registering) {\\n            status.registering = true;\\n            isManager = true;\\n            setTimeout(() => {\\n                status.busy = true;\\n                status.registering = false;\\n            }, REGISTRATION_TIME_MS);\\n        }\\n        status.participants.add(id);\\n        return isManager;\\n    }\\n    static finish(ns, id, barrierId) {\\n        const status = this.status[barrierId];\\n        if (!status) {\\n            ns.print('Warning: Trying to finish in barrier that does not exist, which is a no-op.');\\n            return;\\n        }\\n        if (!status.participants.has(id)) {\\n            ns.print('Warning: Trying to finish an element that is not in the barrier, which is a no-op.');\\n            return;\\n        }\\n        status.participants.delete(id);\\n        if (status.participants.size === 0) {\\n            status.busy = false;\\n        }\\n    }\\n}\\nclass UI {\\n    id;\\n    containerId;\\n    securityId;\\n    moneyId;\\n    timersId;\\n    minSecurity;\\n    maxMoney;\\n    ns;\\n    constructor(ns, id, stats) {\\n        this.ns = ns;\\n        this.id = id;\\n        this.containerId = `hack-status-${id}`;\\n        this.securityId = this.containerId + '--security';\\n        this.moneyId = this.containerId + '--money';\\n        this.timersId = this.containerId + '--timers';\\n        this.minSecurity = stats.minSecurity;\\n        this.maxMoney = stats.maxMoney;\\n        this.init();\\n    }\\n    destroy() {\\n        const doc = eval('document');\\n        const container = doc.getElementById(this.containerId);\\n        if (container) {\\n            doc.body.removeChild(container);\\n        }\\n    }\\n    init() {\\n        const doc = eval('document');\\n        if (doc.getElementById(this.containerId)) {\\n            return;\\n        }\\n        const container = doc.createElement('div');\\n        container.id = this.containerId;\\n        container.style.position = 'fixed';\\n        container.style.bottom = '2rem';\\n        container.style.right = '0';\\n        container.style.display = 'flex';\\n        container.style.flexDirection = 'column';\\n        container.style.fontFamily =\\n            '\\\"Lucida Console\\\", \\\"Lucida Sans Unicode\\\", \\\"Fira Mono\\\", Consolas, \\\"Courier New\\\", Courier, monospace, \\\"Times New Roman\\\"';\\n        container.style.zIndex = '100';\\n        container.style.color = '#0c0';\\n        container.style.borderStyle = 'solid';\\n        container.style.borderColor = 'rgb(128, 128, 128)';\\n        container.style.borderWidth = '1px';\\n        container.style.padding = '0.5rem';\\n        const title = doc.createElement('div');\\n        title.style.padding = '0.5rem';\\n        title.style.alignSelf = 'center';\\n        title.innerText = 'Hack v4';\\n        title.style.fontWeight = 'bold';\\n        container.append(title);\\n        const target = doc.createElement('div');\\n        target.innerText = `Target: ${this.id}`;\\n        container.append(target);\\n        const security = doc.createElement('div');\\n        security.id = this.securityId;\\n        security.innerText = 'Security: 0 (min: 0)';\\n        container.append(security);\\n        const money = doc.createElement('div');\\n        money.id = this.moneyId;\\n        money.innerText = 'Money: 0 (max: 0)';\\n        container.append(money);\\n        const timers = doc.createElement('div');\\n        timers.id = this.timersId;\\n        timers.style.marginTop = '1rem';\\n        container.append(timers);\\n        doc.body.append(container);\\n    }\\n    setSecurity(security) {\\n        const doc = eval('document');\\n        const el = doc.getElementById(this.securityId);\\n        if (el) {\\n            el.innerText = `Security: ${security.toFixed(3)} (min: ${this.minSecurity})`;\\n        }\\n    }\\n    setMoney(money) {\\n        const doc = eval('document');\\n        const el = doc.getElementById(this.moneyId);\\n        if (el) {\\n            el.innerText = `Money: ${this.ns.formatNumber(money)} (max: ${this.ns.formatNumber(this.maxMoney)})`;\\n        }\\n    }\\n    addTimer(label, time) {\\n        const doc = eval('document');\\n        const now = performance.now();\\n        const target = now + time;\\n        const el = doc.createElement('div');\\n        const container = doc.getElementById(this.timersId);\\n        const refresh = () => {\\n            const remTime = target - performance.now();\\n            if (remTime < 0) {\\n                container?.removeChild(el);\\n                return;\\n            }\\n            el.innerText = `${label}: ${formatTime(remTime)}`;\\n            setTimeout(refresh, 200);\\n        };\\n        refresh();\\n        container?.append(el);\\n    }\\n}\\nexport async function main(ns) {\\n    const host = ns.getHostname();\\n    const target = ns.args[0];\\n    if (!target) {\\n        ns.print('Missing target argument');\\n        ns.exit();\\n    }\\n    const getHostAvailableRam = () => ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\n    const hackRam = ns.getScriptRam(SCRIPTS.SIMPLE_HACK);\\n    const growRam = ns.getScriptRam(SCRIPTS.SIMPLE_GROW);\\n    const weakenRam = ns.getScriptRam(SCRIPTS.SIMPLE_WEAKEN);\\n    if (getHostAvailableRam() < 4 * hackRam) {\\n        ns.print(`Host ${host} does not have enough RAM for this script, aborting.`);\\n        ns.exit();\\n    }\\n    ns.atExit(() => {\\n        Barrier.leave(ns, host, target, ui);\\n    });\\n    Barrier.join(host, target);\\n    const minSecurity = ns.getServerMinSecurityLevel(target);\\n    const maxMoney = ns.getServerMaxMoney(target);\\n    const ui = new UI(ns, target, { minSecurity, maxMoney });\\n    while (true) {\\n        const isManager = await Barrier.register(ns, host, target);\\n        const curSecurity = ns.getServerSecurityLevel(target);\\n        const curMoney = ns.getServerMoneyAvailable(target);\\n        const availableRam = getHostAvailableRam();\\n        isManager && ui.setSecurity(curSecurity);\\n        isManager && ui.setMoney(curMoney);\\n        const events = [];\\n        if (curSecurity > minSecurity) {\\n            const weakenThreads = Math.floor(availableRam / weakenRam);\\n            const weakenTime = ns.getWeakenTime(target);\\n            if (isManager) {\\n                ui.addTimer('Weaken', weakenTime);\\n            }\\n            events.push({\\n                type: 'script-start',\\n                script: 'weaken',\\n                threads: weakenThreads,\\n                t: 0,\\n            });\\n            events.push({\\n                type: 'script-end',\\n                script: 'weaken',\\n                t: weakenTime,\\n            });\\n        }\\n        else if (curMoney < maxMoney) {\\n            const growThreads = Math.floor(availableRam / 2 / growRam);\\n            const growTime = ns.getGrowTime(target);\\n            const weakenThreads = Math.floor((availableRam - growThreads * growRam) / weakenRam);\\n            const weakenTime = ns.getWeakenTime(target);\\n            const weakenDelay = Math.max(0, growTime - weakenTime + OFFSET_MS);\\n            if (isManager) {\\n                ui.addTimer('Grow', growTime);\\n                ui.addTimer('Weaken', weakenDelay + weakenTime);\\n            }\\n            events.push({\\n                type: 'script-start',\\n                script: 'grow',\\n                threads: growThreads,\\n                t: 0,\\n            });\\n            events.push({\\n                type: 'script-end',\\n                script: 'grow',\\n                t: growTime,\\n            });\\n            events.push({\\n                type: 'script-start',\\n                script: 'weaken',\\n                threads: weakenThreads,\\n                t: weakenDelay,\\n            });\\n            events.push({\\n                type: 'script-end',\\n                script: 'weaken',\\n                t: weakenDelay + weakenTime,\\n            });\\n        }\\n        else {\\n            const hackThreads = Math.floor(availableRam / 4 / hackRam);\\n            const hackTime = ns.getHackTime(target);\\n            const growThreads = Math.floor(availableRam / 4 / growRam);\\n            const growTime = ns.getGrowTime(target);\\n            const weakenThreads = Math.floor((availableRam - hackThreads * hackRam - growThreads * growRam) /\\n                weakenRam);\\n            const weakenTime = ns.getWeakenTime(target);\\n            const growDelay = Math.max(0, hackTime - growTime + OFFSET_MS);\\n            const weakenDelay = Math.max(0, growDelay + growTime - weakenTime + OFFSET_MS);\\n            if (isManager) {\\n                ui.addTimer('Hack', hackTime);\\n                ui.addTimer('Grow', growDelay + growTime);\\n                ui.addTimer('Weaken', weakenDelay + weakenTime);\\n            }\\n            events.push({\\n                type: 'script-start',\\n                script: 'hack',\\n                threads: hackThreads,\\n                t: 0,\\n            });\\n            events.push({\\n                type: 'script-end',\\n                script: 'hack',\\n                t: hackTime,\\n            });\\n            events.push({\\n                type: 'script-start',\\n                script: 'grow',\\n                threads: growThreads,\\n                t: growDelay,\\n            });\\n            events.push({\\n                type: 'script-end',\\n                script: 'grow',\\n                t: growDelay + growTime,\\n            });\\n            events.push({\\n                type: 'script-start',\\n                script: 'weaken',\\n                threads: weakenThreads,\\n                t: weakenDelay,\\n            });\\n            events.push({\\n                type: 'script-end',\\n                script: 'weaken',\\n                t: weakenDelay + weakenTime,\\n            });\\n        }\\n        events.sort((a, b) => a.t - b.t);\\n        let elapsedTime = 0;\\n        for (const event of events) {\\n            await ns.sleep(event.t - elapsedTime);\\n            elapsedTime = event.t;\\n            if (event.type === 'script-start') {\\n                const script = event.script === 'grow'\\n                    ? SCRIPTS.SIMPLE_GROW\\n                    : event.script === 'hack'\\n                        ? SCRIPTS.SIMPLE_HACK\\n                        : SCRIPTS.SIMPLE_WEAKEN;\\n                ns.exec(script, host, event.threads, target);\\n            }\\n            else {\\n                if (event.script === 'grow' || event.script === 'hack') {\\n                    ui.setMoney(ns.getServerMoneyAvailable(target));\\n                }\\n                ui.setSecurity(ns.getServerSecurityLevel(target));\\n            }\\n        }\\n        while (ns.scriptRunning(SCRIPTS.SIMPLE_GROW, host) ||\\n            ns.scriptRunning(SCRIPTS.SIMPLE_HACK, host) ||\\n            ns.scriptRunning(SCRIPTS.SIMPLE_WEAKEN, host)) {\\n            await ns.sleep(500);\\n        }\\n        Barrier.finish(ns, host, target);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay12NC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL2hhY2stdjQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0dBRUc7QUFJSCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0seUJBQXlCLENBQUE7QUFDakQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG9CQUFvQixDQUFBO0FBRS9DLE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxDQUFBO0FBQ2pDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQTtBQXdCdEIsTUFBTSxPQUFPO0lBQ1gsTUFBTSxDQUFDLE1BQU0sR0FBa0MsRUFBRSxDQUFBO0lBRWpELE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBaUI7UUFDM0IsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDM0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRztnQkFDdkIsSUFBSSxFQUFFLEtBQUs7Z0JBQ1gsV0FBVyxFQUFFLEtBQUs7Z0JBQ2xCLFlBQVksRUFBRSxJQUFJLEdBQUcsRUFBRTtnQkFDdkIsT0FBTyxFQUFFLElBQUksR0FBRyxFQUFFO2FBQ25CLENBQUE7U0FDRjtJQUNILENBQUM7SUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQVUsRUFBRSxTQUFpQjtRQUN2QyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQ3BCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUE7UUFDckMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDeEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBTSxFQUFFLEVBQVUsRUFBRSxTQUFpQixFQUFFLEVBQU07UUFDeEQsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUNwQixNQUFNLE1B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\",\"filename\":\"scripts/hack-v4.js\",\"server\":\"foodnstuff\"}}],[\"scripts/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HOSTS } from 'scripts/utils/constants';\\nexport async function main(ns) {\\n    const serverName = ns.args[0] ?? HOSTS.MAX_HARDWARE;\\n    ns.printf('Hacking %s...', serverName);\\n    const minSecurity = ns.getServerMinSecurityLevel(serverName);\\n    const maxMoney = ns.getServerMaxMoney(serverName);\\n    const targetSecurity = Math.max(1.3 * minSecurity, minSecurity + 5);\\n    const targetMoney = (0.75 * maxMoney);\\n    while (true) {\\n        const curSecurity = ns.getServerSecurityLevel(serverName);\\n        const curMoney = ns.getServerMoneyAvailable(serverName);\\n        if (curSecurity > targetSecurity) {\\n            ns.printf('Lowering difficulty (current: %.3f, target: %.3f)', curSecurity, targetSecurity);\\n            await ns.weaken(serverName);\\n        }\\n        else if (curMoney < targetMoney) {\\n            ns.printf('Increasing available money (current: %s, target: %s)', ns.formatNumber(curMoney), ns.formatNumber(targetMoney));\\n            await ns.grow(serverName);\\n        }\\n        else {\\n            await ns.hack(serverName);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBRS9DLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxVQUFVLEdBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVksSUFBSSxLQUFLLENBQUMsWUFBWSxDQUFBO0lBRS9ELEVBQUUsQ0FBQyxNQUFNLENBQUMsZUFBZSxFQUFFLFVBQVUsQ0FBQyxDQUFBO0lBRXRDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUM1RCxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLENBQUE7SUFFakQsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsV0FBVyxFQUFFLFdBQVcsR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUNuRSxNQUFNLFdBQVcsR0FBRyxDQUFDLElBQUksR0FBRyxRQUFRLENBQVcsQ0FBQTtJQUUvQyxPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUN6RCxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsdUJBQXVCLENBQUMsVUFBVSxDQUFDLENBQUE7UUFFdkQsSUFBSSxXQUFXLEdBQUcsY0FBYyxFQUFFO1lBQ2hDLEVBQUUsQ0FBQyxNQUFNLENBQ1AsbURBQW1ELEVBQ25ELFdBQVcsRUFDWCxjQUFjLENBQ2YsQ0FBQTtZQUVELE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtTQUM1QjthQUFNLElBQUksUUFBUSxHQUFHLFdBQVcsRUFBRTtZQUNqQyxFQUFFLENBQUMsTUFBTSxDQUNQLHNEQUFzRCxFQUN0RCxFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxFQUN6QixFQUFFLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUM3QixDQUFBO1lBRUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1NBQzFCO2FBQU07WUFDTCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUE7U0FDMUI7S0FDRjtBQUNILENBQUMifQ==\",\"filename\":\"scripts/hack.js\",\"server\":\"foodnstuff\"}}],[\"scripts/loop-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    while (true) {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9vcC13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9sb29wLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/loop-weaken.js\",\"server\":\"foodnstuff\"}}],[\"scripts/misc/heartbreak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// @ts-nocheck\\nexport async function main(ns) {\\n    ns.tprint(ns.heart.break());\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhcnRicmVhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL21pc2MvaGVhcnRicmVhay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxjQUFjO0FBSWQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQTtBQUM3QixDQUFDIn0=\",\"filename\":\"scripts/misc/heartbreak.js\",\"server\":\"foodnstuff\"}}],[\"scripts/nuke-all.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { FILES, HOSTS } from 'scripts/utils/constants';\\nimport { nuke } from 'scripts/nuke';\\nimport { getPurchasedServerName } from 'scripts/buy-servers';\\nimport { getServersByPort } from 'scripts/utils/servers';\\nconst PROGRAMS_LIST = Object.values(FILES);\\nexport async function main(ns) {\\n    const hackTarget = ns.args[0];\\n    for (let i = 0; i < ns.getPurchasedServerLimit(); i++) {\\n        const host = getPurchasedServerName(i);\\n        ns.serverExists(host) && nuke(ns, host, hackTarget);\\n    }\\n    const servers = getServersByPort(ns);\\n    const getRemServersCount = (lists) => lists.reduce((sum, list) => sum + list.length, 0);\\n    while (getRemServersCount(servers) > 0) {\\n        const programCount = PROGRAMS_LIST.reduce((cnt, file) => cnt + (ns.fileExists(file, HOSTS.HOME) ? 1 : 0), 0);\\n        for (let i = 0; i <= programCount; i++) {\\n            if (servers[i].length > 0 &&\\n                ns.getHackingLevel() >= servers[i][0].reqHack) {\\n                nuke(ns, servers[i][0].host, hackTarget);\\n                servers[i] = servers[i].slice(1);\\n            }\\n        }\\n        await ns.sleep(1000);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVrZS1hbGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9udWtlLWFsbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBQ3RELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUE7QUFDbkMsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0scUJBQXFCLENBQUE7QUFDNUQsT0FBTyxFQUFFLGdCQUFnQixFQUFlLE1BQU0sdUJBQXVCLENBQUE7QUFFckUsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUUxQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sVUFBVSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFdkMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3JELE1BQU0sSUFBSSxHQUFHLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3RDLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUE7S0FDcEQ7SUFFRCxNQUFNLE9BQU8sR0FBRyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUVwQyxNQUFNLGtCQUFrQixHQUFHLENBQUMsS0FBaUIsRUFBRSxFQUFFLENBQy9DLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUVuRCxPQUFPLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUN0QyxNQUFNLFlBQVksR0FBRyxhQUFhLENBQUMsTUFBTSxDQUN2QyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDOUQsQ0FBQyxDQUNGLENBQUE7UUFFRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksWUFBWSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3RDLElBQ0UsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDO2dCQUNyQixFQUFFLENBQUMsZUFBZSxFQUFFLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFDN0M7Z0JBQ0EsSUFBSSxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFBO2dCQUN4QyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTthQUNqQztTQUNGO1FBRUQsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3JCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/nuke-all.js\",\"server\":\"foodnstuff\"}}],[\"scripts/nuke.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { FILES, HOSTS } from 'scripts/utils/constants';\\nexport const nuke = (ns, serverName) => {\\n    ns.fileExists(FILES.BRUTE_SSH, HOSTS.HOME) && ns.brutessh(serverName);\\n    ns.fileExists(FILES.FTP_CRACK, HOSTS.HOME) && ns.ftpcrack(serverName);\\n    ns.fileExists(FILES.RELAY_SMTP, HOSTS.HOME) && ns.relaysmtp(serverName);\\n    ns.fileExists(FILES.HTTP_WORM, HOSTS.HOME) && ns.httpworm(serverName);\\n    ns.fileExists(FILES.SQL_INJECT, HOSTS.HOME) && ns.sqlinject(serverName);\\n    ns.nuke(serverName);\\n    if (!ns.hasRootAccess(serverName)) {\\n        ns.tprintf('Failed to nuke %s, aborting.', serverName);\\n        ns.exit();\\n    }\\n};\\nexport async function main(ns) {\\n    if (ns.args.length === 0) {\\n        ns.tprint('Missing server name');\\n        ns.exit();\\n    }\\n    const serverName = ns.args[0];\\n    nuke(ns, serverName);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVrZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL251a2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQTtBQUV0RCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxFQUFNLEVBQUUsVUFBa0IsRUFBRSxFQUFFO0lBQ2pELEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUNyRSxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDckUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQ3ZFLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUNyRSxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUE7SUFFdkUsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUVuQixJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsRUFBRTtRQUNqQyxFQUFFLENBQUMsT0FBTyxDQUFDLDhCQUE4QixFQUFFLFVBQVUsQ0FBQyxDQUFBO1FBQ3RELEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtLQUNWO0FBQ0gsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUN4QixFQUFFLENBQUMsTUFBTSxDQUFDLHFCQUFxQixDQUFDLENBQUE7UUFDaEMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFBO0tBQ1Y7SUFFRCxNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFBO0lBRXZDLElBQUksQ0FBQyxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUE7QUFDdEIsQ0FBQyJ9\",\"filename\":\"scripts/nuke.js\",\"server\":\"foodnstuff\"}}],[\"scripts/server-tree.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from 'scripts/utils/servers';\\nimport { HOSTS } from 'scripts/utils/constants';\\nexport async function main(ns) {\\n    const servers = getAllServers(ns);\\n    const printTree = (root, level = 0) => {\\n        ns.tprint(Array(level).join('    ') + root);\\n        for (const server of servers) {\\n            if (server.parent === root) {\\n                printTree(server.host, level + 1);\\n            }\\n        }\\n    };\\n    printTree(HOSTS.HOME);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXRyZWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zZXJ2ZXItdHJlZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sdUJBQXVCLENBQUE7QUFDckQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBRS9DLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxPQUFPLEdBQUcsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBRWpDLE1BQU0sU0FBUyxHQUFHLENBQUMsSUFBWSxFQUFFLEtBQUssR0FBRyxDQUFDLEVBQUUsRUFBRTtRQUM1QyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUE7UUFDM0MsS0FBSyxNQUFNLE1BQU0sSUFBSSxPQUFPLEVBQUU7WUFDNUIsSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLElBQUksRUFBRTtnQkFDMUIsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFBO2FBQ2xDO1NBQ0Y7SUFDSCxDQUFDLENBQUE7SUFFRCxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO0FBQ3ZCLENBQUMifQ==\",\"filename\":\"scripts/server-tree.js\",\"server\":\"foodnstuff\"}}],[\"scripts/simple-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.grow(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-grow.js\",\"server\":\"foodnstuff\"}}],[\"scripts/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    await ns.hack(host);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQixDQUFDIn0=\",\"filename\":\"scripts/simple-hack.js\",\"server\":\"foodnstuff\"}}],[\"scripts/test.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"let foo = 0;\\nexport async function main(ns) {\\n    ns.tprint(foo);\\n    foo += 1;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3Rlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFBO0FBRVgsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ2QsR0FBRyxJQUFJLENBQUMsQ0FBQTtBQUNWLENBQUMifQ==\",\"filename\":\"scripts/test.js\",\"server\":\"foodnstuff\"}}],[\"scripts/ui/timer.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatTime } from 'scripts/utils/time';\\nconst CONTAINER_ID = 'custom-ui-container';\\nconst init = () => {\\n    const doc = eval('document');\\n    if (doc.getElementById(CONTAINER_ID)) {\\n        return;\\n    }\\n    const container = doc.createElement('div');\\n    container.id = CONTAINER_ID;\\n    container.style.position = 'fixed';\\n    container.style.bottom = '2rem';\\n    container.style.right = '0';\\n    container.style.display = 'flex';\\n    container.style.flexDirection = 'column';\\n    container.style.alignItems = 'end';\\n    container.style.fontFamily =\\n        '\\\"Lucida Console\\\", \\\"Lucida Sans Unicode\\\", \\\"Fira Mono\\\", Consolas, \\\"Courier New\\\", Courier, monospace, \\\"Times New Roman\\\"';\\n    container.style.zIndex = '100';\\n    container.style.color = '#0c0';\\n    doc.body.append(container);\\n};\\nexport const createTimer = (label, time) => {\\n    const doc = eval('document');\\n    init();\\n    const now = performance.now();\\n    const target = now + time;\\n    const el = doc.createElement('div');\\n    el.style.padding = '1rem 0.5rem';\\n    el.style.borderStyle = 'solid';\\n    el.style.borderColor = 'rgb(128, 128, 128)';\\n    el.style.borderWidth = '1px';\\n    const container = doc.getElementById(CONTAINER_ID);\\n    const refresh = () => {\\n        const remTime = target - performance.now();\\n        if (remTime < 0) {\\n            container?.removeChild(el);\\n            return;\\n        }\\n        el.innerText = `${label}: ${formatTime(remTime)}`;\\n        setTimeout(refresh, 100);\\n    };\\n    refresh();\\n    container?.append(el);\\n};\\nexport async function main() {\\n    init();\\n    createTimer('Test', 30000);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy91aS90aW1lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sb0JBQW9CLENBQUE7QUFFL0MsTUFBTSxZQUFZLEdBQUcscUJBQXFCLENBQUE7QUFFMUMsTUFBTSxJQUFJLEdBQUcsR0FBRyxFQUFFO0lBQ2hCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQWEsQ0FBQTtJQUV4QyxJQUFJLEdBQUcsQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLEVBQUU7UUFDcEMsT0FBTTtLQUNQO0lBRUQsTUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUMxQyxTQUFTLENBQUMsRUFBRSxHQUFHLFlBQVksQ0FBQTtJQUMzQixTQUFTLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUE7SUFDbEMsU0FBUyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFBO0lBQy9CLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQTtJQUMzQixTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUE7SUFDaEMsU0FBUyxDQUFDLEtBQUssQ0FBQyxhQUFhLEdBQUcsUUFBUSxDQUFBO0lBQ3hDLFNBQVMsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQTtJQUNsQyxTQUFTLENBQUMsS0FBSyxDQUFDLFVBQVU7UUFDeEIsc0hBQXNILENBQUE7SUFDeEgsU0FBUyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFBO0lBQzlCLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQTtJQUU5QixHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQTtBQUM1QixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsQ0FBQyxLQUFhLEVBQUUsSUFBWSxFQUFFLEVBQUU7SUFDekQsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBYSxDQUFBO0lBRXhDLElBQUksRUFBRSxDQUFBO0lBRU4sTUFBTSxHQUFHLEdBQUcsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFBO0lBQzdCLE1BQU0sTUFBTSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUE7SUFFekIsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUNuQyxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxhQUFhLENBQUE7SUFDaEMsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFBO0lBQzlCLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFHLG9CQUFvQixDQUFBO0lBQzNDLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQTtJQUU1QixNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFBO0lBRWxELE1BQU0sT0FBTyxHQUFHLEdBQUcsRUFBRTtRQUNuQixNQUFNLE9BQU8sR0FBRyxNQUFNLEdBQUcsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFBO1FBRTFDLElBQUksT0FBTyxHQUFHLENBQUMsRUFBRTtZQUNmLFNBQVMsRUFBRSxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUE7WUFDMUIsT0FBTTtTQUNQO1FBRUQsRUFBRSxDQUFDLFNBQVMsR0FBRyxHQUFHLEtBQUssS0FBSyxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQTtRQUNqRCxVQUFVLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFBO0lBQzFCLENBQUMsQ0FBQTtJQUVELE9BQU8sRUFBRSxDQUFBO0lBRVQsU0FBUyxFQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQTtBQUN2QixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUk7SUFDeEIsSUFBSSxFQUFFLENBQUE7SUFFTixXQUFXLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFBO0FBQzVCLENBQUMifQ==\",\"filename\":\"scripts/ui/timer.js\",\"server\":\"foodnstuff\"}}],[\"scripts/utils/servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HOSTS } from 'scripts/utils/constants';\\nexport const getServersByPort = (ns) => {\\n    const serversByPort = [[], [], [], [], [], []];\\n    const seen = new Set();\\n    const dfs = (host, prv) => {\\n        const server = {\\n            parent: prv,\\n            host,\\n            ports: ns.getServerNumPortsRequired(host),\\n            reqHack: ns.getServerRequiredHackingLevel(host),\\n            maxMoney: ns.getServerMaxMoney(host),\\n            minSecurity: ns.getServerMinSecurityLevel(host),\\n        };\\n        serversByPort[server.ports].push(server);\\n        seen.add(host);\\n        for (const nxt of ns.scan(host)) {\\n            if (!seen.has(nxt)) {\\n                dfs(nxt, host);\\n            }\\n        }\\n    };\\n    dfs(HOSTS.HOME, null);\\n    for (let i = 0; i < 6; i++) {\\n        serversByPort[i].sort((sa, sb) => sa.reqHack - sb.reqHack);\\n    }\\n    return serversByPort;\\n};\\nexport const getAllServers = (ns) => getServersByPort(ns).flat();\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL3V0aWxzL3NlcnZlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBVy9DLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsRUFBTSxFQUFjLEVBQUU7SUFDckQsTUFBTSxhQUFhLEdBQWUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBQzFELE1BQU0sSUFBSSxHQUFHLElBQUksR0FBRyxFQUFVLENBQUE7SUFFOUIsTUFBTSxHQUFHLEdBQUcsQ0FBQyxJQUFZLEVBQUUsR0FBa0IsRUFBRSxFQUFFO1FBQy9DLE1BQU0sTUFBTSxHQUFHO1lBQ2IsTUFBTSxFQUFFLEdBQUc7WUFDWCxJQUFJO1lBQ0osS0FBSyxFQUFFLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUM7WUFDekMsT0FBTyxFQUFFLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQyxJQUFJLENBQUM7WUFDL0MsUUFBUSxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUM7WUFDcEMsV0FBVyxFQUFFLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUM7U0FDaEQsQ0FBQTtRQUVELGFBQWEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ3hDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7UUFFZCxLQUFLLE1BQU0sR0FBRyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDL0IsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ2xCLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUE7YUFDZjtTQUNGO0lBQ0gsQ0FBQyxDQUFBO0lBRUQsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUE7SUFFckIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUMxQixhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUE7S0FDM0Q7SUFFRCxPQUFPLGFBQWEsQ0FBQTtBQUN0QixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxFQUFNLEVBQVksRUFBRSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFBIn0=\",\"filename\":\"scripts/utils/servers.js\",\"server\":\"foodnstuff\"}}],[\"scripts/utils/time.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const formatTime = (timeMs) => {\\n    const seconds = Math.floor(timeMs / 1000);\\n    const minutes = Math.floor(seconds / 60);\\n    const remSeconds = seconds - minutes * 60;\\n    return `${minutes.toString().padStart(2, '0')}:${remSeconds\\n        .toString()\\n        .padStart(2, '0')}`;\\n};\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL3V0aWxzL3RpbWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsTUFBYyxFQUFFLEVBQUU7SUFDM0MsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLENBQUE7SUFDekMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDLENBQUE7SUFDeEMsTUFBTSxVQUFVLEdBQUcsT0FBTyxHQUFHLE9BQU8sR0FBRyxFQUFFLENBQUE7SUFDekMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLFVBQVU7U0FDeEQsUUFBUSxFQUFFO1NBQ1YsUUFBUSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFBO0FBQ3ZCLENBQUMsQ0FBQSJ9\",\"filename\":\"scripts/utils/time.js\",\"server\":\"foodnstuff\"}}],[\"scripts/weaken-all.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { FILES, HOSTS, SCRIPTS } from 'scripts/utils/constants';\\nimport { getPurchasedServerName } from 'scripts/buy-servers';\\nimport { getServersByPort } from 'scripts/utils/servers';\\nimport { LOOP_FLAG } from 'scripts/simple-weaken';\\nimport { nuke } from 'scripts/nuke';\\nconst PROGRAMS_LIST = Object.values(FILES);\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const FILES_TO_COPY = [SCRIPTS.SIMPLE_WEAKEN];\\n    const getAvailableRam = (host) => ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\n    const weakRam = ns.getScriptRam(SCRIPTS.SIMPLE_WEAKEN);\\n    const runScript = (host) => {\\n        ns.scp(FILES_TO_COPY, host, HOSTS.HOME);\\n        const threads = Math.floor(getAvailableRam(host) / weakRam);\\n        if (threads > 0) {\\n            ns.exec(SCRIPTS.SIMPLE_WEAKEN, host, threads, target, LOOP_FLAG);\\n        }\\n    };\\n    for (let i = 0; i < ns.getPurchasedServerLimit(); i++) {\\n        const host = getPurchasedServerName(i);\\n        if (ns.serverExists(host)) {\\n            runScript(host);\\n        }\\n    }\\n    const servers = getServersByPort(ns);\\n    const getRemServersCount = (lists) => lists.reduce((sum, list) => sum + list.length, 0);\\n    while (getRemServersCount(servers) > 0) {\\n        const programCount = PROGRAMS_LIST.reduce((cnt, file) => cnt + (ns.fileExists(file, HOSTS.HOME) ? 1 : 0), 0);\\n        for (let i = 0; i <= programCount; i++) {\\n            if (servers[i].length > 0 &&\\n                ns.getHackingLevel() >= servers[i][0].reqHack) {\\n                nuke(ns, servers[i][0].host);\\n                runScript(servers[i][0].host);\\n                servers[i] = servers[i].slice(1);\\n            }\\n        }\\n        await ns.sleep(1000);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLWFsbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3dlYWtlbi1hbGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLE1BQU0seUJBQXlCLENBQUE7QUFDL0QsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0scUJBQXFCLENBQUE7QUFDNUQsT0FBTyxFQUFFLGdCQUFnQixFQUFlLE1BQU0sdUJBQXVCLENBQUE7QUFDckUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHVCQUF1QixDQUFBO0FBQ2pELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUE7QUFFbkMsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUUxQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFbkMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUE7SUFFN0MsTUFBTSxlQUFlLEdBQUcsQ0FBQyxJQUFZLEVBQUUsRUFBRSxDQUN2QyxFQUFFLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUV0RCxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQTtJQUV0RCxNQUFNLFNBQVMsR0FBRyxDQUFDLElBQVksRUFBRSxFQUFFO1FBQ2pDLEVBQUUsQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDdkMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUE7UUFDM0QsSUFBSSxPQUFPLEdBQUcsQ0FBQyxFQUFFO1lBQ2YsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFBO1NBQ2pFO0lBQ0gsQ0FBQyxDQUFBO0lBRUQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3JELE1BQU0sSUFBSSxHQUFHLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3RDLElBQUksRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN6QixTQUFTLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDaEI7S0FDRjtJQUVELE1BQU0sT0FBTyxHQUFHLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBRXBDLE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxLQUFpQixFQUFFLEVBQUUsQ0FDL0MsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBRW5ELE9BQU8sa0JBQWtCLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ3RDLE1BQU0sWUFBWSxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQ3ZDLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUM5RCxDQUFDLENBQ0YsQ0FBQTtRQUVELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxZQUFZLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDdEMsSUFDRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUM7Z0JBQ3JCLEVBQUUsQ0FBQyxlQUFlLEVBQUUsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUM3QztnQkFDQSxJQUFJLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtnQkFDNUIsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtnQkFDN0IsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7YUFDakM7U0FDRjtRQUVELE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtLQUNyQjtBQUNILENBQUMifQ==\",\"filename\":\"scripts/weaken-all.js\",\"server\":\"foodnstuff\"}}],[\"template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    ns.tprint('Hello Remote API!');\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdGVtcGxhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUE7QUFDaEMsQ0FBQyJ9\",\"filename\":\"template.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":400000,\"moneyMax\":2000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,516]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4124.562655250821,\"onlineMoneyMade\":0,\"onlineRunningTime\":1126.6100000001193,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":6,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":true,\"ip\":\"33.6.4.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":460000,\"moneyMax\":2300000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,873]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6978.184492313871,\"onlineMoneyMade\":0,\"onlineRunningTime\":1419.2100000001858,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":9,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":true,\"ip\":\"35.8.0.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\",\"nectar-net\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":500000,\"moneyMax\":2500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,873]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6978.184492313871,\"onlineMoneyMade\":0,\"onlineRunningTime\":1418.2100000001856,\"ramUsage\":1.75,\"server\":\"joesguns\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":9,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"12.1.2.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"joesguns\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":1500000,\"moneyMax\":7500000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,1746]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13956.368984627741,\"onlineMoneyMade\":0,\"onlineRunningTime\":1415.210000000185,\"ramUsage\":1.75,\"server\":\"zer0\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":18,\"temporary\":false}}]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":true,\"ip\":\"19.7.1.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"joesguns\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":550000,\"moneyMax\":2750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,873]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6978.184492313871,\"onlineMoneyMade\":0,\"onlineRunningTime\":1417.2100000001853,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":9,\"temporary\":false}}]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"20.5.5.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"computek\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":1000000,\"moneyMax\":5000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,1728]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13812.488892002713,\"onlineMoneyMade\":0,\"onlineRunningTime\":1421.4100000001863,\"ramUsage\":1.75,\"server\":\"neo-net\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":18,\"temporary\":false}}]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"46.1.8.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"max-hardware\",\"the-hub\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":9000000,\"moneyMax\":45000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,3456]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":27624.977784005427,\"onlineMoneyMade\":0,\"onlineRunningTime\":1363.010000000173,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":36,\"temporary\":false}}]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":true,\"ip\":\"12.1.5.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":600000,\"moneyMax\":3000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,873]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6978.184492313871,\"onlineMoneyMade\":0,\"onlineRunningTime\":1416.2100000001851,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":9,\"temporary\":false}}]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":true,\"ip\":\"85.4.1.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":800000,\"moneyMax\":4000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,873]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6978.184492313871,\"onlineMoneyMade\":0,\"onlineRunningTime\":1415.210000000185,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":9,\"temporary\":false}}]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"1.7.0.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":4800000,\"moneyMax\":24000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,1728]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13812.488892002713,\"onlineMoneyMade\":0,\"onlineRunningTime\":1364.0100000001732,\"ramUsage\":1.75,\"server\":\"phantasy\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":18,\"temporary\":false}}]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"25.5.5.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"joesguns\",\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2000000,\"moneyMax\":10000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,1728]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13812.488892002713,\"onlineMoneyMade\":0,\"onlineRunningTime\":1403.0100000001821,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":18,\"temporary\":false}}]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"1.9.9.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":33,\"hackDifficulty\":33,\"minDifficulty\":11,\"moneyAvailable\":12138287,\"moneyMax\":60691435,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":183,\"serverGrowth\":34,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,1710]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13668.608799377686,\"onlineMoneyMade\":0,\"onlineRunningTime\":1343.8100000001687,\"ramUsage\":1.75,\"server\":\"omega-net\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":18,\"temporary\":false}}]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"95.0.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"crush-fitness\"}}]]},\"serversOnNetwork\":[\"neo-net\",\"zb-institute\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":41,\"hackDifficulty\":41,\"minDifficulty\":14,\"moneyAvailable\":9935521.8,\"moneyMax\":49677609,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":245,\"serverGrowth\":30,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"0.5.8.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":4000000,\"moneyMax\":20000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,1728]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13812.488892002713,\"onlineMoneyMade\":0,\"onlineRunningTime\":1364.0100000001732,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":18,\"temporary\":false}}]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"35.2.0.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"millenium-fitness\"}}]]},\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":50000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":483,\"serverGrowth\":36,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,1062]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8488.925464876684,\"onlineMoneyMade\":0,\"onlineRunningTime\":730.2100000000291,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":18,\"temporary\":false}}]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"40.2.5.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":180000000,\"moneyMax\":900000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1023,\"serverGrowth\":60,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"51.7.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":90000000,\"moneyMax\":450000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":792,\"serverGrowth\":42,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"78.9.8.8\",\"isConnectedTo\":true,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"run4theh111z\"}}]]},\"serversOnNetwork\":[\"zb-def\",\"stormtech\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":534,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,803]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6418.650798772103,\"onlineMoneyMade\":0,\"onlineRunningTime\":134.01000000000093,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":73,\"temporary\":false}}]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"49.0.9.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"I.I.I.I\"}}]]},\"serversOnNetwork\":[\"crush-fitness\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":341,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,6132]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":49015.15155425972,\"onlineMoneyMade\":0,\"onlineRunningTime\":1090.610000000111,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":73,\"temporary\":false}}]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"73.6.5.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":217,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,3384]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":27049.457413505315,\"onlineMoneyMade\":0,\"onlineRunningTime\":1306.8100000001602,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":36,\"temporary\":false}}]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"78.2.1.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\".\"}}]]},\"serversOnNetwork\":[\"fulcrumtech\",\"blade\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":518,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,288]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2302.081482000455,\"onlineMoneyMade\":0,\"onlineRunningTime\":388.0099999999865,\"ramUsage\":1.75,\"server\":\".\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":9,\"temporary\":false}}]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"42.8.8.0\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"foodnstuff\",\"neo-net\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":55,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,388]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3101.4153299172863,\"onlineMoneyMade\":0,\"onlineRunningTime\":1420.210000000186,\"ramUsage\":1.75,\"server\":\"CSEC\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":4,\"temporary\":false}}]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"76.5.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"1.2.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":6000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"95.8.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"darkweb\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"s0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s0\",\"httpPortOpen\":true,\"ip\":\"91.3.8.9\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s0\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,100620]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":804289.7177739075,\"onlineMoneyMade\":0,\"onlineRunningTime\":1127.8100000001195,\"ramUsage\":1.75,\"server\":\"s0\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":1170,\"temporary\":false}}]}},\"s1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s1\",\"httpPortOpen\":true,\"ip\":\"36.8.5.6\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s1\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,100620]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":804289.7177739075,\"onlineMoneyMade\":0,\"onlineRunningTime\":1127.8100000001195,\"ramUsage\":1.75,\"server\":\"s1\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":1170,\"temporary\":false}}]}},\"s2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s2\",\"httpPortOpen\":true,\"ip\":\"46.5.0.6\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s2\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,100620]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":804289.7177739075,\"onlineMoneyMade\":0,\"onlineRunningTime\":1127.8100000001195,\"ramUsage\":1.75,\"server\":\"s2\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":1170,\"temporary\":false}}]}},\"s3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s3\",\"httpPortOpen\":true,\"ip\":\"43.6.8.8\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s3\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,100620]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":804289.7177739075,\"onlineMoneyMade\":0,\"onlineRunningTime\":1127.8100000001195,\"ramUsage\":1.75,\"server\":\"s3\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":1170,\"temporary\":false}}]}},\"s4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s4\",\"httpPortOpen\":true,\"ip\":\"11.7.1.4\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s4\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,100620]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":804289.7177739075,\"onlineMoneyMade\":0,\"onlineRunningTime\":1127.8100000001195,\"ramUsage\":1.75,\"server\":\"s4\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":1170,\"temporary\":false}}]}},\"s5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s5\",\"httpPortOpen\":true,\"ip\":\"19.3.5.4\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s5\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,100620]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":804289.7177739075,\"onlineMoneyMade\":0,\"onlineRunningTime\":1127.8100000001195,\"ramUsage\":1.75,\"server\":\"s5\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":1170,\"temporary\":false}}]}},\"s6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s6\",\"httpPortOpen\":true,\"ip\":\"28.2.4.8\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s6\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,100620]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":804289.7177739075,\"onlineMoneyMade\":0,\"onlineRunningTime\":1127.8100000001195,\"ramUsage\":1.75,\"server\":\"s6\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":1170,\"temporary\":false}}]}},\"s7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s7\",\"httpPortOpen\":true,\"ip\":\"64.3.3.1\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s7\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,100620]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":804289.7177739075,\"onlineMoneyMade\":0,\"onlineRunningTime\":1127.8100000001195,\"ramUsage\":1.75,\"server\":\"s7\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":1170,\"temporary\":false}}]}},\"s8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s8\",\"httpPortOpen\":true,\"ip\":\"96.4.6.8\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s8\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,100620]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":804289.7177739075,\"onlineMoneyMade\":0,\"onlineRunningTime\":1127.8100000001195,\"ramUsage\":1.75,\"server\":\"s8\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":1170,\"temporary\":false}}]}},\"s9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s9\",\"httpPortOpen\":true,\"ip\":\"27.0.8.7\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s9\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,100620]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":804289.7177739075,\"onlineMoneyMade\":0,\"onlineRunningTime\":1127.8100000001195,\"ramUsage\":1.75,\"server\":\"s9\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":1170,\"temporary\":false}}]}},\"s10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s10\",\"httpPortOpen\":true,\"ip\":\"76.5.3.8\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s10\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,100620]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":804289.7177739075,\"onlineMoneyMade\":0,\"onlineRunningTime\":1127.8100000001195,\"ramUsage\":1.75,\"server\":\"s10\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":1170,\"temporary\":false}}]}},\"s11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s11\",\"httpPortOpen\":true,\"ip\":\"87.2.4.8\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s11\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,100620]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":804289.7177739075,\"onlineMoneyMade\":0,\"onlineRunningTime\":1127.8100000001195,\"ramUsage\":1.75,\"server\":\"s11\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":1170,\"temporary\":false}}]}},\"s12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s12\",\"httpPortOpen\":true,\"ip\":\"79.2.6.2\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s12\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,100620]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":804289.7177739075,\"onlineMoneyMade\":0,\"onlineRunningTime\":1127.8100000001195,\"ramUsage\":1.75,\"server\":\"s12\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":1170,\"temporary\":false}}]}},\"s13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s13\",\"httpPortOpen\":true,\"ip\":\"59.6.0.3\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s13\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,100620]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":804289.7177739075,\"onlineMoneyMade\":0,\"onlineRunningTime\":1127.8100000001195,\"ramUsage\":1.75,\"server\":\"s13\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":1170,\"temporary\":false}}]}},\"s14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s14\",\"httpPortOpen\":true,\"ip\":\"0.8.1.2\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s14\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,100620]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":804289.7177739075,\"onlineMoneyMade\":0,\"onlineRunningTime\":1127.8100000001195,\"ramUsage\":1.75,\"server\":\"s14\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":1170,\"temporary\":false}}]}},\"s15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s15\",\"httpPortOpen\":true,\"ip\":\"64.7.7.3\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s15\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,100620]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":804289.7177739075,\"onlineMoneyMade\":0,\"onlineRunningTime\":1127.8100000001195,\"ramUsage\":1.75,\"server\":\"s15\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":1170,\"temporary\":false}}]}},\"s16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s16\",\"httpPortOpen\":true,\"ip\":\"43.0.5.2\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s16\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,100620]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":804289.7177739075,\"onlineMoneyMade\":0,\"onlineRunningTime\":1127.8100000001195,\"ramUsage\":1.75,\"server\":\"s16\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":1170,\"temporary\":false}}]}},\"s17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s17\",\"httpPortOpen\":true,\"ip\":\"10.1.7.5\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s17\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,100620]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":804289.7177739075,\"onlineMoneyMade\":0,\"onlineRunningTime\":1127.8100000001195,\"ramUsage\":1.75,\"server\":\"s17\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":1170,\"temporary\":false}}]}},\"s18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s18\",\"httpPortOpen\":true,\"ip\":\"39.5.9.2\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s18\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,100620]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":804289.7177739075,\"onlineMoneyMade\":0,\"onlineRunningTime\":1127.8100000001195,\"ramUsage\":1.75,\"server\":\"s18\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":1170,\"temporary\":false}}]}},\"s19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s19\",\"httpPortOpen\":true,\"ip\":\"21.9.7.7\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s19\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,50310]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":402144.85888695373,\"onlineMoneyMade\":0,\"onlineRunningTime\":1127.8100000001195,\"ramUsage\":1.75,\"server\":\"s19\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":585,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,49725]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":397468.7558766403,\"onlineMoneyMade\":0,\"onlineRunningTime\":1106.6100000001147,\"ramUsage\":1.75,\"server\":\"s19\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":585,\"temporary\":false}}]}},\"s20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s20\",\"httpPortOpen\":true,\"ip\":\"41.8.1.9\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s20\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,50310]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":402144.85888695373,\"onlineMoneyMade\":0,\"onlineRunningTime\":1127.8100000001195,\"ramUsage\":1.75,\"server\":\"s20\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":585,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,49725]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":397468.7558766403,\"onlineMoneyMade\":0,\"onlineRunningTime\":1105.6100000001145,\"ramUsage\":1.75,\"server\":\"s20\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":585,\"temporary\":false}}]}},\"s21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s21\",\"httpPortOpen\":true,\"ip\":\"29.4.6.1\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s21\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,50310]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":402144.85888695373,\"onlineMoneyMade\":0,\"onlineRunningTime\":1127.8100000001195,\"ramUsage\":1.75,\"server\":\"s21\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":585,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,49725]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":397468.7558766403,\"onlineMoneyMade\":0,\"onlineRunningTime\":1104.6100000001143,\"ramUsage\":1.75,\"server\":\"s21\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":585,\"temporary\":false}}]}},\"s22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s22\",\"httpPortOpen\":true,\"ip\":\"36.8.1.1\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s22\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,50310]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":402144.85888695373,\"onlineMoneyMade\":0,\"onlineRunningTime\":1127.8100000001195,\"ramUsage\":1.75,\"server\":\"s22\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":585,\"temporary\":false}}]}},\"s23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s23\",\"httpPortOpen\":true,\"ip\":\"60.2.6.3\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s23\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,50310]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":402144.85888695373,\"onlineMoneyMade\":0,\"onlineRunningTime\":1127.8100000001195,\"ramUsage\":1.75,\"server\":\"s23\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":585,\"temporary\":false}}]}},\"s24\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"s24\",\"httpPortOpen\":true,\"ip\":\"91.8.5.5\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/simple-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const LOOP_FLAG = '--loop';\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    const shouldLoop = ns.args.includes(LOOP_FLAG);\\n    if (!host) {\\n        ns.print('Missing host argument');\\n        ns.exit();\\n    }\\n    if (shouldLoop) {\\n        while (true) {\\n            await ns.weaken(host);\\n        }\\n    }\\n    else {\\n        await ns.weaken(host);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3NpbXBsZS13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQTtBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUE7SUFFakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDVjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxJQUFJLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7S0FDRjtTQUFNO1FBQ0wsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"scripts/simple-weaken.js\",\"server\":\"s24\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"--loop\"],\"dataMap\":{\"n00dles\":[0,0,0,50310]},\"filename\":\"scripts/simple-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":402144.85888695373,\"onlineMoneyMade\":0,\"onlineRunningTime\":1127.8100000001195,\"ramUsage\":1.75,\"server\":\"s24\",\"scriptKey\":\"scripts/simple-weaken.js*[\\\"n00dles\\\",\\\"--loop\\\"]\",\"title\":\"scripts/simple-weaken.js n00dles --loop\",\"threads\":585,\"temporary\":false}}]}}}","CompaniesSave":"{\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":86004.93963261879}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":525057.4440422673}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":135.4891,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":26162.60012952207}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":78.1335,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":881.0359873283559}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":49.7859,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":59.9785,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":585.903954561532}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"SoA - phyzical WKS harmonizer\",\"SoA - Might of Ares\",\"SoA - Wisdom of Athena\",\"SoA - Chaos of Dionysus\",\"SoA - Beauty of Aphrodite\",\"SoA - Trickery of Hermes\",\"SoA - Flood of Poseidon\",\"SoA - Hunt of Artemis\",\"SoA - Knowledge of Apollo\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Shadows of Anarchy\",\"playerReputation\":0}}}","AliasesSave":"{\"nuke\":\"run scripts/nuke.js\",\"sa\":\"scan-analyze\",\"c\":\"connect\",\"scpa\":\"run scripts/scp-all.js\",\"hc\":\"run scripts/hack-candidates.js\",\"ha\":\"run scripts/hack-all.js\",\"cf\":\"run scripts/contract-finder.js\",\"st\":\"run scripts/server-tree.js\"}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":10,\"ActiveScriptsScriptPageSize\":10,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":12525,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-7,\"y\":0,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"32","AllGangsSave":"","LastExportBonus":"1687116858296","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}